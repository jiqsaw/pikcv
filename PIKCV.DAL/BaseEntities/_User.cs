
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _User : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _User()
		{
			this.QuerySource = "User";
			this.MappingName = "User";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int UserID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.UserID, UserID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter EmployeeTypeCode
			{
				get
				{
					return new SqlParameter("@EmployeeTypeCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FirstName
			{
				get
				{
					return new SqlParameter("@FirstName", SqlDbType.NVarChar, 32);
				}
			}
			
			public static SqlParameter LastName
			{
				get
				{
					return new SqlParameter("@LastName", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter Email
			{
				get
				{
					return new SqlParameter("@Email", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter Password
			{
				get
				{
					return new SqlParameter("@Password", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter IdentityNo
			{
				get
				{
					return new SqlParameter("@IdentityNo", SqlDbType.Char, 11);
				}
			}
			
			public static SqlParameter SecretQuestion
			{
				get
				{
					return new SqlParameter("@SecretQuestion", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter SecretAnswer
			{
				get
				{
					return new SqlParameter("@SecretAnswer", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter ActivationNumber
			{
				get
				{
					return new SqlParameter("@ActivationNumber", SqlDbType.Char, 20);
				}
			}
			
			public static SqlParameter LastLoginDate
			{
				get
				{
					return new SqlParameter("@LastLoginDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CreateDate
			{
				get
				{
					return new SqlParameter("@CreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifyDate
			{
				get
				{
					return new SqlParameter("@ModifyDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IsWantedSMS
			{
				get
				{
					return new SqlParameter("@IsWantedSMS", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsEmailConfirmed
			{
				get
				{
					return new SqlParameter("@IsEmailConfirmed", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsCVActive
			{
				get
				{
					return new SqlParameter("@IsCVActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsCVConfirmed
			{
				get
				{
					return new SqlParameter("@IsCVConfirmed", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsDeleted
			{
				get
				{
					return new SqlParameter("@IsDeleted", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string UserID = "UserID";
            public const string EmployeeTypeCode = "EmployeeTypeCode";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string Email = "Email";
            public const string Password = "Password";
            public const string IdentityNo = "IdentityNo";
            public const string SecretQuestion = "SecretQuestion";
            public const string SecretAnswer = "SecretAnswer";
            public const string ActivationNumber = "ActivationNumber";
            public const string LastLoginDate = "LastLoginDate";
            public const string CreateDate = "CreateDate";
            public const string ModifyDate = "ModifyDate";
            public const string IsWantedSMS = "IsWantedSMS";
            public const string IsEmailConfirmed = "IsEmailConfirmed";
            public const string IsCVActive = "IsCVActive";
            public const string IsCVConfirmed = "IsCVConfirmed";
            public const string IsActive = "IsActive";
            public const string IsDeleted = "IsDeleted";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserID] = _User.PropertyNames.UserID;
					ht[EmployeeTypeCode] = _User.PropertyNames.EmployeeTypeCode;
					ht[FirstName] = _User.PropertyNames.FirstName;
					ht[LastName] = _User.PropertyNames.LastName;
					ht[Email] = _User.PropertyNames.Email;
					ht[Password] = _User.PropertyNames.Password;
					ht[IdentityNo] = _User.PropertyNames.IdentityNo;
					ht[SecretQuestion] = _User.PropertyNames.SecretQuestion;
					ht[SecretAnswer] = _User.PropertyNames.SecretAnswer;
					ht[ActivationNumber] = _User.PropertyNames.ActivationNumber;
					ht[LastLoginDate] = _User.PropertyNames.LastLoginDate;
					ht[CreateDate] = _User.PropertyNames.CreateDate;
					ht[ModifyDate] = _User.PropertyNames.ModifyDate;
					ht[IsWantedSMS] = _User.PropertyNames.IsWantedSMS;
					ht[IsEmailConfirmed] = _User.PropertyNames.IsEmailConfirmed;
					ht[IsCVActive] = _User.PropertyNames.IsCVActive;
					ht[IsCVConfirmed] = _User.PropertyNames.IsCVConfirmed;
					ht[IsActive] = _User.PropertyNames.IsActive;
					ht[IsDeleted] = _User.PropertyNames.IsDeleted;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string UserID = "UserID";
            public const string EmployeeTypeCode = "EmployeeTypeCode";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string Email = "Email";
            public const string Password = "Password";
            public const string IdentityNo = "IdentityNo";
            public const string SecretQuestion = "SecretQuestion";
            public const string SecretAnswer = "SecretAnswer";
            public const string ActivationNumber = "ActivationNumber";
            public const string LastLoginDate = "LastLoginDate";
            public const string CreateDate = "CreateDate";
            public const string ModifyDate = "ModifyDate";
            public const string IsWantedSMS = "IsWantedSMS";
            public const string IsEmailConfirmed = "IsEmailConfirmed";
            public const string IsCVActive = "IsCVActive";
            public const string IsCVConfirmed = "IsCVConfirmed";
            public const string IsActive = "IsActive";
            public const string IsDeleted = "IsDeleted";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserID] = _User.ColumnNames.UserID;
					ht[EmployeeTypeCode] = _User.ColumnNames.EmployeeTypeCode;
					ht[FirstName] = _User.ColumnNames.FirstName;
					ht[LastName] = _User.ColumnNames.LastName;
					ht[Email] = _User.ColumnNames.Email;
					ht[Password] = _User.ColumnNames.Password;
					ht[IdentityNo] = _User.ColumnNames.IdentityNo;
					ht[SecretQuestion] = _User.ColumnNames.SecretQuestion;
					ht[SecretAnswer] = _User.ColumnNames.SecretAnswer;
					ht[ActivationNumber] = _User.ColumnNames.ActivationNumber;
					ht[LastLoginDate] = _User.ColumnNames.LastLoginDate;
					ht[CreateDate] = _User.ColumnNames.CreateDate;
					ht[ModifyDate] = _User.ColumnNames.ModifyDate;
					ht[IsWantedSMS] = _User.ColumnNames.IsWantedSMS;
					ht[IsEmailConfirmed] = _User.ColumnNames.IsEmailConfirmed;
					ht[IsCVActive] = _User.ColumnNames.IsCVActive;
					ht[IsCVConfirmed] = _User.ColumnNames.IsCVConfirmed;
					ht[IsActive] = _User.ColumnNames.IsActive;
					ht[IsDeleted] = _User.ColumnNames.IsDeleted;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string UserID = "s_UserID";
            public const string EmployeeTypeCode = "s_EmployeeTypeCode";
            public const string FirstName = "s_FirstName";
            public const string LastName = "s_LastName";
            public const string Email = "s_Email";
            public const string Password = "s_Password";
            public const string IdentityNo = "s_IdentityNo";
            public const string SecretQuestion = "s_SecretQuestion";
            public const string SecretAnswer = "s_SecretAnswer";
            public const string ActivationNumber = "s_ActivationNumber";
            public const string LastLoginDate = "s_LastLoginDate";
            public const string CreateDate = "s_CreateDate";
            public const string ModifyDate = "s_ModifyDate";
            public const string IsWantedSMS = "s_IsWantedSMS";
            public const string IsEmailConfirmed = "s_IsEmailConfirmed";
            public const string IsCVActive = "s_IsCVActive";
            public const string IsCVConfirmed = "s_IsCVConfirmed";
            public const string IsActive = "s_IsActive";
            public const string IsDeleted = "s_IsDeleted";

		}
		#endregion		
		
		#region Properties
	
		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual int EmployeeTypeCode
	    {
			get
	        {
				return base.Getint(ColumnNames.EmployeeTypeCode);
			}
			set
	        {
				base.Setint(ColumnNames.EmployeeTypeCode, value);
			}
		}

		public virtual string FirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual string LastName
	    {
			get
	        {
				return base.Getstring(ColumnNames.LastName);
			}
			set
	        {
				base.Setstring(ColumnNames.LastName, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}

		public virtual string Password
	    {
			get
	        {
				return base.Getstring(ColumnNames.Password);
			}
			set
	        {
				base.Setstring(ColumnNames.Password, value);
			}
		}

		public virtual string IdentityNo
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdentityNo);
			}
			set
	        {
				base.Setstring(ColumnNames.IdentityNo, value);
			}
		}

		public virtual string SecretQuestion
	    {
			get
	        {
				return base.Getstring(ColumnNames.SecretQuestion);
			}
			set
	        {
				base.Setstring(ColumnNames.SecretQuestion, value);
			}
		}

		public virtual string SecretAnswer
	    {
			get
	        {
				return base.Getstring(ColumnNames.SecretAnswer);
			}
			set
	        {
				base.Setstring(ColumnNames.SecretAnswer, value);
			}
		}

		public virtual string ActivationNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.ActivationNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.ActivationNumber, value);
			}
		}

		public virtual DateTime LastLoginDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastLoginDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastLoginDate, value);
			}
		}

		public virtual DateTime CreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreateDate, value);
			}
		}

		public virtual DateTime ModifyDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifyDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifyDate, value);
			}
		}

		public virtual bool IsWantedSMS
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsWantedSMS);
			}
			set
	        {
				base.Setbool(ColumnNames.IsWantedSMS, value);
			}
		}

		public virtual bool IsEmailConfirmed
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsEmailConfirmed);
			}
			set
	        {
				base.Setbool(ColumnNames.IsEmailConfirmed, value);
			}
		}

		public virtual bool IsCVActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsCVActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsCVActive, value);
			}
		}

		public virtual bool IsCVConfirmed
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsCVConfirmed);
			}
			set
	        {
				base.Setbool(ColumnNames.IsCVConfirmed, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}

		public virtual bool IsDeleted
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDeleted);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDeleted, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_EmployeeTypeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EmployeeTypeCode) ? string.Empty : base.GetintAsString(ColumnNames.EmployeeTypeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EmployeeTypeCode);
				else
					this.EmployeeTypeCode = base.SetintAsString(ColumnNames.EmployeeTypeCode, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_LastName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastName) ? string.Empty : base.GetstringAsString(ColumnNames.LastName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastName);
				else
					this.LastName = base.SetstringAsString(ColumnNames.LastName, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}

		public virtual string s_Password
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Password) ? string.Empty : base.GetstringAsString(ColumnNames.Password);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Password);
				else
					this.Password = base.SetstringAsString(ColumnNames.Password, value);
			}
		}

		public virtual string s_IdentityNo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdentityNo) ? string.Empty : base.GetstringAsString(ColumnNames.IdentityNo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdentityNo);
				else
					this.IdentityNo = base.SetstringAsString(ColumnNames.IdentityNo, value);
			}
		}

		public virtual string s_SecretQuestion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SecretQuestion) ? string.Empty : base.GetstringAsString(ColumnNames.SecretQuestion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SecretQuestion);
				else
					this.SecretQuestion = base.SetstringAsString(ColumnNames.SecretQuestion, value);
			}
		}

		public virtual string s_SecretAnswer
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SecretAnswer) ? string.Empty : base.GetstringAsString(ColumnNames.SecretAnswer);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SecretAnswer);
				else
					this.SecretAnswer = base.SetstringAsString(ColumnNames.SecretAnswer, value);
			}
		}

		public virtual string s_ActivationNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActivationNumber) ? string.Empty : base.GetstringAsString(ColumnNames.ActivationNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActivationNumber);
				else
					this.ActivationNumber = base.SetstringAsString(ColumnNames.ActivationNumber, value);
			}
		}

		public virtual string s_LastLoginDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastLoginDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastLoginDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastLoginDate);
				else
					this.LastLoginDate = base.SetDateTimeAsString(ColumnNames.LastLoginDate, value);
			}
		}

		public virtual string s_CreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreateDate);
				else
					this.CreateDate = base.SetDateTimeAsString(ColumnNames.CreateDate, value);
			}
		}

		public virtual string s_ModifyDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifyDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifyDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifyDate);
				else
					this.ModifyDate = base.SetDateTimeAsString(ColumnNames.ModifyDate, value);
			}
		}

		public virtual string s_IsWantedSMS
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsWantedSMS) ? string.Empty : base.GetboolAsString(ColumnNames.IsWantedSMS);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsWantedSMS);
				else
					this.IsWantedSMS = base.SetboolAsString(ColumnNames.IsWantedSMS, value);
			}
		}

		public virtual string s_IsEmailConfirmed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsEmailConfirmed) ? string.Empty : base.GetboolAsString(ColumnNames.IsEmailConfirmed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsEmailConfirmed);
				else
					this.IsEmailConfirmed = base.SetboolAsString(ColumnNames.IsEmailConfirmed, value);
			}
		}

		public virtual string s_IsCVActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsCVActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsCVActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsCVActive);
				else
					this.IsCVActive = base.SetboolAsString(ColumnNames.IsCVActive, value);
			}
		}

		public virtual string s_IsCVConfirmed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsCVConfirmed) ? string.Empty : base.GetboolAsString(ColumnNames.IsCVConfirmed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsCVConfirmed);
				else
					this.IsCVConfirmed = base.SetboolAsString(ColumnNames.IsCVConfirmed, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}

		public virtual string s_IsDeleted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDeleted) ? string.Empty : base.GetboolAsString(ColumnNames.IsDeleted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDeleted);
				else
					this.IsDeleted = base.SetboolAsString(ColumnNames.IsDeleted, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EmployeeTypeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EmployeeTypeCode, Parameters.EmployeeTypeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Password
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdentityNo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdentityNo, Parameters.IdentityNo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SecretQuestion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SecretQuestion, Parameters.SecretQuestion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SecretAnswer
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SecretAnswer, Parameters.SecretAnswer);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ActivationNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActivationNumber, Parameters.ActivationNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastLoginDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastLoginDate, Parameters.LastLoginDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifyDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsWantedSMS
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsWantedSMS, Parameters.IsWantedSMS);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsEmailConfirmed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsEmailConfirmed, Parameters.IsEmailConfirmed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsCVActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsCVActive, Parameters.IsCVActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsCVConfirmed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsCVConfirmed, Parameters.IsCVConfirmed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDeleted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter EmployeeTypeCode
		    {
				get
		        {
					if(_EmployeeTypeCode_W == null)
	        	    {
						_EmployeeTypeCode_W = TearOff.EmployeeTypeCode;
					}
					return _EmployeeTypeCode_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public WhereParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public WhereParameter IdentityNo
		    {
				get
		        {
					if(_IdentityNo_W == null)
	        	    {
						_IdentityNo_W = TearOff.IdentityNo;
					}
					return _IdentityNo_W;
				}
			}

			public WhereParameter SecretQuestion
		    {
				get
		        {
					if(_SecretQuestion_W == null)
	        	    {
						_SecretQuestion_W = TearOff.SecretQuestion;
					}
					return _SecretQuestion_W;
				}
			}

			public WhereParameter SecretAnswer
		    {
				get
		        {
					if(_SecretAnswer_W == null)
	        	    {
						_SecretAnswer_W = TearOff.SecretAnswer;
					}
					return _SecretAnswer_W;
				}
			}

			public WhereParameter ActivationNumber
		    {
				get
		        {
					if(_ActivationNumber_W == null)
	        	    {
						_ActivationNumber_W = TearOff.ActivationNumber;
					}
					return _ActivationNumber_W;
				}
			}

			public WhereParameter LastLoginDate
		    {
				get
		        {
					if(_LastLoginDate_W == null)
	        	    {
						_LastLoginDate_W = TearOff.LastLoginDate;
					}
					return _LastLoginDate_W;
				}
			}

			public WhereParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public WhereParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public WhereParameter IsWantedSMS
		    {
				get
		        {
					if(_IsWantedSMS_W == null)
	        	    {
						_IsWantedSMS_W = TearOff.IsWantedSMS;
					}
					return _IsWantedSMS_W;
				}
			}

			public WhereParameter IsEmailConfirmed
		    {
				get
		        {
					if(_IsEmailConfirmed_W == null)
	        	    {
						_IsEmailConfirmed_W = TearOff.IsEmailConfirmed;
					}
					return _IsEmailConfirmed_W;
				}
			}

			public WhereParameter IsCVActive
		    {
				get
		        {
					if(_IsCVActive_W == null)
	        	    {
						_IsCVActive_W = TearOff.IsCVActive;
					}
					return _IsCVActive_W;
				}
			}

			public WhereParameter IsCVConfirmed
		    {
				get
		        {
					if(_IsCVConfirmed_W == null)
	        	    {
						_IsCVConfirmed_W = TearOff.IsCVConfirmed;
					}
					return _IsCVConfirmed_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public WhereParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			private WhereParameter _UserID_W = null;
			private WhereParameter _EmployeeTypeCode_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _LastName_W = null;
			private WhereParameter _Email_W = null;
			private WhereParameter _Password_W = null;
			private WhereParameter _IdentityNo_W = null;
			private WhereParameter _SecretQuestion_W = null;
			private WhereParameter _SecretAnswer_W = null;
			private WhereParameter _ActivationNumber_W = null;
			private WhereParameter _LastLoginDate_W = null;
			private WhereParameter _CreateDate_W = null;
			private WhereParameter _ModifyDate_W = null;
			private WhereParameter _IsWantedSMS_W = null;
			private WhereParameter _IsEmailConfirmed_W = null;
			private WhereParameter _IsCVActive_W = null;
			private WhereParameter _IsCVConfirmed_W = null;
			private WhereParameter _IsActive_W = null;
			private WhereParameter _IsDeleted_W = null;

			public void WhereClauseReset()
			{
				_UserID_W = null;
				_EmployeeTypeCode_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_Email_W = null;
				_Password_W = null;
				_IdentityNo_W = null;
				_SecretQuestion_W = null;
				_SecretAnswer_W = null;
				_ActivationNumber_W = null;
				_LastLoginDate_W = null;
				_CreateDate_W = null;
				_ModifyDate_W = null;
				_IsWantedSMS_W = null;
				_IsEmailConfirmed_W = null;
				_IsCVActive_W = null;
				_IsCVConfirmed_W = null;
				_IsActive_W = null;
				_IsDeleted_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EmployeeTypeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmployeeTypeCode, Parameters.EmployeeTypeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Password
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdentityNo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdentityNo, Parameters.IdentityNo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SecretQuestion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SecretQuestion, Parameters.SecretQuestion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SecretAnswer
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SecretAnswer, Parameters.SecretAnswer);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ActivationNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActivationNumber, Parameters.ActivationNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastLoginDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastLoginDate, Parameters.LastLoginDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifyDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsWantedSMS
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsWantedSMS, Parameters.IsWantedSMS);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsEmailConfirmed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsEmailConfirmed, Parameters.IsEmailConfirmed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsCVActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsCVActive, Parameters.IsCVActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsCVConfirmed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsCVConfirmed, Parameters.IsCVConfirmed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDeleted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter EmployeeTypeCode
		    {
				get
		        {
					if(_EmployeeTypeCode_W == null)
	        	    {
						_EmployeeTypeCode_W = TearOff.EmployeeTypeCode;
					}
					return _EmployeeTypeCode_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			public AggregateParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public AggregateParameter IdentityNo
		    {
				get
		        {
					if(_IdentityNo_W == null)
	        	    {
						_IdentityNo_W = TearOff.IdentityNo;
					}
					return _IdentityNo_W;
				}
			}

			public AggregateParameter SecretQuestion
		    {
				get
		        {
					if(_SecretQuestion_W == null)
	        	    {
						_SecretQuestion_W = TearOff.SecretQuestion;
					}
					return _SecretQuestion_W;
				}
			}

			public AggregateParameter SecretAnswer
		    {
				get
		        {
					if(_SecretAnswer_W == null)
	        	    {
						_SecretAnswer_W = TearOff.SecretAnswer;
					}
					return _SecretAnswer_W;
				}
			}

			public AggregateParameter ActivationNumber
		    {
				get
		        {
					if(_ActivationNumber_W == null)
	        	    {
						_ActivationNumber_W = TearOff.ActivationNumber;
					}
					return _ActivationNumber_W;
				}
			}

			public AggregateParameter LastLoginDate
		    {
				get
		        {
					if(_LastLoginDate_W == null)
	        	    {
						_LastLoginDate_W = TearOff.LastLoginDate;
					}
					return _LastLoginDate_W;
				}
			}

			public AggregateParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public AggregateParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public AggregateParameter IsWantedSMS
		    {
				get
		        {
					if(_IsWantedSMS_W == null)
	        	    {
						_IsWantedSMS_W = TearOff.IsWantedSMS;
					}
					return _IsWantedSMS_W;
				}
			}

			public AggregateParameter IsEmailConfirmed
		    {
				get
		        {
					if(_IsEmailConfirmed_W == null)
	        	    {
						_IsEmailConfirmed_W = TearOff.IsEmailConfirmed;
					}
					return _IsEmailConfirmed_W;
				}
			}

			public AggregateParameter IsCVActive
		    {
				get
		        {
					if(_IsCVActive_W == null)
	        	    {
						_IsCVActive_W = TearOff.IsCVActive;
					}
					return _IsCVActive_W;
				}
			}

			public AggregateParameter IsCVConfirmed
		    {
				get
		        {
					if(_IsCVConfirmed_W == null)
	        	    {
						_IsCVConfirmed_W = TearOff.IsCVConfirmed;
					}
					return _IsCVConfirmed_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public AggregateParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			private AggregateParameter _UserID_W = null;
			private AggregateParameter _EmployeeTypeCode_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _LastName_W = null;
			private AggregateParameter _Email_W = null;
			private AggregateParameter _Password_W = null;
			private AggregateParameter _IdentityNo_W = null;
			private AggregateParameter _SecretQuestion_W = null;
			private AggregateParameter _SecretAnswer_W = null;
			private AggregateParameter _ActivationNumber_W = null;
			private AggregateParameter _LastLoginDate_W = null;
			private AggregateParameter _CreateDate_W = null;
			private AggregateParameter _ModifyDate_W = null;
			private AggregateParameter _IsWantedSMS_W = null;
			private AggregateParameter _IsEmailConfirmed_W = null;
			private AggregateParameter _IsCVActive_W = null;
			private AggregateParameter _IsCVConfirmed_W = null;
			private AggregateParameter _IsActive_W = null;
			private AggregateParameter _IsDeleted_W = null;

			public void AggregateClauseReset()
			{
				_UserID_W = null;
				_EmployeeTypeCode_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_Email_W = null;
				_Password_W = null;
				_IdentityNo_W = null;
				_SecretQuestion_W = null;
				_SecretAnswer_W = null;
				_ActivationNumber_W = null;
				_LastLoginDate_W = null;
				_CreateDate_W = null;
				_ModifyDate_W = null;
				_IsWantedSMS_W = null;
				_IsEmailConfirmed_W = null;
				_IsCVActive_W = null;
				_IsCVConfirmed_W = null;
				_IsActive_W = null;
				_IsDeleted_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.UserID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EmployeeTypeCode);
			p.SourceColumn = ColumnNames.EmployeeTypeCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastName);
			p.SourceColumn = ColumnNames.LastName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Password);
			p.SourceColumn = ColumnNames.Password;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdentityNo);
			p.SourceColumn = ColumnNames.IdentityNo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SecretQuestion);
			p.SourceColumn = ColumnNames.SecretQuestion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SecretAnswer);
			p.SourceColumn = ColumnNames.SecretAnswer;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActivationNumber);
			p.SourceColumn = ColumnNames.ActivationNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastLoginDate);
			p.SourceColumn = ColumnNames.LastLoginDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreateDate);
			p.SourceColumn = ColumnNames.CreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifyDate);
			p.SourceColumn = ColumnNames.ModifyDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsWantedSMS);
			p.SourceColumn = ColumnNames.IsWantedSMS;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsEmailConfirmed);
			p.SourceColumn = ColumnNames.IsEmailConfirmed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsCVActive);
			p.SourceColumn = ColumnNames.IsCVActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsCVConfirmed);
			p.SourceColumn = ColumnNames.IsCVConfirmed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsDeleted);
			p.SourceColumn = ColumnNames.IsDeleted;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
