
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _Invoices : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _Invoices()
		{
			this.QuerySource = "Invoices";
			this.MappingName = "Invoices";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InvoicesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int InvoiceID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.InvoiceID, InvoiceID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InvoicesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter InvoiceID
			{
				get
				{
					return new SqlParameter("@InvoiceID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyID
			{
				get
				{
					return new SqlParameter("@CompanyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InvoiceNumber
			{
				get
				{
					return new SqlParameter("@InvoiceNumber", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter InvoiceDate
			{
				get
				{
					return new SqlParameter("@InvoiceDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CreditOrderID
			{
				get
				{
					return new SqlParameter("@CreditOrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyName
			{
				get
				{
					return new SqlParameter("@CompanyName", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter Country
			{
				get
				{
					return new SqlParameter("@Country", SqlDbType.NVarChar, 24);
				}
			}
			
			public static SqlParameter City
			{
				get
				{
					return new SqlParameter("@City", SqlDbType.NVarChar, 24);
				}
			}
			
			public static SqlParameter Town
			{
				get
				{
					return new SqlParameter("@Town", SqlDbType.NVarChar, 24);
				}
			}
			
			public static SqlParameter StreetAddress
			{
				get
				{
					return new SqlParameter("@StreetAddress", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter PostalCode
			{
				get
				{
					return new SqlParameter("@PostalCode", SqlDbType.VarChar, 12);
				}
			}
			
			public static SqlParameter TaxNumber
			{
				get
				{
					return new SqlParameter("@TaxNumber", SqlDbType.VarChar, 16);
				}
			}
			
			public static SqlParameter TaxOffice
			{
				get
				{
					return new SqlParameter("@TaxOffice", SqlDbType.NVarChar, 24);
				}
			}
			
			public static SqlParameter TaxRatio
			{
				get
				{
					return new SqlParameter("@TaxRatio", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter TotalAmount
			{
				get
				{
					return new SqlParameter("@TotalAmount", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter CreateDate
			{
				get
				{
					return new SqlParameter("@CreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string InvoiceID = "InvoiceID";
            public const string CompanyID = "CompanyID";
            public const string InvoiceNumber = "InvoiceNumber";
            public const string InvoiceDate = "InvoiceDate";
            public const string CreditOrderID = "CreditOrderID";
            public const string CompanyName = "CompanyName";
            public const string Country = "Country";
            public const string City = "City";
            public const string Town = "Town";
            public const string StreetAddress = "StreetAddress";
            public const string PostalCode = "PostalCode";
            public const string TaxNumber = "TaxNumber";
            public const string TaxOffice = "TaxOffice";
            public const string TaxRatio = "TaxRatio";
            public const string TotalAmount = "TotalAmount";
            public const string CreateDate = "CreateDate";
            public const string CreatedBy = "CreatedBy";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InvoiceID] = _Invoices.PropertyNames.InvoiceID;
					ht[CompanyID] = _Invoices.PropertyNames.CompanyID;
					ht[InvoiceNumber] = _Invoices.PropertyNames.InvoiceNumber;
					ht[InvoiceDate] = _Invoices.PropertyNames.InvoiceDate;
					ht[CreditOrderID] = _Invoices.PropertyNames.CreditOrderID;
					ht[CompanyName] = _Invoices.PropertyNames.CompanyName;
					ht[Country] = _Invoices.PropertyNames.Country;
					ht[City] = _Invoices.PropertyNames.City;
					ht[Town] = _Invoices.PropertyNames.Town;
					ht[StreetAddress] = _Invoices.PropertyNames.StreetAddress;
					ht[PostalCode] = _Invoices.PropertyNames.PostalCode;
					ht[TaxNumber] = _Invoices.PropertyNames.TaxNumber;
					ht[TaxOffice] = _Invoices.PropertyNames.TaxOffice;
					ht[TaxRatio] = _Invoices.PropertyNames.TaxRatio;
					ht[TotalAmount] = _Invoices.PropertyNames.TotalAmount;
					ht[CreateDate] = _Invoices.PropertyNames.CreateDate;
					ht[CreatedBy] = _Invoices.PropertyNames.CreatedBy;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string InvoiceID = "InvoiceID";
            public const string CompanyID = "CompanyID";
            public const string InvoiceNumber = "InvoiceNumber";
            public const string InvoiceDate = "InvoiceDate";
            public const string CreditOrderID = "CreditOrderID";
            public const string CompanyName = "CompanyName";
            public const string Country = "Country";
            public const string City = "City";
            public const string Town = "Town";
            public const string StreetAddress = "StreetAddress";
            public const string PostalCode = "PostalCode";
            public const string TaxNumber = "TaxNumber";
            public const string TaxOffice = "TaxOffice";
            public const string TaxRatio = "TaxRatio";
            public const string TotalAmount = "TotalAmount";
            public const string CreateDate = "CreateDate";
            public const string CreatedBy = "CreatedBy";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InvoiceID] = _Invoices.ColumnNames.InvoiceID;
					ht[CompanyID] = _Invoices.ColumnNames.CompanyID;
					ht[InvoiceNumber] = _Invoices.ColumnNames.InvoiceNumber;
					ht[InvoiceDate] = _Invoices.ColumnNames.InvoiceDate;
					ht[CreditOrderID] = _Invoices.ColumnNames.CreditOrderID;
					ht[CompanyName] = _Invoices.ColumnNames.CompanyName;
					ht[Country] = _Invoices.ColumnNames.Country;
					ht[City] = _Invoices.ColumnNames.City;
					ht[Town] = _Invoices.ColumnNames.Town;
					ht[StreetAddress] = _Invoices.ColumnNames.StreetAddress;
					ht[PostalCode] = _Invoices.ColumnNames.PostalCode;
					ht[TaxNumber] = _Invoices.ColumnNames.TaxNumber;
					ht[TaxOffice] = _Invoices.ColumnNames.TaxOffice;
					ht[TaxRatio] = _Invoices.ColumnNames.TaxRatio;
					ht[TotalAmount] = _Invoices.ColumnNames.TotalAmount;
					ht[CreateDate] = _Invoices.ColumnNames.CreateDate;
					ht[CreatedBy] = _Invoices.ColumnNames.CreatedBy;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string InvoiceID = "s_InvoiceID";
            public const string CompanyID = "s_CompanyID";
            public const string InvoiceNumber = "s_InvoiceNumber";
            public const string InvoiceDate = "s_InvoiceDate";
            public const string CreditOrderID = "s_CreditOrderID";
            public const string CompanyName = "s_CompanyName";
            public const string Country = "s_Country";
            public const string City = "s_City";
            public const string Town = "s_Town";
            public const string StreetAddress = "s_StreetAddress";
            public const string PostalCode = "s_PostalCode";
            public const string TaxNumber = "s_TaxNumber";
            public const string TaxOffice = "s_TaxOffice";
            public const string TaxRatio = "s_TaxRatio";
            public const string TotalAmount = "s_TotalAmount";
            public const string CreateDate = "s_CreateDate";
            public const string CreatedBy = "s_CreatedBy";

		}
		#endregion		
		
		#region Properties
	
		public virtual int InvoiceID
	    {
			get
	        {
				return base.Getint(ColumnNames.InvoiceID);
			}
			set
	        {
				base.Setint(ColumnNames.InvoiceID, value);
			}
		}

		public virtual int CompanyID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyID, value);
			}
		}

		public virtual string InvoiceNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.InvoiceNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.InvoiceNumber, value);
			}
		}

		public virtual DateTime InvoiceDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.InvoiceDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.InvoiceDate, value);
			}
		}

		public virtual int CreditOrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.CreditOrderID);
			}
			set
	        {
				base.Setint(ColumnNames.CreditOrderID, value);
			}
		}

		public virtual string CompanyName
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompanyName);
			}
			set
	        {
				base.Setstring(ColumnNames.CompanyName, value);
			}
		}

		public virtual string Country
	    {
			get
	        {
				return base.Getstring(ColumnNames.Country);
			}
			set
	        {
				base.Setstring(ColumnNames.Country, value);
			}
		}

		public virtual string City
	    {
			get
	        {
				return base.Getstring(ColumnNames.City);
			}
			set
	        {
				base.Setstring(ColumnNames.City, value);
			}
		}

		public virtual string Town
	    {
			get
	        {
				return base.Getstring(ColumnNames.Town);
			}
			set
	        {
				base.Setstring(ColumnNames.Town, value);
			}
		}

		public virtual string StreetAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.StreetAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.StreetAddress, value);
			}
		}

		public virtual string PostalCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.PostalCode);
			}
			set
	        {
				base.Setstring(ColumnNames.PostalCode, value);
			}
		}

		public virtual string TaxNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.TaxNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.TaxNumber, value);
			}
		}

		public virtual string TaxOffice
	    {
			get
	        {
				return base.Getstring(ColumnNames.TaxOffice);
			}
			set
	        {
				base.Setstring(ColumnNames.TaxOffice, value);
			}
		}

		public virtual double TaxRatio
	    {
			get
	        {
				return base.Getdouble(ColumnNames.TaxRatio);
			}
			set
	        {
				base.Setdouble(ColumnNames.TaxRatio, value);
			}
		}

		public virtual double TotalAmount
	    {
			get
	        {
				return base.Getdouble(ColumnNames.TotalAmount);
			}
			set
	        {
				base.Setdouble(ColumnNames.TotalAmount, value);
			}
		}

		public virtual DateTime CreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreateDate, value);
			}
		}

		public virtual int CreatedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.CreatedBy);
			}
			set
	        {
				base.Setint(ColumnNames.CreatedBy, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_InvoiceID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InvoiceID) ? string.Empty : base.GetintAsString(ColumnNames.InvoiceID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InvoiceID);
				else
					this.InvoiceID = base.SetintAsString(ColumnNames.InvoiceID, value);
			}
		}

		public virtual string s_CompanyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyID);
				else
					this.CompanyID = base.SetintAsString(ColumnNames.CompanyID, value);
			}
		}

		public virtual string s_InvoiceNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InvoiceNumber) ? string.Empty : base.GetstringAsString(ColumnNames.InvoiceNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InvoiceNumber);
				else
					this.InvoiceNumber = base.SetstringAsString(ColumnNames.InvoiceNumber, value);
			}
		}

		public virtual string s_InvoiceDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InvoiceDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.InvoiceDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InvoiceDate);
				else
					this.InvoiceDate = base.SetDateTimeAsString(ColumnNames.InvoiceDate, value);
			}
		}

		public virtual string s_CreditOrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreditOrderID) ? string.Empty : base.GetintAsString(ColumnNames.CreditOrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreditOrderID);
				else
					this.CreditOrderID = base.SetintAsString(ColumnNames.CreditOrderID, value);
			}
		}

		public virtual string s_CompanyName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyName) ? string.Empty : base.GetstringAsString(ColumnNames.CompanyName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyName);
				else
					this.CompanyName = base.SetstringAsString(ColumnNames.CompanyName, value);
			}
		}

		public virtual string s_Country
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Country) ? string.Empty : base.GetstringAsString(ColumnNames.Country);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Country);
				else
					this.Country = base.SetstringAsString(ColumnNames.Country, value);
			}
		}

		public virtual string s_City
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.City) ? string.Empty : base.GetstringAsString(ColumnNames.City);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.City);
				else
					this.City = base.SetstringAsString(ColumnNames.City, value);
			}
		}

		public virtual string s_Town
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Town) ? string.Empty : base.GetstringAsString(ColumnNames.Town);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Town);
				else
					this.Town = base.SetstringAsString(ColumnNames.Town, value);
			}
		}

		public virtual string s_StreetAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StreetAddress) ? string.Empty : base.GetstringAsString(ColumnNames.StreetAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StreetAddress);
				else
					this.StreetAddress = base.SetstringAsString(ColumnNames.StreetAddress, value);
			}
		}

		public virtual string s_PostalCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PostalCode) ? string.Empty : base.GetstringAsString(ColumnNames.PostalCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PostalCode);
				else
					this.PostalCode = base.SetstringAsString(ColumnNames.PostalCode, value);
			}
		}

		public virtual string s_TaxNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TaxNumber) ? string.Empty : base.GetstringAsString(ColumnNames.TaxNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TaxNumber);
				else
					this.TaxNumber = base.SetstringAsString(ColumnNames.TaxNumber, value);
			}
		}

		public virtual string s_TaxOffice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TaxOffice) ? string.Empty : base.GetstringAsString(ColumnNames.TaxOffice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TaxOffice);
				else
					this.TaxOffice = base.SetstringAsString(ColumnNames.TaxOffice, value);
			}
		}

		public virtual string s_TaxRatio
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TaxRatio) ? string.Empty : base.GetdoubleAsString(ColumnNames.TaxRatio);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TaxRatio);
				else
					this.TaxRatio = base.SetdoubleAsString(ColumnNames.TaxRatio, value);
			}
		}

		public virtual string s_TotalAmount
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TotalAmount) ? string.Empty : base.GetdoubleAsString(ColumnNames.TotalAmount);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TotalAmount);
				else
					this.TotalAmount = base.SetdoubleAsString(ColumnNames.TotalAmount, value);
			}
		}

		public virtual string s_CreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreateDate);
				else
					this.CreateDate = base.SetDateTimeAsString(ColumnNames.CreateDate, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetintAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetintAsString(ColumnNames.CreatedBy, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter InvoiceID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InvoiceID, Parameters.InvoiceID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InvoiceNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InvoiceNumber, Parameters.InvoiceNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InvoiceDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InvoiceDate, Parameters.InvoiceDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreditOrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreditOrderID, Parameters.CreditOrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyName, Parameters.CompanyName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Country
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Country, Parameters.Country);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter City
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.City, Parameters.City);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Town
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Town, Parameters.Town);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StreetAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StreetAddress, Parameters.StreetAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PostalCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PostalCode, Parameters.PostalCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TaxNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TaxNumber, Parameters.TaxNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TaxOffice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TaxOffice, Parameters.TaxOffice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TaxRatio
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TaxRatio, Parameters.TaxRatio);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TotalAmount
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TotalAmount, Parameters.TotalAmount);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter InvoiceID
		    {
				get
		        {
					if(_InvoiceID_W == null)
	        	    {
						_InvoiceID_W = TearOff.InvoiceID;
					}
					return _InvoiceID_W;
				}
			}

			public WhereParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public WhereParameter InvoiceNumber
		    {
				get
		        {
					if(_InvoiceNumber_W == null)
	        	    {
						_InvoiceNumber_W = TearOff.InvoiceNumber;
					}
					return _InvoiceNumber_W;
				}
			}

			public WhereParameter InvoiceDate
		    {
				get
		        {
					if(_InvoiceDate_W == null)
	        	    {
						_InvoiceDate_W = TearOff.InvoiceDate;
					}
					return _InvoiceDate_W;
				}
			}

			public WhereParameter CreditOrderID
		    {
				get
		        {
					if(_CreditOrderID_W == null)
	        	    {
						_CreditOrderID_W = TearOff.CreditOrderID;
					}
					return _CreditOrderID_W;
				}
			}

			public WhereParameter CompanyName
		    {
				get
		        {
					if(_CompanyName_W == null)
	        	    {
						_CompanyName_W = TearOff.CompanyName;
					}
					return _CompanyName_W;
				}
			}

			public WhereParameter Country
		    {
				get
		        {
					if(_Country_W == null)
	        	    {
						_Country_W = TearOff.Country;
					}
					return _Country_W;
				}
			}

			public WhereParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public WhereParameter Town
		    {
				get
		        {
					if(_Town_W == null)
	        	    {
						_Town_W = TearOff.Town;
					}
					return _Town_W;
				}
			}

			public WhereParameter StreetAddress
		    {
				get
		        {
					if(_StreetAddress_W == null)
	        	    {
						_StreetAddress_W = TearOff.StreetAddress;
					}
					return _StreetAddress_W;
				}
			}

			public WhereParameter PostalCode
		    {
				get
		        {
					if(_PostalCode_W == null)
	        	    {
						_PostalCode_W = TearOff.PostalCode;
					}
					return _PostalCode_W;
				}
			}

			public WhereParameter TaxNumber
		    {
				get
		        {
					if(_TaxNumber_W == null)
	        	    {
						_TaxNumber_W = TearOff.TaxNumber;
					}
					return _TaxNumber_W;
				}
			}

			public WhereParameter TaxOffice
		    {
				get
		        {
					if(_TaxOffice_W == null)
	        	    {
						_TaxOffice_W = TearOff.TaxOffice;
					}
					return _TaxOffice_W;
				}
			}

			public WhereParameter TaxRatio
		    {
				get
		        {
					if(_TaxRatio_W == null)
	        	    {
						_TaxRatio_W = TearOff.TaxRatio;
					}
					return _TaxRatio_W;
				}
			}

			public WhereParameter TotalAmount
		    {
				get
		        {
					if(_TotalAmount_W == null)
	        	    {
						_TotalAmount_W = TearOff.TotalAmount;
					}
					return _TotalAmount_W;
				}
			}

			public WhereParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			private WhereParameter _InvoiceID_W = null;
			private WhereParameter _CompanyID_W = null;
			private WhereParameter _InvoiceNumber_W = null;
			private WhereParameter _InvoiceDate_W = null;
			private WhereParameter _CreditOrderID_W = null;
			private WhereParameter _CompanyName_W = null;
			private WhereParameter _Country_W = null;
			private WhereParameter _City_W = null;
			private WhereParameter _Town_W = null;
			private WhereParameter _StreetAddress_W = null;
			private WhereParameter _PostalCode_W = null;
			private WhereParameter _TaxNumber_W = null;
			private WhereParameter _TaxOffice_W = null;
			private WhereParameter _TaxRatio_W = null;
			private WhereParameter _TotalAmount_W = null;
			private WhereParameter _CreateDate_W = null;
			private WhereParameter _CreatedBy_W = null;

			public void WhereClauseReset()
			{
				_InvoiceID_W = null;
				_CompanyID_W = null;
				_InvoiceNumber_W = null;
				_InvoiceDate_W = null;
				_CreditOrderID_W = null;
				_CompanyName_W = null;
				_Country_W = null;
				_City_W = null;
				_Town_W = null;
				_StreetAddress_W = null;
				_PostalCode_W = null;
				_TaxNumber_W = null;
				_TaxOffice_W = null;
				_TaxRatio_W = null;
				_TotalAmount_W = null;
				_CreateDate_W = null;
				_CreatedBy_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter InvoiceID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InvoiceID, Parameters.InvoiceID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InvoiceNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InvoiceNumber, Parameters.InvoiceNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InvoiceDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InvoiceDate, Parameters.InvoiceDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreditOrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreditOrderID, Parameters.CreditOrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyName, Parameters.CompanyName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Country
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Country, Parameters.Country);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter City
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.City, Parameters.City);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Town
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Town, Parameters.Town);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StreetAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StreetAddress, Parameters.StreetAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PostalCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PostalCode, Parameters.PostalCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TaxNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TaxNumber, Parameters.TaxNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TaxOffice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TaxOffice, Parameters.TaxOffice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TaxRatio
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TaxRatio, Parameters.TaxRatio);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TotalAmount
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalAmount, Parameters.TotalAmount);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter InvoiceID
		    {
				get
		        {
					if(_InvoiceID_W == null)
	        	    {
						_InvoiceID_W = TearOff.InvoiceID;
					}
					return _InvoiceID_W;
				}
			}

			public AggregateParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public AggregateParameter InvoiceNumber
		    {
				get
		        {
					if(_InvoiceNumber_W == null)
	        	    {
						_InvoiceNumber_W = TearOff.InvoiceNumber;
					}
					return _InvoiceNumber_W;
				}
			}

			public AggregateParameter InvoiceDate
		    {
				get
		        {
					if(_InvoiceDate_W == null)
	        	    {
						_InvoiceDate_W = TearOff.InvoiceDate;
					}
					return _InvoiceDate_W;
				}
			}

			public AggregateParameter CreditOrderID
		    {
				get
		        {
					if(_CreditOrderID_W == null)
	        	    {
						_CreditOrderID_W = TearOff.CreditOrderID;
					}
					return _CreditOrderID_W;
				}
			}

			public AggregateParameter CompanyName
		    {
				get
		        {
					if(_CompanyName_W == null)
	        	    {
						_CompanyName_W = TearOff.CompanyName;
					}
					return _CompanyName_W;
				}
			}

			public AggregateParameter Country
		    {
				get
		        {
					if(_Country_W == null)
	        	    {
						_Country_W = TearOff.Country;
					}
					return _Country_W;
				}
			}

			public AggregateParameter City
		    {
				get
		        {
					if(_City_W == null)
	        	    {
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public AggregateParameter Town
		    {
				get
		        {
					if(_Town_W == null)
	        	    {
						_Town_W = TearOff.Town;
					}
					return _Town_W;
				}
			}

			public AggregateParameter StreetAddress
		    {
				get
		        {
					if(_StreetAddress_W == null)
	        	    {
						_StreetAddress_W = TearOff.StreetAddress;
					}
					return _StreetAddress_W;
				}
			}

			public AggregateParameter PostalCode
		    {
				get
		        {
					if(_PostalCode_W == null)
	        	    {
						_PostalCode_W = TearOff.PostalCode;
					}
					return _PostalCode_W;
				}
			}

			public AggregateParameter TaxNumber
		    {
				get
		        {
					if(_TaxNumber_W == null)
	        	    {
						_TaxNumber_W = TearOff.TaxNumber;
					}
					return _TaxNumber_W;
				}
			}

			public AggregateParameter TaxOffice
		    {
				get
		        {
					if(_TaxOffice_W == null)
	        	    {
						_TaxOffice_W = TearOff.TaxOffice;
					}
					return _TaxOffice_W;
				}
			}

			public AggregateParameter TaxRatio
		    {
				get
		        {
					if(_TaxRatio_W == null)
	        	    {
						_TaxRatio_W = TearOff.TaxRatio;
					}
					return _TaxRatio_W;
				}
			}

			public AggregateParameter TotalAmount
		    {
				get
		        {
					if(_TotalAmount_W == null)
	        	    {
						_TotalAmount_W = TearOff.TotalAmount;
					}
					return _TotalAmount_W;
				}
			}

			public AggregateParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			private AggregateParameter _InvoiceID_W = null;
			private AggregateParameter _CompanyID_W = null;
			private AggregateParameter _InvoiceNumber_W = null;
			private AggregateParameter _InvoiceDate_W = null;
			private AggregateParameter _CreditOrderID_W = null;
			private AggregateParameter _CompanyName_W = null;
			private AggregateParameter _Country_W = null;
			private AggregateParameter _City_W = null;
			private AggregateParameter _Town_W = null;
			private AggregateParameter _StreetAddress_W = null;
			private AggregateParameter _PostalCode_W = null;
			private AggregateParameter _TaxNumber_W = null;
			private AggregateParameter _TaxOffice_W = null;
			private AggregateParameter _TaxRatio_W = null;
			private AggregateParameter _TotalAmount_W = null;
			private AggregateParameter _CreateDate_W = null;
			private AggregateParameter _CreatedBy_W = null;

			public void AggregateClauseReset()
			{
				_InvoiceID_W = null;
				_CompanyID_W = null;
				_InvoiceNumber_W = null;
				_InvoiceDate_W = null;
				_CreditOrderID_W = null;
				_CompanyName_W = null;
				_Country_W = null;
				_City_W = null;
				_Town_W = null;
				_StreetAddress_W = null;
				_PostalCode_W = null;
				_TaxNumber_W = null;
				_TaxOffice_W = null;
				_TaxRatio_W = null;
				_TotalAmount_W = null;
				_CreateDate_W = null;
				_CreatedBy_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InvoicesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.InvoiceID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InvoicesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InvoicesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.InvoiceID);
			p.SourceColumn = ColumnNames.InvoiceID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.InvoiceID);
			p.SourceColumn = ColumnNames.InvoiceID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyID);
			p.SourceColumn = ColumnNames.CompanyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InvoiceNumber);
			p.SourceColumn = ColumnNames.InvoiceNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InvoiceDate);
			p.SourceColumn = ColumnNames.InvoiceDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreditOrderID);
			p.SourceColumn = ColumnNames.CreditOrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyName);
			p.SourceColumn = ColumnNames.CompanyName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Country);
			p.SourceColumn = ColumnNames.Country;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.City);
			p.SourceColumn = ColumnNames.City;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Town);
			p.SourceColumn = ColumnNames.Town;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StreetAddress);
			p.SourceColumn = ColumnNames.StreetAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PostalCode);
			p.SourceColumn = ColumnNames.PostalCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TaxNumber);
			p.SourceColumn = ColumnNames.TaxNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TaxOffice);
			p.SourceColumn = ColumnNames.TaxOffice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TaxRatio);
			p.SourceColumn = ColumnNames.TaxRatio;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TotalAmount);
			p.SourceColumn = ColumnNames.TotalAmount;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreateDate);
			p.SourceColumn = ColumnNames.CreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
