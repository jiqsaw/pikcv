
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _TestGroups : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _TestGroups()
		{
			this.QuerySource = "TestGroups";
			this.MappingName = "TestGroups";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TestGroupsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int TestGroupID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.TestGroupID, TestGroupID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TestGroupsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TestGroupID
			{
				get
				{
					return new SqlParameter("@TestGroupID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TestTypeCode
			{
				get
				{
					return new SqlParameter("@TestTypeCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter EmployeeTypeCode
			{
				get
				{
					return new SqlParameter("@EmployeeTypeCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Multiplier
			{
				get
				{
					return new SqlParameter("@Multiplier", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TestGroupID = "TestGroupID";
            public const string TestTypeCode = "TestTypeCode";
            public const string EmployeeTypeCode = "EmployeeTypeCode";
            public const string Multiplier = "Multiplier";
            public const string IsActive = "isActive";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TestGroupID] = _TestGroups.PropertyNames.TestGroupID;
					ht[TestTypeCode] = _TestGroups.PropertyNames.TestTypeCode;
					ht[EmployeeTypeCode] = _TestGroups.PropertyNames.EmployeeTypeCode;
					ht[Multiplier] = _TestGroups.PropertyNames.Multiplier;
					ht[IsActive] = _TestGroups.PropertyNames.IsActive;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TestGroupID = "TestGroupID";
            public const string TestTypeCode = "TestTypeCode";
            public const string EmployeeTypeCode = "EmployeeTypeCode";
            public const string Multiplier = "Multiplier";
            public const string IsActive = "IsActive";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TestGroupID] = _TestGroups.ColumnNames.TestGroupID;
					ht[TestTypeCode] = _TestGroups.ColumnNames.TestTypeCode;
					ht[EmployeeTypeCode] = _TestGroups.ColumnNames.EmployeeTypeCode;
					ht[Multiplier] = _TestGroups.ColumnNames.Multiplier;
					ht[IsActive] = _TestGroups.ColumnNames.IsActive;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TestGroupID = "s_TestGroupID";
            public const string TestTypeCode = "s_TestTypeCode";
            public const string EmployeeTypeCode = "s_EmployeeTypeCode";
            public const string Multiplier = "s_Multiplier";
            public const string IsActive = "s_IsActive";

		}
		#endregion		
		
		#region Properties
	
		public virtual int TestGroupID
	    {
			get
	        {
				return base.Getint(ColumnNames.TestGroupID);
			}
			set
	        {
				base.Setint(ColumnNames.TestGroupID, value);
			}
		}

		public virtual int TestTypeCode
	    {
			get
	        {
				return base.Getint(ColumnNames.TestTypeCode);
			}
			set
	        {
				base.Setint(ColumnNames.TestTypeCode, value);
			}
		}

		public virtual int EmployeeTypeCode
	    {
			get
	        {
				return base.Getint(ColumnNames.EmployeeTypeCode);
			}
			set
	        {
				base.Setint(ColumnNames.EmployeeTypeCode, value);
			}
		}

		public virtual double Multiplier
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Multiplier);
			}
			set
	        {
				base.Setdouble(ColumnNames.Multiplier, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TestGroupID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TestGroupID) ? string.Empty : base.GetintAsString(ColumnNames.TestGroupID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TestGroupID);
				else
					this.TestGroupID = base.SetintAsString(ColumnNames.TestGroupID, value);
			}
		}

		public virtual string s_TestTypeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TestTypeCode) ? string.Empty : base.GetintAsString(ColumnNames.TestTypeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TestTypeCode);
				else
					this.TestTypeCode = base.SetintAsString(ColumnNames.TestTypeCode, value);
			}
		}

		public virtual string s_EmployeeTypeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EmployeeTypeCode) ? string.Empty : base.GetintAsString(ColumnNames.EmployeeTypeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EmployeeTypeCode);
				else
					this.EmployeeTypeCode = base.SetintAsString(ColumnNames.EmployeeTypeCode, value);
			}
		}

		public virtual string s_Multiplier
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Multiplier) ? string.Empty : base.GetdoubleAsString(ColumnNames.Multiplier);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Multiplier);
				else
					this.Multiplier = base.SetdoubleAsString(ColumnNames.Multiplier, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TestGroupID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TestGroupID, Parameters.TestGroupID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TestTypeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TestTypeCode, Parameters.TestTypeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EmployeeTypeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EmployeeTypeCode, Parameters.EmployeeTypeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Multiplier
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Multiplier, Parameters.Multiplier);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TestGroupID
		    {
				get
		        {
					if(_TestGroupID_W == null)
	        	    {
						_TestGroupID_W = TearOff.TestGroupID;
					}
					return _TestGroupID_W;
				}
			}

			public WhereParameter TestTypeCode
		    {
				get
		        {
					if(_TestTypeCode_W == null)
	        	    {
						_TestTypeCode_W = TearOff.TestTypeCode;
					}
					return _TestTypeCode_W;
				}
			}

			public WhereParameter EmployeeTypeCode
		    {
				get
		        {
					if(_EmployeeTypeCode_W == null)
	        	    {
						_EmployeeTypeCode_W = TearOff.EmployeeTypeCode;
					}
					return _EmployeeTypeCode_W;
				}
			}

			public WhereParameter Multiplier
		    {
				get
		        {
					if(_Multiplier_W == null)
	        	    {
						_Multiplier_W = TearOff.Multiplier;
					}
					return _Multiplier_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			private WhereParameter _TestGroupID_W = null;
			private WhereParameter _TestTypeCode_W = null;
			private WhereParameter _EmployeeTypeCode_W = null;
			private WhereParameter _Multiplier_W = null;
			private WhereParameter _IsActive_W = null;

			public void WhereClauseReset()
			{
				_TestGroupID_W = null;
				_TestTypeCode_W = null;
				_EmployeeTypeCode_W = null;
				_Multiplier_W = null;
				_IsActive_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TestGroupID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TestGroupID, Parameters.TestGroupID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TestTypeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TestTypeCode, Parameters.TestTypeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EmployeeTypeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmployeeTypeCode, Parameters.EmployeeTypeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Multiplier
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Multiplier, Parameters.Multiplier);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TestGroupID
		    {
				get
		        {
					if(_TestGroupID_W == null)
	        	    {
						_TestGroupID_W = TearOff.TestGroupID;
					}
					return _TestGroupID_W;
				}
			}

			public AggregateParameter TestTypeCode
		    {
				get
		        {
					if(_TestTypeCode_W == null)
	        	    {
						_TestTypeCode_W = TearOff.TestTypeCode;
					}
					return _TestTypeCode_W;
				}
			}

			public AggregateParameter EmployeeTypeCode
		    {
				get
		        {
					if(_EmployeeTypeCode_W == null)
	        	    {
						_EmployeeTypeCode_W = TearOff.EmployeeTypeCode;
					}
					return _EmployeeTypeCode_W;
				}
			}

			public AggregateParameter Multiplier
		    {
				get
		        {
					if(_Multiplier_W == null)
	        	    {
						_Multiplier_W = TearOff.Multiplier;
					}
					return _Multiplier_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			private AggregateParameter _TestGroupID_W = null;
			private AggregateParameter _TestTypeCode_W = null;
			private AggregateParameter _EmployeeTypeCode_W = null;
			private AggregateParameter _Multiplier_W = null;
			private AggregateParameter _IsActive_W = null;

			public void AggregateClauseReset()
			{
				_TestGroupID_W = null;
				_TestTypeCode_W = null;
				_EmployeeTypeCode_W = null;
				_Multiplier_W = null;
				_IsActive_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TestGroupsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.TestGroupID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TestGroupsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TestGroupsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.TestGroupID);
			p.SourceColumn = ColumnNames.TestGroupID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.TestGroupID);
			p.SourceColumn = ColumnNames.TestGroupID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TestTypeCode);
			p.SourceColumn = ColumnNames.TestTypeCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EmployeeTypeCode);
			p.SourceColumn = ColumnNames.EmployeeTypeCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Multiplier);
			p.SourceColumn = ColumnNames.Multiplier;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
