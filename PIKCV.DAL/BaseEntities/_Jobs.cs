
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _Jobs : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _Jobs()
		{
			this.QuerySource = "Jobs";
			this.MappingName = "Jobs";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_JobsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int JobID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.JobID, JobID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_JobsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter JobID
			{
				get
				{
					return new SqlParameter("@JobID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyID
			{
				get
				{
					return new SqlParameter("@CompanyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter JobTitle
			{
				get
				{
					return new SqlParameter("@JobTitle", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter JobDescription
			{
				get
				{
					return new SqlParameter("@JobDescription", SqlDbType.NVarChar, 2000);
				}
			}
			
			public static SqlParameter ReferenceNumber
			{
				get
				{
					return new SqlParameter("@ReferenceNumber", SqlDbType.NVarChar, 32);
				}
			}
			
			public static SqlParameter UserTypeID
			{
				get
				{
					return new SqlParameter("@UserTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PositionID
			{
				get
				{
					return new SqlParameter("@PositionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PositionIDQuality
			{
				get
				{
					return new SqlParameter("@PositionIDQuality", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter LabouringTypeID
			{
				get
				{
					return new SqlParameter("@LabouringTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter WorkExprerience
			{
				get
				{
					return new SqlParameter("@WorkExprerience", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NumberOfWorkers
			{
				get
				{
					return new SqlParameter("@NumberOfWorkers", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Gender
			{
				get
				{
					return new SqlParameter("@Gender", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AgeRange
			{
				get
				{
					return new SqlParameter("@AgeRange", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsDisabled
			{
				get
				{
					return new SqlParameter("@IsDisabled", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsOldConvicted
			{
				get
				{
					return new SqlParameter("@IsOldConvicted", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsMartyrRelative
			{
				get
				{
					return new SqlParameter("@IsMartyrRelative", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsTerrorWronged
			{
				get
				{
					return new SqlParameter("@IsTerrorWronged", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter JobListType
			{
				get
				{
					return new SqlParameter("@JobListType", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StartDate
			{
				get
				{
					return new SqlParameter("@StartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter EndDate
			{
				get
				{
					return new SqlParameter("@EndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifyDate
			{
				get
				{
					return new SqlParameter("@ModifyDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter PageStatusCode
			{
				get
				{
					return new SqlParameter("@PageStatusCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsCompanyNameHidden
			{
				get
				{
					return new SqlParameter("@IsCompanyNameHidden", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter JobStatus
			{
				get
				{
					return new SqlParameter("@JobStatus", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string JobID = "JobID";
            public const string CompanyID = "CompanyID";
            public const string JobTitle = "JobTitle";
            public const string JobDescription = "JobDescription";
            public const string ReferenceNumber = "ReferenceNumber";
            public const string UserTypeID = "UserTypeID";
            public const string PositionID = "PositionID";
            public const string PositionIDQuality = "PositionIDQuality";
            public const string LabouringTypeID = "LabouringTypeID";
            public const string WorkExprerience = "WorkExprerience";
            public const string NumberOfWorkers = "NumberOfWorkers";
            public const string Gender = "Gender";
            public const string AgeRange = "AgeRange";
            public const string IsDisabled = "IsDisabled";
            public const string IsOldConvicted = "IsOldConvicted";
            public const string IsMartyrRelative = "IsMartyrRelative";
            public const string IsTerrorWronged = "IsTerrorWronged";
            public const string JobListType = "JobListType";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";
            public const string ModifyDate = "ModifyDate";
            public const string PageStatusCode = "PageStatusCode";
            public const string IsCompanyNameHidden = "IsCompanyNameHidden";
            public const string JobStatus = "JobStatus";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[JobID] = _Jobs.PropertyNames.JobID;
					ht[CompanyID] = _Jobs.PropertyNames.CompanyID;
					ht[JobTitle] = _Jobs.PropertyNames.JobTitle;
					ht[JobDescription] = _Jobs.PropertyNames.JobDescription;
					ht[ReferenceNumber] = _Jobs.PropertyNames.ReferenceNumber;
					ht[UserTypeID] = _Jobs.PropertyNames.UserTypeID;
					ht[PositionID] = _Jobs.PropertyNames.PositionID;
					ht[PositionIDQuality] = _Jobs.PropertyNames.PositionIDQuality;
					ht[LabouringTypeID] = _Jobs.PropertyNames.LabouringTypeID;
					ht[WorkExprerience] = _Jobs.PropertyNames.WorkExprerience;
					ht[NumberOfWorkers] = _Jobs.PropertyNames.NumberOfWorkers;
					ht[Gender] = _Jobs.PropertyNames.Gender;
					ht[AgeRange] = _Jobs.PropertyNames.AgeRange;
					ht[IsDisabled] = _Jobs.PropertyNames.IsDisabled;
					ht[IsOldConvicted] = _Jobs.PropertyNames.IsOldConvicted;
					ht[IsMartyrRelative] = _Jobs.PropertyNames.IsMartyrRelative;
					ht[IsTerrorWronged] = _Jobs.PropertyNames.IsTerrorWronged;
					ht[JobListType] = _Jobs.PropertyNames.JobListType;
					ht[StartDate] = _Jobs.PropertyNames.StartDate;
					ht[EndDate] = _Jobs.PropertyNames.EndDate;
					ht[ModifyDate] = _Jobs.PropertyNames.ModifyDate;
					ht[PageStatusCode] = _Jobs.PropertyNames.PageStatusCode;
					ht[IsCompanyNameHidden] = _Jobs.PropertyNames.IsCompanyNameHidden;
					ht[JobStatus] = _Jobs.PropertyNames.JobStatus;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string JobID = "JobID";
            public const string CompanyID = "CompanyID";
            public const string JobTitle = "JobTitle";
            public const string JobDescription = "JobDescription";
            public const string ReferenceNumber = "ReferenceNumber";
            public const string UserTypeID = "UserTypeID";
            public const string PositionID = "PositionID";
            public const string PositionIDQuality = "PositionIDQuality";
            public const string LabouringTypeID = "LabouringTypeID";
            public const string WorkExprerience = "WorkExprerience";
            public const string NumberOfWorkers = "NumberOfWorkers";
            public const string Gender = "Gender";
            public const string AgeRange = "AgeRange";
            public const string IsDisabled = "IsDisabled";
            public const string IsOldConvicted = "IsOldConvicted";
            public const string IsMartyrRelative = "IsMartyrRelative";
            public const string IsTerrorWronged = "IsTerrorWronged";
            public const string JobListType = "JobListType";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";
            public const string ModifyDate = "ModifyDate";
            public const string PageStatusCode = "PageStatusCode";
            public const string IsCompanyNameHidden = "IsCompanyNameHidden";
            public const string JobStatus = "JobStatus";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[JobID] = _Jobs.ColumnNames.JobID;
					ht[CompanyID] = _Jobs.ColumnNames.CompanyID;
					ht[JobTitle] = _Jobs.ColumnNames.JobTitle;
					ht[JobDescription] = _Jobs.ColumnNames.JobDescription;
					ht[ReferenceNumber] = _Jobs.ColumnNames.ReferenceNumber;
					ht[UserTypeID] = _Jobs.ColumnNames.UserTypeID;
					ht[PositionID] = _Jobs.ColumnNames.PositionID;
					ht[PositionIDQuality] = _Jobs.ColumnNames.PositionIDQuality;
					ht[LabouringTypeID] = _Jobs.ColumnNames.LabouringTypeID;
					ht[WorkExprerience] = _Jobs.ColumnNames.WorkExprerience;
					ht[NumberOfWorkers] = _Jobs.ColumnNames.NumberOfWorkers;
					ht[Gender] = _Jobs.ColumnNames.Gender;
					ht[AgeRange] = _Jobs.ColumnNames.AgeRange;
					ht[IsDisabled] = _Jobs.ColumnNames.IsDisabled;
					ht[IsOldConvicted] = _Jobs.ColumnNames.IsOldConvicted;
					ht[IsMartyrRelative] = _Jobs.ColumnNames.IsMartyrRelative;
					ht[IsTerrorWronged] = _Jobs.ColumnNames.IsTerrorWronged;
					ht[JobListType] = _Jobs.ColumnNames.JobListType;
					ht[StartDate] = _Jobs.ColumnNames.StartDate;
					ht[EndDate] = _Jobs.ColumnNames.EndDate;
					ht[ModifyDate] = _Jobs.ColumnNames.ModifyDate;
					ht[PageStatusCode] = _Jobs.ColumnNames.PageStatusCode;
					ht[IsCompanyNameHidden] = _Jobs.ColumnNames.IsCompanyNameHidden;
					ht[JobStatus] = _Jobs.ColumnNames.JobStatus;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string JobID = "s_JobID";
            public const string CompanyID = "s_CompanyID";
            public const string JobTitle = "s_JobTitle";
            public const string JobDescription = "s_JobDescription";
            public const string ReferenceNumber = "s_ReferenceNumber";
            public const string UserTypeID = "s_UserTypeID";
            public const string PositionID = "s_PositionID";
            public const string PositionIDQuality = "s_PositionIDQuality";
            public const string LabouringTypeID = "s_LabouringTypeID";
            public const string WorkExprerience = "s_WorkExprerience";
            public const string NumberOfWorkers = "s_NumberOfWorkers";
            public const string Gender = "s_Gender";
            public const string AgeRange = "s_AgeRange";
            public const string IsDisabled = "s_IsDisabled";
            public const string IsOldConvicted = "s_IsOldConvicted";
            public const string IsMartyrRelative = "s_IsMartyrRelative";
            public const string IsTerrorWronged = "s_IsTerrorWronged";
            public const string JobListType = "s_JobListType";
            public const string StartDate = "s_StartDate";
            public const string EndDate = "s_EndDate";
            public const string ModifyDate = "s_ModifyDate";
            public const string PageStatusCode = "s_PageStatusCode";
            public const string IsCompanyNameHidden = "s_IsCompanyNameHidden";
            public const string JobStatus = "s_JobStatus";

		}
		#endregion		
		
		#region Properties
	
		public virtual int JobID
	    {
			get
	        {
				return base.Getint(ColumnNames.JobID);
			}
			set
	        {
				base.Setint(ColumnNames.JobID, value);
			}
		}

		public virtual int CompanyID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyID, value);
			}
		}

		public virtual string JobTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.JobTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.JobTitle, value);
			}
		}

		public virtual string JobDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.JobDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.JobDescription, value);
			}
		}

		public virtual string ReferenceNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.ReferenceNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.ReferenceNumber, value);
			}
		}

		public virtual int UserTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.UserTypeID, value);
			}
		}

		public virtual int PositionID
	    {
			get
	        {
				return base.Getint(ColumnNames.PositionID);
			}
			set
	        {
				base.Setint(ColumnNames.PositionID, value);
			}
		}

		public virtual int PositionIDQuality
	    {
			get
	        {
				return base.Getint(ColumnNames.PositionIDQuality);
			}
			set
	        {
				base.Setint(ColumnNames.PositionIDQuality, value);
			}
		}

		public virtual int LabouringTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.LabouringTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.LabouringTypeID, value);
			}
		}

		public virtual int WorkExprerience
	    {
			get
	        {
				return base.Getint(ColumnNames.WorkExprerience);
			}
			set
	        {
				base.Setint(ColumnNames.WorkExprerience, value);
			}
		}

		public virtual int NumberOfWorkers
	    {
			get
	        {
				return base.Getint(ColumnNames.NumberOfWorkers);
			}
			set
	        {
				base.Setint(ColumnNames.NumberOfWorkers, value);
			}
		}

		public virtual int Gender
	    {
			get
	        {
				return base.Getint(ColumnNames.Gender);
			}
			set
	        {
				base.Setint(ColumnNames.Gender, value);
			}
		}

		public virtual int AgeRange
	    {
			get
	        {
				return base.Getint(ColumnNames.AgeRange);
			}
			set
	        {
				base.Setint(ColumnNames.AgeRange, value);
			}
		}

		public virtual bool IsDisabled
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDisabled);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDisabled, value);
			}
		}

		public virtual bool IsOldConvicted
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsOldConvicted);
			}
			set
	        {
				base.Setbool(ColumnNames.IsOldConvicted, value);
			}
		}

		public virtual bool IsMartyrRelative
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsMartyrRelative);
			}
			set
	        {
				base.Setbool(ColumnNames.IsMartyrRelative, value);
			}
		}

		public virtual bool IsTerrorWronged
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsTerrorWronged);
			}
			set
	        {
				base.Setbool(ColumnNames.IsTerrorWronged, value);
			}
		}

		public virtual int JobListType
	    {
			get
	        {
				return base.Getint(ColumnNames.JobListType);
			}
			set
	        {
				base.Setint(ColumnNames.JobListType, value);
			}
		}

		public virtual DateTime StartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.StartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.StartDate, value);
			}
		}

		public virtual DateTime EndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.EndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.EndDate, value);
			}
		}

		public virtual DateTime ModifyDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifyDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifyDate, value);
			}
		}

		public virtual int PageStatusCode
	    {
			get
	        {
				return base.Getint(ColumnNames.PageStatusCode);
			}
			set
	        {
				base.Setint(ColumnNames.PageStatusCode, value);
			}
		}

		public virtual bool IsCompanyNameHidden
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsCompanyNameHidden);
			}
			set
	        {
				base.Setbool(ColumnNames.IsCompanyNameHidden, value);
			}
		}

		public virtual int JobStatus
	    {
			get
	        {
				return base.Getint(ColumnNames.JobStatus);
			}
			set
	        {
				base.Setint(ColumnNames.JobStatus, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_JobID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobID) ? string.Empty : base.GetintAsString(ColumnNames.JobID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobID);
				else
					this.JobID = base.SetintAsString(ColumnNames.JobID, value);
			}
		}

		public virtual string s_CompanyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyID);
				else
					this.CompanyID = base.SetintAsString(ColumnNames.CompanyID, value);
			}
		}

		public virtual string s_JobTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobTitle) ? string.Empty : base.GetstringAsString(ColumnNames.JobTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobTitle);
				else
					this.JobTitle = base.SetstringAsString(ColumnNames.JobTitle, value);
			}
		}

		public virtual string s_JobDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobDescription) ? string.Empty : base.GetstringAsString(ColumnNames.JobDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobDescription);
				else
					this.JobDescription = base.SetstringAsString(ColumnNames.JobDescription, value);
			}
		}

		public virtual string s_ReferenceNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReferenceNumber) ? string.Empty : base.GetstringAsString(ColumnNames.ReferenceNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReferenceNumber);
				else
					this.ReferenceNumber = base.SetstringAsString(ColumnNames.ReferenceNumber, value);
			}
		}

		public virtual string s_UserTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserTypeID) ? string.Empty : base.GetintAsString(ColumnNames.UserTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserTypeID);
				else
					this.UserTypeID = base.SetintAsString(ColumnNames.UserTypeID, value);
			}
		}

		public virtual string s_PositionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PositionID) ? string.Empty : base.GetintAsString(ColumnNames.PositionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PositionID);
				else
					this.PositionID = base.SetintAsString(ColumnNames.PositionID, value);
			}
		}

		public virtual string s_PositionIDQuality
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PositionIDQuality) ? string.Empty : base.GetintAsString(ColumnNames.PositionIDQuality);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PositionIDQuality);
				else
					this.PositionIDQuality = base.SetintAsString(ColumnNames.PositionIDQuality, value);
			}
		}

		public virtual string s_LabouringTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LabouringTypeID) ? string.Empty : base.GetintAsString(ColumnNames.LabouringTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LabouringTypeID);
				else
					this.LabouringTypeID = base.SetintAsString(ColumnNames.LabouringTypeID, value);
			}
		}

		public virtual string s_WorkExprerience
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WorkExprerience) ? string.Empty : base.GetintAsString(ColumnNames.WorkExprerience);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WorkExprerience);
				else
					this.WorkExprerience = base.SetintAsString(ColumnNames.WorkExprerience, value);
			}
		}

		public virtual string s_NumberOfWorkers
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NumberOfWorkers) ? string.Empty : base.GetintAsString(ColumnNames.NumberOfWorkers);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NumberOfWorkers);
				else
					this.NumberOfWorkers = base.SetintAsString(ColumnNames.NumberOfWorkers, value);
			}
		}

		public virtual string s_Gender
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Gender) ? string.Empty : base.GetintAsString(ColumnNames.Gender);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Gender);
				else
					this.Gender = base.SetintAsString(ColumnNames.Gender, value);
			}
		}

		public virtual string s_AgeRange
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AgeRange) ? string.Empty : base.GetintAsString(ColumnNames.AgeRange);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AgeRange);
				else
					this.AgeRange = base.SetintAsString(ColumnNames.AgeRange, value);
			}
		}

		public virtual string s_IsDisabled
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDisabled) ? string.Empty : base.GetboolAsString(ColumnNames.IsDisabled);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDisabled);
				else
					this.IsDisabled = base.SetboolAsString(ColumnNames.IsDisabled, value);
			}
		}

		public virtual string s_IsOldConvicted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsOldConvicted) ? string.Empty : base.GetboolAsString(ColumnNames.IsOldConvicted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsOldConvicted);
				else
					this.IsOldConvicted = base.SetboolAsString(ColumnNames.IsOldConvicted, value);
			}
		}

		public virtual string s_IsMartyrRelative
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsMartyrRelative) ? string.Empty : base.GetboolAsString(ColumnNames.IsMartyrRelative);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsMartyrRelative);
				else
					this.IsMartyrRelative = base.SetboolAsString(ColumnNames.IsMartyrRelative, value);
			}
		}

		public virtual string s_IsTerrorWronged
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsTerrorWronged) ? string.Empty : base.GetboolAsString(ColumnNames.IsTerrorWronged);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsTerrorWronged);
				else
					this.IsTerrorWronged = base.SetboolAsString(ColumnNames.IsTerrorWronged, value);
			}
		}

		public virtual string s_JobListType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobListType) ? string.Empty : base.GetintAsString(ColumnNames.JobListType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobListType);
				else
					this.JobListType = base.SetintAsString(ColumnNames.JobListType, value);
			}
		}

		public virtual string s_StartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StartDate);
				else
					this.StartDate = base.SetDateTimeAsString(ColumnNames.StartDate, value);
			}
		}

		public virtual string s_EndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EndDate);
				else
					this.EndDate = base.SetDateTimeAsString(ColumnNames.EndDate, value);
			}
		}

		public virtual string s_ModifyDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifyDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifyDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifyDate);
				else
					this.ModifyDate = base.SetDateTimeAsString(ColumnNames.ModifyDate, value);
			}
		}

		public virtual string s_PageStatusCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PageStatusCode) ? string.Empty : base.GetintAsString(ColumnNames.PageStatusCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PageStatusCode);
				else
					this.PageStatusCode = base.SetintAsString(ColumnNames.PageStatusCode, value);
			}
		}

		public virtual string s_IsCompanyNameHidden
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsCompanyNameHidden) ? string.Empty : base.GetboolAsString(ColumnNames.IsCompanyNameHidden);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsCompanyNameHidden);
				else
					this.IsCompanyNameHidden = base.SetboolAsString(ColumnNames.IsCompanyNameHidden, value);
			}
		}

		public virtual string s_JobStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobStatus) ? string.Empty : base.GetintAsString(ColumnNames.JobStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobStatus);
				else
					this.JobStatus = base.SetintAsString(ColumnNames.JobStatus, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter JobID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobID, Parameters.JobID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobTitle, Parameters.JobTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobDescription, Parameters.JobDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReferenceNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReferenceNumber, Parameters.ReferenceNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserTypeID, Parameters.UserTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PositionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PositionID, Parameters.PositionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PositionIDQuality
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PositionIDQuality, Parameters.PositionIDQuality);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LabouringTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LabouringTypeID, Parameters.LabouringTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WorkExprerience
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WorkExprerience, Parameters.WorkExprerience);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NumberOfWorkers
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NumberOfWorkers, Parameters.NumberOfWorkers);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Gender
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Gender, Parameters.Gender);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AgeRange
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AgeRange, Parameters.AgeRange);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDisabled
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDisabled, Parameters.IsDisabled);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsOldConvicted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsOldConvicted, Parameters.IsOldConvicted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsMartyrRelative
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsMartyrRelative, Parameters.IsMartyrRelative);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsTerrorWronged
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsTerrorWronged, Parameters.IsTerrorWronged);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobListType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobListType, Parameters.JobListType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifyDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PageStatusCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PageStatusCode, Parameters.PageStatusCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsCompanyNameHidden
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsCompanyNameHidden, Parameters.IsCompanyNameHidden);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobStatus, Parameters.JobStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter JobID
		    {
				get
		        {
					if(_JobID_W == null)
	        	    {
						_JobID_W = TearOff.JobID;
					}
					return _JobID_W;
				}
			}

			public WhereParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public WhereParameter JobTitle
		    {
				get
		        {
					if(_JobTitle_W == null)
	        	    {
						_JobTitle_W = TearOff.JobTitle;
					}
					return _JobTitle_W;
				}
			}

			public WhereParameter JobDescription
		    {
				get
		        {
					if(_JobDescription_W == null)
	        	    {
						_JobDescription_W = TearOff.JobDescription;
					}
					return _JobDescription_W;
				}
			}

			public WhereParameter ReferenceNumber
		    {
				get
		        {
					if(_ReferenceNumber_W == null)
	        	    {
						_ReferenceNumber_W = TearOff.ReferenceNumber;
					}
					return _ReferenceNumber_W;
				}
			}

			public WhereParameter UserTypeID
		    {
				get
		        {
					if(_UserTypeID_W == null)
	        	    {
						_UserTypeID_W = TearOff.UserTypeID;
					}
					return _UserTypeID_W;
				}
			}

			public WhereParameter PositionID
		    {
				get
		        {
					if(_PositionID_W == null)
	        	    {
						_PositionID_W = TearOff.PositionID;
					}
					return _PositionID_W;
				}
			}

			public WhereParameter PositionIDQuality
		    {
				get
		        {
					if(_PositionIDQuality_W == null)
	        	    {
						_PositionIDQuality_W = TearOff.PositionIDQuality;
					}
					return _PositionIDQuality_W;
				}
			}

			public WhereParameter LabouringTypeID
		    {
				get
		        {
					if(_LabouringTypeID_W == null)
	        	    {
						_LabouringTypeID_W = TearOff.LabouringTypeID;
					}
					return _LabouringTypeID_W;
				}
			}

			public WhereParameter WorkExprerience
		    {
				get
		        {
					if(_WorkExprerience_W == null)
	        	    {
						_WorkExprerience_W = TearOff.WorkExprerience;
					}
					return _WorkExprerience_W;
				}
			}

			public WhereParameter NumberOfWorkers
		    {
				get
		        {
					if(_NumberOfWorkers_W == null)
	        	    {
						_NumberOfWorkers_W = TearOff.NumberOfWorkers;
					}
					return _NumberOfWorkers_W;
				}
			}

			public WhereParameter Gender
		    {
				get
		        {
					if(_Gender_W == null)
	        	    {
						_Gender_W = TearOff.Gender;
					}
					return _Gender_W;
				}
			}

			public WhereParameter AgeRange
		    {
				get
		        {
					if(_AgeRange_W == null)
	        	    {
						_AgeRange_W = TearOff.AgeRange;
					}
					return _AgeRange_W;
				}
			}

			public WhereParameter IsDisabled
		    {
				get
		        {
					if(_IsDisabled_W == null)
	        	    {
						_IsDisabled_W = TearOff.IsDisabled;
					}
					return _IsDisabled_W;
				}
			}

			public WhereParameter IsOldConvicted
		    {
				get
		        {
					if(_IsOldConvicted_W == null)
	        	    {
						_IsOldConvicted_W = TearOff.IsOldConvicted;
					}
					return _IsOldConvicted_W;
				}
			}

			public WhereParameter IsMartyrRelative
		    {
				get
		        {
					if(_IsMartyrRelative_W == null)
	        	    {
						_IsMartyrRelative_W = TearOff.IsMartyrRelative;
					}
					return _IsMartyrRelative_W;
				}
			}

			public WhereParameter IsTerrorWronged
		    {
				get
		        {
					if(_IsTerrorWronged_W == null)
	        	    {
						_IsTerrorWronged_W = TearOff.IsTerrorWronged;
					}
					return _IsTerrorWronged_W;
				}
			}

			public WhereParameter JobListType
		    {
				get
		        {
					if(_JobListType_W == null)
	        	    {
						_JobListType_W = TearOff.JobListType;
					}
					return _JobListType_W;
				}
			}

			public WhereParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public WhereParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public WhereParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public WhereParameter PageStatusCode
		    {
				get
		        {
					if(_PageStatusCode_W == null)
	        	    {
						_PageStatusCode_W = TearOff.PageStatusCode;
					}
					return _PageStatusCode_W;
				}
			}

			public WhereParameter IsCompanyNameHidden
		    {
				get
		        {
					if(_IsCompanyNameHidden_W == null)
	        	    {
						_IsCompanyNameHidden_W = TearOff.IsCompanyNameHidden;
					}
					return _IsCompanyNameHidden_W;
				}
			}

			public WhereParameter JobStatus
		    {
				get
		        {
					if(_JobStatus_W == null)
	        	    {
						_JobStatus_W = TearOff.JobStatus;
					}
					return _JobStatus_W;
				}
			}

			private WhereParameter _JobID_W = null;
			private WhereParameter _CompanyID_W = null;
			private WhereParameter _JobTitle_W = null;
			private WhereParameter _JobDescription_W = null;
			private WhereParameter _ReferenceNumber_W = null;
			private WhereParameter _UserTypeID_W = null;
			private WhereParameter _PositionID_W = null;
			private WhereParameter _PositionIDQuality_W = null;
			private WhereParameter _LabouringTypeID_W = null;
			private WhereParameter _WorkExprerience_W = null;
			private WhereParameter _NumberOfWorkers_W = null;
			private WhereParameter _Gender_W = null;
			private WhereParameter _AgeRange_W = null;
			private WhereParameter _IsDisabled_W = null;
			private WhereParameter _IsOldConvicted_W = null;
			private WhereParameter _IsMartyrRelative_W = null;
			private WhereParameter _IsTerrorWronged_W = null;
			private WhereParameter _JobListType_W = null;
			private WhereParameter _StartDate_W = null;
			private WhereParameter _EndDate_W = null;
			private WhereParameter _ModifyDate_W = null;
			private WhereParameter _PageStatusCode_W = null;
			private WhereParameter _IsCompanyNameHidden_W = null;
			private WhereParameter _JobStatus_W = null;

			public void WhereClauseReset()
			{
				_JobID_W = null;
				_CompanyID_W = null;
				_JobTitle_W = null;
				_JobDescription_W = null;
				_ReferenceNumber_W = null;
				_UserTypeID_W = null;
				_PositionID_W = null;
				_PositionIDQuality_W = null;
				_LabouringTypeID_W = null;
				_WorkExprerience_W = null;
				_NumberOfWorkers_W = null;
				_Gender_W = null;
				_AgeRange_W = null;
				_IsDisabled_W = null;
				_IsOldConvicted_W = null;
				_IsMartyrRelative_W = null;
				_IsTerrorWronged_W = null;
				_JobListType_W = null;
				_StartDate_W = null;
				_EndDate_W = null;
				_ModifyDate_W = null;
				_PageStatusCode_W = null;
				_IsCompanyNameHidden_W = null;
				_JobStatus_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter JobID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobID, Parameters.JobID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobTitle, Parameters.JobTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobDescription, Parameters.JobDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReferenceNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReferenceNumber, Parameters.ReferenceNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserTypeID, Parameters.UserTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PositionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PositionID, Parameters.PositionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PositionIDQuality
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PositionIDQuality, Parameters.PositionIDQuality);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LabouringTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LabouringTypeID, Parameters.LabouringTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WorkExprerience
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WorkExprerience, Parameters.WorkExprerience);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NumberOfWorkers
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NumberOfWorkers, Parameters.NumberOfWorkers);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Gender
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Gender, Parameters.Gender);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AgeRange
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AgeRange, Parameters.AgeRange);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDisabled
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDisabled, Parameters.IsDisabled);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsOldConvicted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsOldConvicted, Parameters.IsOldConvicted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsMartyrRelative
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsMartyrRelative, Parameters.IsMartyrRelative);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsTerrorWronged
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsTerrorWronged, Parameters.IsTerrorWronged);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobListType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobListType, Parameters.JobListType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifyDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PageStatusCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PageStatusCode, Parameters.PageStatusCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsCompanyNameHidden
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsCompanyNameHidden, Parameters.IsCompanyNameHidden);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobStatus, Parameters.JobStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter JobID
		    {
				get
		        {
					if(_JobID_W == null)
	        	    {
						_JobID_W = TearOff.JobID;
					}
					return _JobID_W;
				}
			}

			public AggregateParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public AggregateParameter JobTitle
		    {
				get
		        {
					if(_JobTitle_W == null)
	        	    {
						_JobTitle_W = TearOff.JobTitle;
					}
					return _JobTitle_W;
				}
			}

			public AggregateParameter JobDescription
		    {
				get
		        {
					if(_JobDescription_W == null)
	        	    {
						_JobDescription_W = TearOff.JobDescription;
					}
					return _JobDescription_W;
				}
			}

			public AggregateParameter ReferenceNumber
		    {
				get
		        {
					if(_ReferenceNumber_W == null)
	        	    {
						_ReferenceNumber_W = TearOff.ReferenceNumber;
					}
					return _ReferenceNumber_W;
				}
			}

			public AggregateParameter UserTypeID
		    {
				get
		        {
					if(_UserTypeID_W == null)
	        	    {
						_UserTypeID_W = TearOff.UserTypeID;
					}
					return _UserTypeID_W;
				}
			}

			public AggregateParameter PositionID
		    {
				get
		        {
					if(_PositionID_W == null)
	        	    {
						_PositionID_W = TearOff.PositionID;
					}
					return _PositionID_W;
				}
			}

			public AggregateParameter PositionIDQuality
		    {
				get
		        {
					if(_PositionIDQuality_W == null)
	        	    {
						_PositionIDQuality_W = TearOff.PositionIDQuality;
					}
					return _PositionIDQuality_W;
				}
			}

			public AggregateParameter LabouringTypeID
		    {
				get
		        {
					if(_LabouringTypeID_W == null)
	        	    {
						_LabouringTypeID_W = TearOff.LabouringTypeID;
					}
					return _LabouringTypeID_W;
				}
			}

			public AggregateParameter WorkExprerience
		    {
				get
		        {
					if(_WorkExprerience_W == null)
	        	    {
						_WorkExprerience_W = TearOff.WorkExprerience;
					}
					return _WorkExprerience_W;
				}
			}

			public AggregateParameter NumberOfWorkers
		    {
				get
		        {
					if(_NumberOfWorkers_W == null)
	        	    {
						_NumberOfWorkers_W = TearOff.NumberOfWorkers;
					}
					return _NumberOfWorkers_W;
				}
			}

			public AggregateParameter Gender
		    {
				get
		        {
					if(_Gender_W == null)
	        	    {
						_Gender_W = TearOff.Gender;
					}
					return _Gender_W;
				}
			}

			public AggregateParameter AgeRange
		    {
				get
		        {
					if(_AgeRange_W == null)
	        	    {
						_AgeRange_W = TearOff.AgeRange;
					}
					return _AgeRange_W;
				}
			}

			public AggregateParameter IsDisabled
		    {
				get
		        {
					if(_IsDisabled_W == null)
	        	    {
						_IsDisabled_W = TearOff.IsDisabled;
					}
					return _IsDisabled_W;
				}
			}

			public AggregateParameter IsOldConvicted
		    {
				get
		        {
					if(_IsOldConvicted_W == null)
	        	    {
						_IsOldConvicted_W = TearOff.IsOldConvicted;
					}
					return _IsOldConvicted_W;
				}
			}

			public AggregateParameter IsMartyrRelative
		    {
				get
		        {
					if(_IsMartyrRelative_W == null)
	        	    {
						_IsMartyrRelative_W = TearOff.IsMartyrRelative;
					}
					return _IsMartyrRelative_W;
				}
			}

			public AggregateParameter IsTerrorWronged
		    {
				get
		        {
					if(_IsTerrorWronged_W == null)
	        	    {
						_IsTerrorWronged_W = TearOff.IsTerrorWronged;
					}
					return _IsTerrorWronged_W;
				}
			}

			public AggregateParameter JobListType
		    {
				get
		        {
					if(_JobListType_W == null)
	        	    {
						_JobListType_W = TearOff.JobListType;
					}
					return _JobListType_W;
				}
			}

			public AggregateParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public AggregateParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public AggregateParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public AggregateParameter PageStatusCode
		    {
				get
		        {
					if(_PageStatusCode_W == null)
	        	    {
						_PageStatusCode_W = TearOff.PageStatusCode;
					}
					return _PageStatusCode_W;
				}
			}

			public AggregateParameter IsCompanyNameHidden
		    {
				get
		        {
					if(_IsCompanyNameHidden_W == null)
	        	    {
						_IsCompanyNameHidden_W = TearOff.IsCompanyNameHidden;
					}
					return _IsCompanyNameHidden_W;
				}
			}

			public AggregateParameter JobStatus
		    {
				get
		        {
					if(_JobStatus_W == null)
	        	    {
						_JobStatus_W = TearOff.JobStatus;
					}
					return _JobStatus_W;
				}
			}

			private AggregateParameter _JobID_W = null;
			private AggregateParameter _CompanyID_W = null;
			private AggregateParameter _JobTitle_W = null;
			private AggregateParameter _JobDescription_W = null;
			private AggregateParameter _ReferenceNumber_W = null;
			private AggregateParameter _UserTypeID_W = null;
			private AggregateParameter _PositionID_W = null;
			private AggregateParameter _PositionIDQuality_W = null;
			private AggregateParameter _LabouringTypeID_W = null;
			private AggregateParameter _WorkExprerience_W = null;
			private AggregateParameter _NumberOfWorkers_W = null;
			private AggregateParameter _Gender_W = null;
			private AggregateParameter _AgeRange_W = null;
			private AggregateParameter _IsDisabled_W = null;
			private AggregateParameter _IsOldConvicted_W = null;
			private AggregateParameter _IsMartyrRelative_W = null;
			private AggregateParameter _IsTerrorWronged_W = null;
			private AggregateParameter _JobListType_W = null;
			private AggregateParameter _StartDate_W = null;
			private AggregateParameter _EndDate_W = null;
			private AggregateParameter _ModifyDate_W = null;
			private AggregateParameter _PageStatusCode_W = null;
			private AggregateParameter _IsCompanyNameHidden_W = null;
			private AggregateParameter _JobStatus_W = null;

			public void AggregateClauseReset()
			{
				_JobID_W = null;
				_CompanyID_W = null;
				_JobTitle_W = null;
				_JobDescription_W = null;
				_ReferenceNumber_W = null;
				_UserTypeID_W = null;
				_PositionID_W = null;
				_PositionIDQuality_W = null;
				_LabouringTypeID_W = null;
				_WorkExprerience_W = null;
				_NumberOfWorkers_W = null;
				_Gender_W = null;
				_AgeRange_W = null;
				_IsDisabled_W = null;
				_IsOldConvicted_W = null;
				_IsMartyrRelative_W = null;
				_IsTerrorWronged_W = null;
				_JobListType_W = null;
				_StartDate_W = null;
				_EndDate_W = null;
				_ModifyDate_W = null;
				_PageStatusCode_W = null;
				_IsCompanyNameHidden_W = null;
				_JobStatus_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_JobsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.JobID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_JobsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_JobsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.JobID);
			p.SourceColumn = ColumnNames.JobID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.JobID);
			p.SourceColumn = ColumnNames.JobID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyID);
			p.SourceColumn = ColumnNames.CompanyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobTitle);
			p.SourceColumn = ColumnNames.JobTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobDescription);
			p.SourceColumn = ColumnNames.JobDescription;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReferenceNumber);
			p.SourceColumn = ColumnNames.ReferenceNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserTypeID);
			p.SourceColumn = ColumnNames.UserTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PositionID);
			p.SourceColumn = ColumnNames.PositionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PositionIDQuality);
			p.SourceColumn = ColumnNames.PositionIDQuality;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LabouringTypeID);
			p.SourceColumn = ColumnNames.LabouringTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WorkExprerience);
			p.SourceColumn = ColumnNames.WorkExprerience;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NumberOfWorkers);
			p.SourceColumn = ColumnNames.NumberOfWorkers;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Gender);
			p.SourceColumn = ColumnNames.Gender;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AgeRange);
			p.SourceColumn = ColumnNames.AgeRange;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsDisabled);
			p.SourceColumn = ColumnNames.IsDisabled;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsOldConvicted);
			p.SourceColumn = ColumnNames.IsOldConvicted;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsMartyrRelative);
			p.SourceColumn = ColumnNames.IsMartyrRelative;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsTerrorWronged);
			p.SourceColumn = ColumnNames.IsTerrorWronged;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobListType);
			p.SourceColumn = ColumnNames.JobListType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StartDate);
			p.SourceColumn = ColumnNames.StartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EndDate);
			p.SourceColumn = ColumnNames.EndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifyDate);
			p.SourceColumn = ColumnNames.ModifyDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PageStatusCode);
			p.SourceColumn = ColumnNames.PageStatusCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsCompanyNameHidden);
			p.SourceColumn = ColumnNames.IsCompanyNameHidden;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobStatus);
			p.SourceColumn = ColumnNames.JobStatus;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
