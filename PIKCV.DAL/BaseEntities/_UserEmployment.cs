
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _UserEmployment : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _UserEmployment()
		{
			this.QuerySource = "UserEmployment";
			this.MappingName = "UserEmployment";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserEmploymentLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int UserEmploymentID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.UserEmploymentID, UserEmploymentID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserEmploymentLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter UserEmploymentID
			{
				get
				{
					return new SqlParameter("@UserEmploymentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyName
			{
				get
				{
					return new SqlParameter("@CompanyName", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter SectorID
			{
				get
				{
					return new SqlParameter("@SectorID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PositionID
			{
				get
				{
					return new SqlParameter("@PositionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter JobDescription
			{
				get
				{
					return new SqlParameter("@JobDescription", SqlDbType.NVarChar, 1024);
				}
			}
			
			public static SqlParameter LabouringTypeID
			{
				get
				{
					return new SqlParameter("@LabouringTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CountryID
			{
				get
				{
					return new SqlParameter("@CountryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CityID
			{
				get
				{
					return new SqlParameter("@CityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OtherCityName
			{
				get
				{
					return new SqlParameter("@OtherCityName", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter IsWorking
			{
				get
				{
					return new SqlParameter("@IsWorking", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter StartDate
			{
				get
				{
					return new SqlParameter("@StartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter EndDate
			{
				get
				{
					return new SqlParameter("@EndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ReasonOfResignation
			{
				get
				{
					return new SqlParameter("@ReasonOfResignation", SqlDbType.NVarChar, 1024);
				}
			}
			
			public static SqlParameter CompanyPhone
			{
				get
				{
					return new SqlParameter("@CompanyPhone", SqlDbType.VarChar, 18);
				}
			}
			
			public static SqlParameter CanReference
			{
				get
				{
					return new SqlParameter("@CanReference", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string UserEmploymentID = "UserEmploymentID";
            public const string UserID = "UserID";
            public const string CompanyName = "CompanyName";
            public const string SectorID = "SectorID";
            public const string PositionID = "PositionID";
            public const string JobDescription = "JobDescription";
            public const string LabouringTypeID = "LabouringTypeID";
            public const string CountryID = "CountryID";
            public const string CityID = "CityID";
            public const string OtherCityName = "OtherCityName";
            public const string IsWorking = "IsWorking";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";
            public const string ReasonOfResignation = "ReasonOfResignation";
            public const string CompanyPhone = "CompanyPhone";
            public const string CanReference = "CanReference";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserEmploymentID] = _UserEmployment.PropertyNames.UserEmploymentID;
					ht[UserID] = _UserEmployment.PropertyNames.UserID;
					ht[CompanyName] = _UserEmployment.PropertyNames.CompanyName;
					ht[SectorID] = _UserEmployment.PropertyNames.SectorID;
					ht[PositionID] = _UserEmployment.PropertyNames.PositionID;
					ht[JobDescription] = _UserEmployment.PropertyNames.JobDescription;
					ht[LabouringTypeID] = _UserEmployment.PropertyNames.LabouringTypeID;
					ht[CountryID] = _UserEmployment.PropertyNames.CountryID;
					ht[CityID] = _UserEmployment.PropertyNames.CityID;
					ht[OtherCityName] = _UserEmployment.PropertyNames.OtherCityName;
					ht[IsWorking] = _UserEmployment.PropertyNames.IsWorking;
					ht[StartDate] = _UserEmployment.PropertyNames.StartDate;
					ht[EndDate] = _UserEmployment.PropertyNames.EndDate;
					ht[ReasonOfResignation] = _UserEmployment.PropertyNames.ReasonOfResignation;
					ht[CompanyPhone] = _UserEmployment.PropertyNames.CompanyPhone;
					ht[CanReference] = _UserEmployment.PropertyNames.CanReference;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string UserEmploymentID = "UserEmploymentID";
            public const string UserID = "UserID";
            public const string CompanyName = "CompanyName";
            public const string SectorID = "SectorID";
            public const string PositionID = "PositionID";
            public const string JobDescription = "JobDescription";
            public const string LabouringTypeID = "LabouringTypeID";
            public const string CountryID = "CountryID";
            public const string CityID = "CityID";
            public const string OtherCityName = "OtherCityName";
            public const string IsWorking = "IsWorking";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";
            public const string ReasonOfResignation = "ReasonOfResignation";
            public const string CompanyPhone = "CompanyPhone";
            public const string CanReference = "CanReference";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserEmploymentID] = _UserEmployment.ColumnNames.UserEmploymentID;
					ht[UserID] = _UserEmployment.ColumnNames.UserID;
					ht[CompanyName] = _UserEmployment.ColumnNames.CompanyName;
					ht[SectorID] = _UserEmployment.ColumnNames.SectorID;
					ht[PositionID] = _UserEmployment.ColumnNames.PositionID;
					ht[JobDescription] = _UserEmployment.ColumnNames.JobDescription;
					ht[LabouringTypeID] = _UserEmployment.ColumnNames.LabouringTypeID;
					ht[CountryID] = _UserEmployment.ColumnNames.CountryID;
					ht[CityID] = _UserEmployment.ColumnNames.CityID;
					ht[OtherCityName] = _UserEmployment.ColumnNames.OtherCityName;
					ht[IsWorking] = _UserEmployment.ColumnNames.IsWorking;
					ht[StartDate] = _UserEmployment.ColumnNames.StartDate;
					ht[EndDate] = _UserEmployment.ColumnNames.EndDate;
					ht[ReasonOfResignation] = _UserEmployment.ColumnNames.ReasonOfResignation;
					ht[CompanyPhone] = _UserEmployment.ColumnNames.CompanyPhone;
					ht[CanReference] = _UserEmployment.ColumnNames.CanReference;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string UserEmploymentID = "s_UserEmploymentID";
            public const string UserID = "s_UserID";
            public const string CompanyName = "s_CompanyName";
            public const string SectorID = "s_SectorID";
            public const string PositionID = "s_PositionID";
            public const string JobDescription = "s_JobDescription";
            public const string LabouringTypeID = "s_LabouringTypeID";
            public const string CountryID = "s_CountryID";
            public const string CityID = "s_CityID";
            public const string OtherCityName = "s_OtherCityName";
            public const string IsWorking = "s_IsWorking";
            public const string StartDate = "s_StartDate";
            public const string EndDate = "s_EndDate";
            public const string ReasonOfResignation = "s_ReasonOfResignation";
            public const string CompanyPhone = "s_CompanyPhone";
            public const string CanReference = "s_CanReference";

		}
		#endregion		
		
		#region Properties
	
		public virtual int UserEmploymentID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserEmploymentID);
			}
			set
	        {
				base.Setint(ColumnNames.UserEmploymentID, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual string CompanyName
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompanyName);
			}
			set
	        {
				base.Setstring(ColumnNames.CompanyName, value);
			}
		}

		public virtual int SectorID
	    {
			get
	        {
				return base.Getint(ColumnNames.SectorID);
			}
			set
	        {
				base.Setint(ColumnNames.SectorID, value);
			}
		}

		public virtual int PositionID
	    {
			get
	        {
				return base.Getint(ColumnNames.PositionID);
			}
			set
	        {
				base.Setint(ColumnNames.PositionID, value);
			}
		}

		public virtual string JobDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.JobDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.JobDescription, value);
			}
		}

		public virtual int LabouringTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.LabouringTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.LabouringTypeID, value);
			}
		}

		public virtual int CountryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryID, value);
			}
		}

		public virtual int CityID
	    {
			get
	        {
				return base.Getint(ColumnNames.CityID);
			}
			set
	        {
				base.Setint(ColumnNames.CityID, value);
			}
		}

		public virtual string OtherCityName
	    {
			get
	        {
				return base.Getstring(ColumnNames.OtherCityName);
			}
			set
	        {
				base.Setstring(ColumnNames.OtherCityName, value);
			}
		}

		public virtual bool IsWorking
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsWorking);
			}
			set
	        {
				base.Setbool(ColumnNames.IsWorking, value);
			}
		}

		public virtual DateTime StartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.StartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.StartDate, value);
			}
		}

		public virtual DateTime EndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.EndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.EndDate, value);
			}
		}

		public virtual string ReasonOfResignation
	    {
			get
	        {
				return base.Getstring(ColumnNames.ReasonOfResignation);
			}
			set
	        {
				base.Setstring(ColumnNames.ReasonOfResignation, value);
			}
		}

		public virtual string CompanyPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompanyPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.CompanyPhone, value);
			}
		}

		public virtual bool CanReference
	    {
			get
	        {
				return base.Getbool(ColumnNames.CanReference);
			}
			set
	        {
				base.Setbool(ColumnNames.CanReference, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_UserEmploymentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserEmploymentID) ? string.Empty : base.GetintAsString(ColumnNames.UserEmploymentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserEmploymentID);
				else
					this.UserEmploymentID = base.SetintAsString(ColumnNames.UserEmploymentID, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_CompanyName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyName) ? string.Empty : base.GetstringAsString(ColumnNames.CompanyName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyName);
				else
					this.CompanyName = base.SetstringAsString(ColumnNames.CompanyName, value);
			}
		}

		public virtual string s_SectorID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SectorID) ? string.Empty : base.GetintAsString(ColumnNames.SectorID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SectorID);
				else
					this.SectorID = base.SetintAsString(ColumnNames.SectorID, value);
			}
		}

		public virtual string s_PositionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PositionID) ? string.Empty : base.GetintAsString(ColumnNames.PositionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PositionID);
				else
					this.PositionID = base.SetintAsString(ColumnNames.PositionID, value);
			}
		}

		public virtual string s_JobDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobDescription) ? string.Empty : base.GetstringAsString(ColumnNames.JobDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobDescription);
				else
					this.JobDescription = base.SetstringAsString(ColumnNames.JobDescription, value);
			}
		}

		public virtual string s_LabouringTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LabouringTypeID) ? string.Empty : base.GetintAsString(ColumnNames.LabouringTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LabouringTypeID);
				else
					this.LabouringTypeID = base.SetintAsString(ColumnNames.LabouringTypeID, value);
			}
		}

		public virtual string s_CountryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryID) ? string.Empty : base.GetintAsString(ColumnNames.CountryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryID);
				else
					this.CountryID = base.SetintAsString(ColumnNames.CountryID, value);
			}
		}

		public virtual string s_CityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CityID) ? string.Empty : base.GetintAsString(ColumnNames.CityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CityID);
				else
					this.CityID = base.SetintAsString(ColumnNames.CityID, value);
			}
		}

		public virtual string s_OtherCityName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OtherCityName) ? string.Empty : base.GetstringAsString(ColumnNames.OtherCityName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OtherCityName);
				else
					this.OtherCityName = base.SetstringAsString(ColumnNames.OtherCityName, value);
			}
		}

		public virtual string s_IsWorking
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsWorking) ? string.Empty : base.GetboolAsString(ColumnNames.IsWorking);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsWorking);
				else
					this.IsWorking = base.SetboolAsString(ColumnNames.IsWorking, value);
			}
		}

		public virtual string s_StartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StartDate);
				else
					this.StartDate = base.SetDateTimeAsString(ColumnNames.StartDate, value);
			}
		}

		public virtual string s_EndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EndDate);
				else
					this.EndDate = base.SetDateTimeAsString(ColumnNames.EndDate, value);
			}
		}

		public virtual string s_ReasonOfResignation
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReasonOfResignation) ? string.Empty : base.GetstringAsString(ColumnNames.ReasonOfResignation);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReasonOfResignation);
				else
					this.ReasonOfResignation = base.SetstringAsString(ColumnNames.ReasonOfResignation, value);
			}
		}

		public virtual string s_CompanyPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyPhone) ? string.Empty : base.GetstringAsString(ColumnNames.CompanyPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyPhone);
				else
					this.CompanyPhone = base.SetstringAsString(ColumnNames.CompanyPhone, value);
			}
		}

		public virtual string s_CanReference
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CanReference) ? string.Empty : base.GetboolAsString(ColumnNames.CanReference);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CanReference);
				else
					this.CanReference = base.SetboolAsString(ColumnNames.CanReference, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter UserEmploymentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserEmploymentID, Parameters.UserEmploymentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyName, Parameters.CompanyName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SectorID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SectorID, Parameters.SectorID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PositionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PositionID, Parameters.PositionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobDescription, Parameters.JobDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LabouringTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LabouringTypeID, Parameters.LabouringTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CountryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CityID, Parameters.CityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OtherCityName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OtherCityName, Parameters.OtherCityName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsWorking
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsWorking, Parameters.IsWorking);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReasonOfResignation
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReasonOfResignation, Parameters.ReasonOfResignation);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyPhone, Parameters.CompanyPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CanReference
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CanReference, Parameters.CanReference);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter UserEmploymentID
		    {
				get
		        {
					if(_UserEmploymentID_W == null)
	        	    {
						_UserEmploymentID_W = TearOff.UserEmploymentID;
					}
					return _UserEmploymentID_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter CompanyName
		    {
				get
		        {
					if(_CompanyName_W == null)
	        	    {
						_CompanyName_W = TearOff.CompanyName;
					}
					return _CompanyName_W;
				}
			}

			public WhereParameter SectorID
		    {
				get
		        {
					if(_SectorID_W == null)
	        	    {
						_SectorID_W = TearOff.SectorID;
					}
					return _SectorID_W;
				}
			}

			public WhereParameter PositionID
		    {
				get
		        {
					if(_PositionID_W == null)
	        	    {
						_PositionID_W = TearOff.PositionID;
					}
					return _PositionID_W;
				}
			}

			public WhereParameter JobDescription
		    {
				get
		        {
					if(_JobDescription_W == null)
	        	    {
						_JobDescription_W = TearOff.JobDescription;
					}
					return _JobDescription_W;
				}
			}

			public WhereParameter LabouringTypeID
		    {
				get
		        {
					if(_LabouringTypeID_W == null)
	        	    {
						_LabouringTypeID_W = TearOff.LabouringTypeID;
					}
					return _LabouringTypeID_W;
				}
			}

			public WhereParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public WhereParameter CityID
		    {
				get
		        {
					if(_CityID_W == null)
	        	    {
						_CityID_W = TearOff.CityID;
					}
					return _CityID_W;
				}
			}

			public WhereParameter OtherCityName
		    {
				get
		        {
					if(_OtherCityName_W == null)
	        	    {
						_OtherCityName_W = TearOff.OtherCityName;
					}
					return _OtherCityName_W;
				}
			}

			public WhereParameter IsWorking
		    {
				get
		        {
					if(_IsWorking_W == null)
	        	    {
						_IsWorking_W = TearOff.IsWorking;
					}
					return _IsWorking_W;
				}
			}

			public WhereParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public WhereParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public WhereParameter ReasonOfResignation
		    {
				get
		        {
					if(_ReasonOfResignation_W == null)
	        	    {
						_ReasonOfResignation_W = TearOff.ReasonOfResignation;
					}
					return _ReasonOfResignation_W;
				}
			}

			public WhereParameter CompanyPhone
		    {
				get
		        {
					if(_CompanyPhone_W == null)
	        	    {
						_CompanyPhone_W = TearOff.CompanyPhone;
					}
					return _CompanyPhone_W;
				}
			}

			public WhereParameter CanReference
		    {
				get
		        {
					if(_CanReference_W == null)
	        	    {
						_CanReference_W = TearOff.CanReference;
					}
					return _CanReference_W;
				}
			}

			private WhereParameter _UserEmploymentID_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _CompanyName_W = null;
			private WhereParameter _SectorID_W = null;
			private WhereParameter _PositionID_W = null;
			private WhereParameter _JobDescription_W = null;
			private WhereParameter _LabouringTypeID_W = null;
			private WhereParameter _CountryID_W = null;
			private WhereParameter _CityID_W = null;
			private WhereParameter _OtherCityName_W = null;
			private WhereParameter _IsWorking_W = null;
			private WhereParameter _StartDate_W = null;
			private WhereParameter _EndDate_W = null;
			private WhereParameter _ReasonOfResignation_W = null;
			private WhereParameter _CompanyPhone_W = null;
			private WhereParameter _CanReference_W = null;

			public void WhereClauseReset()
			{
				_UserEmploymentID_W = null;
				_UserID_W = null;
				_CompanyName_W = null;
				_SectorID_W = null;
				_PositionID_W = null;
				_JobDescription_W = null;
				_LabouringTypeID_W = null;
				_CountryID_W = null;
				_CityID_W = null;
				_OtherCityName_W = null;
				_IsWorking_W = null;
				_StartDate_W = null;
				_EndDate_W = null;
				_ReasonOfResignation_W = null;
				_CompanyPhone_W = null;
				_CanReference_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter UserEmploymentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserEmploymentID, Parameters.UserEmploymentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyName, Parameters.CompanyName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SectorID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SectorID, Parameters.SectorID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PositionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PositionID, Parameters.PositionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobDescription, Parameters.JobDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LabouringTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LabouringTypeID, Parameters.LabouringTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CountryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CityID, Parameters.CityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OtherCityName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OtherCityName, Parameters.OtherCityName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsWorking
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsWorking, Parameters.IsWorking);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReasonOfResignation
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReasonOfResignation, Parameters.ReasonOfResignation);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyPhone, Parameters.CompanyPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CanReference
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CanReference, Parameters.CanReference);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter UserEmploymentID
		    {
				get
		        {
					if(_UserEmploymentID_W == null)
	        	    {
						_UserEmploymentID_W = TearOff.UserEmploymentID;
					}
					return _UserEmploymentID_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter CompanyName
		    {
				get
		        {
					if(_CompanyName_W == null)
	        	    {
						_CompanyName_W = TearOff.CompanyName;
					}
					return _CompanyName_W;
				}
			}

			public AggregateParameter SectorID
		    {
				get
		        {
					if(_SectorID_W == null)
	        	    {
						_SectorID_W = TearOff.SectorID;
					}
					return _SectorID_W;
				}
			}

			public AggregateParameter PositionID
		    {
				get
		        {
					if(_PositionID_W == null)
	        	    {
						_PositionID_W = TearOff.PositionID;
					}
					return _PositionID_W;
				}
			}

			public AggregateParameter JobDescription
		    {
				get
		        {
					if(_JobDescription_W == null)
	        	    {
						_JobDescription_W = TearOff.JobDescription;
					}
					return _JobDescription_W;
				}
			}

			public AggregateParameter LabouringTypeID
		    {
				get
		        {
					if(_LabouringTypeID_W == null)
	        	    {
						_LabouringTypeID_W = TearOff.LabouringTypeID;
					}
					return _LabouringTypeID_W;
				}
			}

			public AggregateParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public AggregateParameter CityID
		    {
				get
		        {
					if(_CityID_W == null)
	        	    {
						_CityID_W = TearOff.CityID;
					}
					return _CityID_W;
				}
			}

			public AggregateParameter OtherCityName
		    {
				get
		        {
					if(_OtherCityName_W == null)
	        	    {
						_OtherCityName_W = TearOff.OtherCityName;
					}
					return _OtherCityName_W;
				}
			}

			public AggregateParameter IsWorking
		    {
				get
		        {
					if(_IsWorking_W == null)
	        	    {
						_IsWorking_W = TearOff.IsWorking;
					}
					return _IsWorking_W;
				}
			}

			public AggregateParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public AggregateParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public AggregateParameter ReasonOfResignation
		    {
				get
		        {
					if(_ReasonOfResignation_W == null)
	        	    {
						_ReasonOfResignation_W = TearOff.ReasonOfResignation;
					}
					return _ReasonOfResignation_W;
				}
			}

			public AggregateParameter CompanyPhone
		    {
				get
		        {
					if(_CompanyPhone_W == null)
	        	    {
						_CompanyPhone_W = TearOff.CompanyPhone;
					}
					return _CompanyPhone_W;
				}
			}

			public AggregateParameter CanReference
		    {
				get
		        {
					if(_CanReference_W == null)
	        	    {
						_CanReference_W = TearOff.CanReference;
					}
					return _CanReference_W;
				}
			}

			private AggregateParameter _UserEmploymentID_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _CompanyName_W = null;
			private AggregateParameter _SectorID_W = null;
			private AggregateParameter _PositionID_W = null;
			private AggregateParameter _JobDescription_W = null;
			private AggregateParameter _LabouringTypeID_W = null;
			private AggregateParameter _CountryID_W = null;
			private AggregateParameter _CityID_W = null;
			private AggregateParameter _OtherCityName_W = null;
			private AggregateParameter _IsWorking_W = null;
			private AggregateParameter _StartDate_W = null;
			private AggregateParameter _EndDate_W = null;
			private AggregateParameter _ReasonOfResignation_W = null;
			private AggregateParameter _CompanyPhone_W = null;
			private AggregateParameter _CanReference_W = null;

			public void AggregateClauseReset()
			{
				_UserEmploymentID_W = null;
				_UserID_W = null;
				_CompanyName_W = null;
				_SectorID_W = null;
				_PositionID_W = null;
				_JobDescription_W = null;
				_LabouringTypeID_W = null;
				_CountryID_W = null;
				_CityID_W = null;
				_OtherCityName_W = null;
				_IsWorking_W = null;
				_StartDate_W = null;
				_EndDate_W = null;
				_ReasonOfResignation_W = null;
				_CompanyPhone_W = null;
				_CanReference_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserEmploymentInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.UserEmploymentID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserEmploymentUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserEmploymentDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.UserEmploymentID);
			p.SourceColumn = ColumnNames.UserEmploymentID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.UserEmploymentID);
			p.SourceColumn = ColumnNames.UserEmploymentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyName);
			p.SourceColumn = ColumnNames.CompanyName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SectorID);
			p.SourceColumn = ColumnNames.SectorID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PositionID);
			p.SourceColumn = ColumnNames.PositionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobDescription);
			p.SourceColumn = ColumnNames.JobDescription;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LabouringTypeID);
			p.SourceColumn = ColumnNames.LabouringTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CountryID);
			p.SourceColumn = ColumnNames.CountryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CityID);
			p.SourceColumn = ColumnNames.CityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OtherCityName);
			p.SourceColumn = ColumnNames.OtherCityName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsWorking);
			p.SourceColumn = ColumnNames.IsWorking;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StartDate);
			p.SourceColumn = ColumnNames.StartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EndDate);
			p.SourceColumn = ColumnNames.EndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReasonOfResignation);
			p.SourceColumn = ColumnNames.ReasonOfResignation;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyPhone);
			p.SourceColumn = ColumnNames.CompanyPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CanReference);
			p.SourceColumn = ColumnNames.CanReference;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
