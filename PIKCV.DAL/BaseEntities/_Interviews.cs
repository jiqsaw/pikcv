
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _Interviews : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _Interviews()
		{
			this.QuerySource = "Interviews";
			this.MappingName = "Interviews";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InterviewsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int InterviewID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.InterviewID, InterviewID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InterviewsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter InterviewID
			{
				get
				{
					return new SqlParameter("@InterviewID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyAdvisorID
			{
				get
				{
					return new SqlParameter("@CompanyAdvisorID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InterviewerTypeCode
			{
				get
				{
					return new SqlParameter("@InterviewerTypeCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InterviewerID
			{
				get
				{
					return new SqlParameter("@InterviewerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InterviewDate
			{
				get
				{
					return new SqlParameter("@InterviewDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter InterviewStartTime
			{
				get
				{
					return new SqlParameter("@InterviewStartTime", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter InterviewEndTime
			{
				get
				{
					return new SqlParameter("@InterviewEndTime", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter InterviewPlace
			{
				get
				{
					return new SqlParameter("@InterviewPlace", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter InterviewStatusID
			{
				get
				{
					return new SqlParameter("@InterviewStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InterviewRating
			{
				get
				{
					return new SqlParameter("@InterviewRating", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InterviewNotes
			{
				get
				{
					return new SqlParameter("@InterviewNotes", SqlDbType.NVarChar, 2000);
				}
			}
			
			public static SqlParameter JobID
			{
				get
				{
					return new SqlParameter("@JobID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PositionID
			{
				get
				{
					return new SqlParameter("@PositionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CreateDate
			{
				get
				{
					return new SqlParameter("@CreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifyDate
			{
				get
				{
					return new SqlParameter("@ModifyDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UpdatedBy
			{
				get
				{
					return new SqlParameter("@UpdatedBy", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string InterviewID = "InterviewID";
            public const string UserID = "UserID";
            public const string CompanyAdvisorID = "CompanyAdvisorID";
            public const string InterviewerTypeCode = "InterviewerTypeCode";
            public const string InterviewerID = "InterviewerID";
            public const string InterviewDate = "InterviewDate";
            public const string InterviewStartTime = "InterviewStartTime";
            public const string InterviewEndTime = "InterviewEndTime";
            public const string InterviewPlace = "InterviewPlace";
            public const string InterviewStatusID = "InterviewStatusID";
            public const string InterviewRating = "InterviewRating";
            public const string InterviewNotes = "InterviewNotes";
            public const string JobID = "JobID";
            public const string PositionID = "PositionID";
            public const string CreateDate = "CreateDate";
            public const string ModifyDate = "ModifyDate";
            public const string UpdatedBy = "UpdatedBy";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InterviewID] = _Interviews.PropertyNames.InterviewID;
					ht[UserID] = _Interviews.PropertyNames.UserID;
					ht[CompanyAdvisorID] = _Interviews.PropertyNames.CompanyAdvisorID;
					ht[InterviewerTypeCode] = _Interviews.PropertyNames.InterviewerTypeCode;
					ht[InterviewerID] = _Interviews.PropertyNames.InterviewerID;
					ht[InterviewDate] = _Interviews.PropertyNames.InterviewDate;
					ht[InterviewStartTime] = _Interviews.PropertyNames.InterviewStartTime;
					ht[InterviewEndTime] = _Interviews.PropertyNames.InterviewEndTime;
					ht[InterviewPlace] = _Interviews.PropertyNames.InterviewPlace;
					ht[InterviewStatusID] = _Interviews.PropertyNames.InterviewStatusID;
					ht[InterviewRating] = _Interviews.PropertyNames.InterviewRating;
					ht[InterviewNotes] = _Interviews.PropertyNames.InterviewNotes;
					ht[JobID] = _Interviews.PropertyNames.JobID;
					ht[PositionID] = _Interviews.PropertyNames.PositionID;
					ht[CreateDate] = _Interviews.PropertyNames.CreateDate;
					ht[ModifyDate] = _Interviews.PropertyNames.ModifyDate;
					ht[UpdatedBy] = _Interviews.PropertyNames.UpdatedBy;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string InterviewID = "InterviewID";
            public const string UserID = "UserID";
            public const string CompanyAdvisorID = "CompanyAdvisorID";
            public const string InterviewerTypeCode = "InterviewerTypeCode";
            public const string InterviewerID = "InterviewerID";
            public const string InterviewDate = "InterviewDate";
            public const string InterviewStartTime = "InterviewStartTime";
            public const string InterviewEndTime = "InterviewEndTime";
            public const string InterviewPlace = "InterviewPlace";
            public const string InterviewStatusID = "InterviewStatusID";
            public const string InterviewRating = "InterviewRating";
            public const string InterviewNotes = "InterviewNotes";
            public const string JobID = "JobID";
            public const string PositionID = "PositionID";
            public const string CreateDate = "CreateDate";
            public const string ModifyDate = "ModifyDate";
            public const string UpdatedBy = "UpdatedBy";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InterviewID] = _Interviews.ColumnNames.InterviewID;
					ht[UserID] = _Interviews.ColumnNames.UserID;
					ht[CompanyAdvisorID] = _Interviews.ColumnNames.CompanyAdvisorID;
					ht[InterviewerTypeCode] = _Interviews.ColumnNames.InterviewerTypeCode;
					ht[InterviewerID] = _Interviews.ColumnNames.InterviewerID;
					ht[InterviewDate] = _Interviews.ColumnNames.InterviewDate;
					ht[InterviewStartTime] = _Interviews.ColumnNames.InterviewStartTime;
					ht[InterviewEndTime] = _Interviews.ColumnNames.InterviewEndTime;
					ht[InterviewPlace] = _Interviews.ColumnNames.InterviewPlace;
					ht[InterviewStatusID] = _Interviews.ColumnNames.InterviewStatusID;
					ht[InterviewRating] = _Interviews.ColumnNames.InterviewRating;
					ht[InterviewNotes] = _Interviews.ColumnNames.InterviewNotes;
					ht[JobID] = _Interviews.ColumnNames.JobID;
					ht[PositionID] = _Interviews.ColumnNames.PositionID;
					ht[CreateDate] = _Interviews.ColumnNames.CreateDate;
					ht[ModifyDate] = _Interviews.ColumnNames.ModifyDate;
					ht[UpdatedBy] = _Interviews.ColumnNames.UpdatedBy;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string InterviewID = "s_InterviewID";
            public const string UserID = "s_UserID";
            public const string CompanyAdvisorID = "s_CompanyAdvisorID";
            public const string InterviewerTypeCode = "s_InterviewerTypeCode";
            public const string InterviewerID = "s_InterviewerID";
            public const string InterviewDate = "s_InterviewDate";
            public const string InterviewStartTime = "s_InterviewStartTime";
            public const string InterviewEndTime = "s_InterviewEndTime";
            public const string InterviewPlace = "s_InterviewPlace";
            public const string InterviewStatusID = "s_InterviewStatusID";
            public const string InterviewRating = "s_InterviewRating";
            public const string InterviewNotes = "s_InterviewNotes";
            public const string JobID = "s_JobID";
            public const string PositionID = "s_PositionID";
            public const string CreateDate = "s_CreateDate";
            public const string ModifyDate = "s_ModifyDate";
            public const string UpdatedBy = "s_UpdatedBy";

		}
		#endregion		
		
		#region Properties
	
		public virtual int InterviewID
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewID);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewID, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual int CompanyAdvisorID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyAdvisorID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyAdvisorID, value);
			}
		}

		public virtual int InterviewerTypeCode
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewerTypeCode);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewerTypeCode, value);
			}
		}

		public virtual int InterviewerID
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewerID);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewerID, value);
			}
		}

		public virtual DateTime InterviewDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.InterviewDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.InterviewDate, value);
			}
		}

		public virtual DateTime InterviewStartTime
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.InterviewStartTime);
			}
			set
	        {
				base.SetDateTime(ColumnNames.InterviewStartTime, value);
			}
		}

		public virtual DateTime InterviewEndTime
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.InterviewEndTime);
			}
			set
	        {
				base.SetDateTime(ColumnNames.InterviewEndTime, value);
			}
		}

		public virtual string InterviewPlace
	    {
			get
	        {
				return base.Getstring(ColumnNames.InterviewPlace);
			}
			set
	        {
				base.Setstring(ColumnNames.InterviewPlace, value);
			}
		}

		public virtual int InterviewStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewStatusID, value);
			}
		}

		public virtual int InterviewRating
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewRating);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewRating, value);
			}
		}

		public virtual string InterviewNotes
	    {
			get
	        {
				return base.Getstring(ColumnNames.InterviewNotes);
			}
			set
	        {
				base.Setstring(ColumnNames.InterviewNotes, value);
			}
		}

		public virtual int JobID
	    {
			get
	        {
				return base.Getint(ColumnNames.JobID);
			}
			set
	        {
				base.Setint(ColumnNames.JobID, value);
			}
		}

		public virtual int PositionID
	    {
			get
	        {
				return base.Getint(ColumnNames.PositionID);
			}
			set
	        {
				base.Setint(ColumnNames.PositionID, value);
			}
		}

		public virtual DateTime CreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreateDate, value);
			}
		}

		public virtual DateTime ModifyDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifyDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifyDate, value);
			}
		}

		public virtual int UpdatedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.UpdatedBy);
			}
			set
	        {
				base.Setint(ColumnNames.UpdatedBy, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_InterviewID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewID) ? string.Empty : base.GetintAsString(ColumnNames.InterviewID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewID);
				else
					this.InterviewID = base.SetintAsString(ColumnNames.InterviewID, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_CompanyAdvisorID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyAdvisorID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyAdvisorID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyAdvisorID);
				else
					this.CompanyAdvisorID = base.SetintAsString(ColumnNames.CompanyAdvisorID, value);
			}
		}

		public virtual string s_InterviewerTypeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewerTypeCode) ? string.Empty : base.GetintAsString(ColumnNames.InterviewerTypeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewerTypeCode);
				else
					this.InterviewerTypeCode = base.SetintAsString(ColumnNames.InterviewerTypeCode, value);
			}
		}

		public virtual string s_InterviewerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewerID) ? string.Empty : base.GetintAsString(ColumnNames.InterviewerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewerID);
				else
					this.InterviewerID = base.SetintAsString(ColumnNames.InterviewerID, value);
			}
		}

		public virtual string s_InterviewDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.InterviewDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewDate);
				else
					this.InterviewDate = base.SetDateTimeAsString(ColumnNames.InterviewDate, value);
			}
		}

		public virtual string s_InterviewStartTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewStartTime) ? string.Empty : base.GetDateTimeAsString(ColumnNames.InterviewStartTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewStartTime);
				else
					this.InterviewStartTime = base.SetDateTimeAsString(ColumnNames.InterviewStartTime, value);
			}
		}

		public virtual string s_InterviewEndTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewEndTime) ? string.Empty : base.GetDateTimeAsString(ColumnNames.InterviewEndTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewEndTime);
				else
					this.InterviewEndTime = base.SetDateTimeAsString(ColumnNames.InterviewEndTime, value);
			}
		}

		public virtual string s_InterviewPlace
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewPlace) ? string.Empty : base.GetstringAsString(ColumnNames.InterviewPlace);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewPlace);
				else
					this.InterviewPlace = base.SetstringAsString(ColumnNames.InterviewPlace, value);
			}
		}

		public virtual string s_InterviewStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewStatusID) ? string.Empty : base.GetintAsString(ColumnNames.InterviewStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewStatusID);
				else
					this.InterviewStatusID = base.SetintAsString(ColumnNames.InterviewStatusID, value);
			}
		}

		public virtual string s_InterviewRating
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewRating) ? string.Empty : base.GetintAsString(ColumnNames.InterviewRating);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewRating);
				else
					this.InterviewRating = base.SetintAsString(ColumnNames.InterviewRating, value);
			}
		}

		public virtual string s_InterviewNotes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewNotes) ? string.Empty : base.GetstringAsString(ColumnNames.InterviewNotes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewNotes);
				else
					this.InterviewNotes = base.SetstringAsString(ColumnNames.InterviewNotes, value);
			}
		}

		public virtual string s_JobID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobID) ? string.Empty : base.GetintAsString(ColumnNames.JobID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobID);
				else
					this.JobID = base.SetintAsString(ColumnNames.JobID, value);
			}
		}

		public virtual string s_PositionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PositionID) ? string.Empty : base.GetintAsString(ColumnNames.PositionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PositionID);
				else
					this.PositionID = base.SetintAsString(ColumnNames.PositionID, value);
			}
		}

		public virtual string s_CreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreateDate);
				else
					this.CreateDate = base.SetDateTimeAsString(ColumnNames.CreateDate, value);
			}
		}

		public virtual string s_ModifyDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifyDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifyDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifyDate);
				else
					this.ModifyDate = base.SetDateTimeAsString(ColumnNames.ModifyDate, value);
			}
		}

		public virtual string s_UpdatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UpdatedBy) ? string.Empty : base.GetintAsString(ColumnNames.UpdatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UpdatedBy);
				else
					this.UpdatedBy = base.SetintAsString(ColumnNames.UpdatedBy, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter InterviewID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewID, Parameters.InterviewID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyAdvisorID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyAdvisorID, Parameters.CompanyAdvisorID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewerTypeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewerTypeCode, Parameters.InterviewerTypeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewerID, Parameters.InterviewerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewDate, Parameters.InterviewDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewStartTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewStartTime, Parameters.InterviewStartTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewEndTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewEndTime, Parameters.InterviewEndTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewPlace
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewPlace, Parameters.InterviewPlace);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewStatusID, Parameters.InterviewStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewRating
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewRating, Parameters.InterviewRating);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewNotes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewNotes, Parameters.InterviewNotes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobID, Parameters.JobID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PositionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PositionID, Parameters.PositionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifyDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UpdatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter InterviewID
		    {
				get
		        {
					if(_InterviewID_W == null)
	        	    {
						_InterviewID_W = TearOff.InterviewID;
					}
					return _InterviewID_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter CompanyAdvisorID
		    {
				get
		        {
					if(_CompanyAdvisorID_W == null)
	        	    {
						_CompanyAdvisorID_W = TearOff.CompanyAdvisorID;
					}
					return _CompanyAdvisorID_W;
				}
			}

			public WhereParameter InterviewerTypeCode
		    {
				get
		        {
					if(_InterviewerTypeCode_W == null)
	        	    {
						_InterviewerTypeCode_W = TearOff.InterviewerTypeCode;
					}
					return _InterviewerTypeCode_W;
				}
			}

			public WhereParameter InterviewerID
		    {
				get
		        {
					if(_InterviewerID_W == null)
	        	    {
						_InterviewerID_W = TearOff.InterviewerID;
					}
					return _InterviewerID_W;
				}
			}

			public WhereParameter InterviewDate
		    {
				get
		        {
					if(_InterviewDate_W == null)
	        	    {
						_InterviewDate_W = TearOff.InterviewDate;
					}
					return _InterviewDate_W;
				}
			}

			public WhereParameter InterviewStartTime
		    {
				get
		        {
					if(_InterviewStartTime_W == null)
	        	    {
						_InterviewStartTime_W = TearOff.InterviewStartTime;
					}
					return _InterviewStartTime_W;
				}
			}

			public WhereParameter InterviewEndTime
		    {
				get
		        {
					if(_InterviewEndTime_W == null)
	        	    {
						_InterviewEndTime_W = TearOff.InterviewEndTime;
					}
					return _InterviewEndTime_W;
				}
			}

			public WhereParameter InterviewPlace
		    {
				get
		        {
					if(_InterviewPlace_W == null)
	        	    {
						_InterviewPlace_W = TearOff.InterviewPlace;
					}
					return _InterviewPlace_W;
				}
			}

			public WhereParameter InterviewStatusID
		    {
				get
		        {
					if(_InterviewStatusID_W == null)
	        	    {
						_InterviewStatusID_W = TearOff.InterviewStatusID;
					}
					return _InterviewStatusID_W;
				}
			}

			public WhereParameter InterviewRating
		    {
				get
		        {
					if(_InterviewRating_W == null)
	        	    {
						_InterviewRating_W = TearOff.InterviewRating;
					}
					return _InterviewRating_W;
				}
			}

			public WhereParameter InterviewNotes
		    {
				get
		        {
					if(_InterviewNotes_W == null)
	        	    {
						_InterviewNotes_W = TearOff.InterviewNotes;
					}
					return _InterviewNotes_W;
				}
			}

			public WhereParameter JobID
		    {
				get
		        {
					if(_JobID_W == null)
	        	    {
						_JobID_W = TearOff.JobID;
					}
					return _JobID_W;
				}
			}

			public WhereParameter PositionID
		    {
				get
		        {
					if(_PositionID_W == null)
	        	    {
						_PositionID_W = TearOff.PositionID;
					}
					return _PositionID_W;
				}
			}

			public WhereParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public WhereParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public WhereParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			private WhereParameter _InterviewID_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _CompanyAdvisorID_W = null;
			private WhereParameter _InterviewerTypeCode_W = null;
			private WhereParameter _InterviewerID_W = null;
			private WhereParameter _InterviewDate_W = null;
			private WhereParameter _InterviewStartTime_W = null;
			private WhereParameter _InterviewEndTime_W = null;
			private WhereParameter _InterviewPlace_W = null;
			private WhereParameter _InterviewStatusID_W = null;
			private WhereParameter _InterviewRating_W = null;
			private WhereParameter _InterviewNotes_W = null;
			private WhereParameter _JobID_W = null;
			private WhereParameter _PositionID_W = null;
			private WhereParameter _CreateDate_W = null;
			private WhereParameter _ModifyDate_W = null;
			private WhereParameter _UpdatedBy_W = null;

			public void WhereClauseReset()
			{
				_InterviewID_W = null;
				_UserID_W = null;
				_CompanyAdvisorID_W = null;
				_InterviewerTypeCode_W = null;
				_InterviewerID_W = null;
				_InterviewDate_W = null;
				_InterviewStartTime_W = null;
				_InterviewEndTime_W = null;
				_InterviewPlace_W = null;
				_InterviewStatusID_W = null;
				_InterviewRating_W = null;
				_InterviewNotes_W = null;
				_JobID_W = null;
				_PositionID_W = null;
				_CreateDate_W = null;
				_ModifyDate_W = null;
				_UpdatedBy_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter InterviewID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewID, Parameters.InterviewID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyAdvisorID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyAdvisorID, Parameters.CompanyAdvisorID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewerTypeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewerTypeCode, Parameters.InterviewerTypeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewerID, Parameters.InterviewerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewDate, Parameters.InterviewDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewStartTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewStartTime, Parameters.InterviewStartTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewEndTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewEndTime, Parameters.InterviewEndTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewPlace
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewPlace, Parameters.InterviewPlace);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewStatusID, Parameters.InterviewStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewRating
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewRating, Parameters.InterviewRating);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewNotes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewNotes, Parameters.InterviewNotes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobID, Parameters.JobID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PositionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PositionID, Parameters.PositionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifyDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UpdatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter InterviewID
		    {
				get
		        {
					if(_InterviewID_W == null)
	        	    {
						_InterviewID_W = TearOff.InterviewID;
					}
					return _InterviewID_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter CompanyAdvisorID
		    {
				get
		        {
					if(_CompanyAdvisorID_W == null)
	        	    {
						_CompanyAdvisorID_W = TearOff.CompanyAdvisorID;
					}
					return _CompanyAdvisorID_W;
				}
			}

			public AggregateParameter InterviewerTypeCode
		    {
				get
		        {
					if(_InterviewerTypeCode_W == null)
	        	    {
						_InterviewerTypeCode_W = TearOff.InterviewerTypeCode;
					}
					return _InterviewerTypeCode_W;
				}
			}

			public AggregateParameter InterviewerID
		    {
				get
		        {
					if(_InterviewerID_W == null)
	        	    {
						_InterviewerID_W = TearOff.InterviewerID;
					}
					return _InterviewerID_W;
				}
			}

			public AggregateParameter InterviewDate
		    {
				get
		        {
					if(_InterviewDate_W == null)
	        	    {
						_InterviewDate_W = TearOff.InterviewDate;
					}
					return _InterviewDate_W;
				}
			}

			public AggregateParameter InterviewStartTime
		    {
				get
		        {
					if(_InterviewStartTime_W == null)
	        	    {
						_InterviewStartTime_W = TearOff.InterviewStartTime;
					}
					return _InterviewStartTime_W;
				}
			}

			public AggregateParameter InterviewEndTime
		    {
				get
		        {
					if(_InterviewEndTime_W == null)
	        	    {
						_InterviewEndTime_W = TearOff.InterviewEndTime;
					}
					return _InterviewEndTime_W;
				}
			}

			public AggregateParameter InterviewPlace
		    {
				get
		        {
					if(_InterviewPlace_W == null)
	        	    {
						_InterviewPlace_W = TearOff.InterviewPlace;
					}
					return _InterviewPlace_W;
				}
			}

			public AggregateParameter InterviewStatusID
		    {
				get
		        {
					if(_InterviewStatusID_W == null)
	        	    {
						_InterviewStatusID_W = TearOff.InterviewStatusID;
					}
					return _InterviewStatusID_W;
				}
			}

			public AggregateParameter InterviewRating
		    {
				get
		        {
					if(_InterviewRating_W == null)
	        	    {
						_InterviewRating_W = TearOff.InterviewRating;
					}
					return _InterviewRating_W;
				}
			}

			public AggregateParameter InterviewNotes
		    {
				get
		        {
					if(_InterviewNotes_W == null)
	        	    {
						_InterviewNotes_W = TearOff.InterviewNotes;
					}
					return _InterviewNotes_W;
				}
			}

			public AggregateParameter JobID
		    {
				get
		        {
					if(_JobID_W == null)
	        	    {
						_JobID_W = TearOff.JobID;
					}
					return _JobID_W;
				}
			}

			public AggregateParameter PositionID
		    {
				get
		        {
					if(_PositionID_W == null)
	        	    {
						_PositionID_W = TearOff.PositionID;
					}
					return _PositionID_W;
				}
			}

			public AggregateParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public AggregateParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public AggregateParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			private AggregateParameter _InterviewID_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _CompanyAdvisorID_W = null;
			private AggregateParameter _InterviewerTypeCode_W = null;
			private AggregateParameter _InterviewerID_W = null;
			private AggregateParameter _InterviewDate_W = null;
			private AggregateParameter _InterviewStartTime_W = null;
			private AggregateParameter _InterviewEndTime_W = null;
			private AggregateParameter _InterviewPlace_W = null;
			private AggregateParameter _InterviewStatusID_W = null;
			private AggregateParameter _InterviewRating_W = null;
			private AggregateParameter _InterviewNotes_W = null;
			private AggregateParameter _JobID_W = null;
			private AggregateParameter _PositionID_W = null;
			private AggregateParameter _CreateDate_W = null;
			private AggregateParameter _ModifyDate_W = null;
			private AggregateParameter _UpdatedBy_W = null;

			public void AggregateClauseReset()
			{
				_InterviewID_W = null;
				_UserID_W = null;
				_CompanyAdvisorID_W = null;
				_InterviewerTypeCode_W = null;
				_InterviewerID_W = null;
				_InterviewDate_W = null;
				_InterviewStartTime_W = null;
				_InterviewEndTime_W = null;
				_InterviewPlace_W = null;
				_InterviewStatusID_W = null;
				_InterviewRating_W = null;
				_InterviewNotes_W = null;
				_JobID_W = null;
				_PositionID_W = null;
				_CreateDate_W = null;
				_ModifyDate_W = null;
				_UpdatedBy_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.InterviewID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.InterviewID);
			p.SourceColumn = ColumnNames.InterviewID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.InterviewID);
			p.SourceColumn = ColumnNames.InterviewID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyAdvisorID);
			p.SourceColumn = ColumnNames.CompanyAdvisorID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewerTypeCode);
			p.SourceColumn = ColumnNames.InterviewerTypeCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewerID);
			p.SourceColumn = ColumnNames.InterviewerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewDate);
			p.SourceColumn = ColumnNames.InterviewDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewStartTime);
			p.SourceColumn = ColumnNames.InterviewStartTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewEndTime);
			p.SourceColumn = ColumnNames.InterviewEndTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewPlace);
			p.SourceColumn = ColumnNames.InterviewPlace;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewStatusID);
			p.SourceColumn = ColumnNames.InterviewStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewRating);
			p.SourceColumn = ColumnNames.InterviewRating;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewNotes);
			p.SourceColumn = ColumnNames.InterviewNotes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobID);
			p.SourceColumn = ColumnNames.JobID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PositionID);
			p.SourceColumn = ColumnNames.PositionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreateDate);
			p.SourceColumn = ColumnNames.CreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifyDate);
			p.SourceColumn = ColumnNames.ModifyDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UpdatedBy);
			p.SourceColumn = ColumnNames.UpdatedBy;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
