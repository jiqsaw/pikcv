
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _InterviewPikcvPoints : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _InterviewPikcvPoints()
		{
			this.QuerySource = "InterviewPikcvPoints";
			this.MappingName = "InterviewPikcvPoints";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InterviewPikcvPointsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int InterviewPikcvPointsID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.InterviewPikcvPointsID, InterviewPikcvPointsID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InterviewPikcvPointsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter InterviewPikcvPointsID
			{
				get
				{
					return new SqlParameter("@InterviewPikcvPointsID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InterviewPikcvID
			{
				get
				{
					return new SqlParameter("@InterviewPikcvID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InterviewPikcvPropertiesID
			{
				get
				{
					return new SqlParameter("@InterviewPikcvPropertiesID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Points
			{
				get
				{
					return new SqlParameter("@Points", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Opinion
			{
				get
				{
					return new SqlParameter("@Opinion", SqlDbType.NVarChar, 1024);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string InterviewPikcvPointsID = "InterviewPikcvPointsID";
            public const string InterviewPikcvID = "InterviewPikcvID";
            public const string InterviewPikcvPropertiesID = "InterviewPikcvPropertiesID";
            public const string Points = "Points";
            public const string Opinion = "Opinion";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InterviewPikcvPointsID] = _InterviewPikcvPoints.PropertyNames.InterviewPikcvPointsID;
					ht[InterviewPikcvID] = _InterviewPikcvPoints.PropertyNames.InterviewPikcvID;
					ht[InterviewPikcvPropertiesID] = _InterviewPikcvPoints.PropertyNames.InterviewPikcvPropertiesID;
					ht[Points] = _InterviewPikcvPoints.PropertyNames.Points;
					ht[Opinion] = _InterviewPikcvPoints.PropertyNames.Opinion;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string InterviewPikcvPointsID = "InterviewPikcvPointsID";
            public const string InterviewPikcvID = "InterviewPikcvID";
            public const string InterviewPikcvPropertiesID = "InterviewPikcvPropertiesID";
            public const string Points = "Points";
            public const string Opinion = "Opinion";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InterviewPikcvPointsID] = _InterviewPikcvPoints.ColumnNames.InterviewPikcvPointsID;
					ht[InterviewPikcvID] = _InterviewPikcvPoints.ColumnNames.InterviewPikcvID;
					ht[InterviewPikcvPropertiesID] = _InterviewPikcvPoints.ColumnNames.InterviewPikcvPropertiesID;
					ht[Points] = _InterviewPikcvPoints.ColumnNames.Points;
					ht[Opinion] = _InterviewPikcvPoints.ColumnNames.Opinion;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string InterviewPikcvPointsID = "s_InterviewPikcvPointsID";
            public const string InterviewPikcvID = "s_InterviewPikcvID";
            public const string InterviewPikcvPropertiesID = "s_InterviewPikcvPropertiesID";
            public const string Points = "s_Points";
            public const string Opinion = "s_Opinion";

		}
		#endregion		
		
		#region Properties
	
		public virtual int InterviewPikcvPointsID
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewPikcvPointsID);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewPikcvPointsID, value);
			}
		}

		public virtual int InterviewPikcvID
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewPikcvID);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewPikcvID, value);
			}
		}

		public virtual int InterviewPikcvPropertiesID
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewPikcvPropertiesID);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewPikcvPropertiesID, value);
			}
		}

		public virtual int Points
	    {
			get
	        {
				return base.Getint(ColumnNames.Points);
			}
			set
	        {
				base.Setint(ColumnNames.Points, value);
			}
		}

		public virtual string Opinion
	    {
			get
	        {
				return base.Getstring(ColumnNames.Opinion);
			}
			set
	        {
				base.Setstring(ColumnNames.Opinion, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_InterviewPikcvPointsID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewPikcvPointsID) ? string.Empty : base.GetintAsString(ColumnNames.InterviewPikcvPointsID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewPikcvPointsID);
				else
					this.InterviewPikcvPointsID = base.SetintAsString(ColumnNames.InterviewPikcvPointsID, value);
			}
		}

		public virtual string s_InterviewPikcvID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewPikcvID) ? string.Empty : base.GetintAsString(ColumnNames.InterviewPikcvID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewPikcvID);
				else
					this.InterviewPikcvID = base.SetintAsString(ColumnNames.InterviewPikcvID, value);
			}
		}

		public virtual string s_InterviewPikcvPropertiesID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewPikcvPropertiesID) ? string.Empty : base.GetintAsString(ColumnNames.InterviewPikcvPropertiesID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewPikcvPropertiesID);
				else
					this.InterviewPikcvPropertiesID = base.SetintAsString(ColumnNames.InterviewPikcvPropertiesID, value);
			}
		}

		public virtual string s_Points
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Points) ? string.Empty : base.GetintAsString(ColumnNames.Points);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Points);
				else
					this.Points = base.SetintAsString(ColumnNames.Points, value);
			}
		}

		public virtual string s_Opinion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Opinion) ? string.Empty : base.GetstringAsString(ColumnNames.Opinion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Opinion);
				else
					this.Opinion = base.SetstringAsString(ColumnNames.Opinion, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter InterviewPikcvPointsID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewPikcvPointsID, Parameters.InterviewPikcvPointsID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewPikcvID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewPikcvID, Parameters.InterviewPikcvID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewPikcvPropertiesID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewPikcvPropertiesID, Parameters.InterviewPikcvPropertiesID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Points
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Points, Parameters.Points);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Opinion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Opinion, Parameters.Opinion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter InterviewPikcvPointsID
		    {
				get
		        {
					if(_InterviewPikcvPointsID_W == null)
	        	    {
						_InterviewPikcvPointsID_W = TearOff.InterviewPikcvPointsID;
					}
					return _InterviewPikcvPointsID_W;
				}
			}

			public WhereParameter InterviewPikcvID
		    {
				get
		        {
					if(_InterviewPikcvID_W == null)
	        	    {
						_InterviewPikcvID_W = TearOff.InterviewPikcvID;
					}
					return _InterviewPikcvID_W;
				}
			}

			public WhereParameter InterviewPikcvPropertiesID
		    {
				get
		        {
					if(_InterviewPikcvPropertiesID_W == null)
	        	    {
						_InterviewPikcvPropertiesID_W = TearOff.InterviewPikcvPropertiesID;
					}
					return _InterviewPikcvPropertiesID_W;
				}
			}

			public WhereParameter Points
		    {
				get
		        {
					if(_Points_W == null)
	        	    {
						_Points_W = TearOff.Points;
					}
					return _Points_W;
				}
			}

			public WhereParameter Opinion
		    {
				get
		        {
					if(_Opinion_W == null)
	        	    {
						_Opinion_W = TearOff.Opinion;
					}
					return _Opinion_W;
				}
			}

			private WhereParameter _InterviewPikcvPointsID_W = null;
			private WhereParameter _InterviewPikcvID_W = null;
			private WhereParameter _InterviewPikcvPropertiesID_W = null;
			private WhereParameter _Points_W = null;
			private WhereParameter _Opinion_W = null;

			public void WhereClauseReset()
			{
				_InterviewPikcvPointsID_W = null;
				_InterviewPikcvID_W = null;
				_InterviewPikcvPropertiesID_W = null;
				_Points_W = null;
				_Opinion_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter InterviewPikcvPointsID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewPikcvPointsID, Parameters.InterviewPikcvPointsID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewPikcvID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewPikcvID, Parameters.InterviewPikcvID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewPikcvPropertiesID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewPikcvPropertiesID, Parameters.InterviewPikcvPropertiesID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Points
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Points, Parameters.Points);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Opinion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Opinion, Parameters.Opinion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter InterviewPikcvPointsID
		    {
				get
		        {
					if(_InterviewPikcvPointsID_W == null)
	        	    {
						_InterviewPikcvPointsID_W = TearOff.InterviewPikcvPointsID;
					}
					return _InterviewPikcvPointsID_W;
				}
			}

			public AggregateParameter InterviewPikcvID
		    {
				get
		        {
					if(_InterviewPikcvID_W == null)
	        	    {
						_InterviewPikcvID_W = TearOff.InterviewPikcvID;
					}
					return _InterviewPikcvID_W;
				}
			}

			public AggregateParameter InterviewPikcvPropertiesID
		    {
				get
		        {
					if(_InterviewPikcvPropertiesID_W == null)
	        	    {
						_InterviewPikcvPropertiesID_W = TearOff.InterviewPikcvPropertiesID;
					}
					return _InterviewPikcvPropertiesID_W;
				}
			}

			public AggregateParameter Points
		    {
				get
		        {
					if(_Points_W == null)
	        	    {
						_Points_W = TearOff.Points;
					}
					return _Points_W;
				}
			}

			public AggregateParameter Opinion
		    {
				get
		        {
					if(_Opinion_W == null)
	        	    {
						_Opinion_W = TearOff.Opinion;
					}
					return _Opinion_W;
				}
			}

			private AggregateParameter _InterviewPikcvPointsID_W = null;
			private AggregateParameter _InterviewPikcvID_W = null;
			private AggregateParameter _InterviewPikcvPropertiesID_W = null;
			private AggregateParameter _Points_W = null;
			private AggregateParameter _Opinion_W = null;

			public void AggregateClauseReset()
			{
				_InterviewPikcvPointsID_W = null;
				_InterviewPikcvID_W = null;
				_InterviewPikcvPropertiesID_W = null;
				_Points_W = null;
				_Opinion_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewPikcvPointsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.InterviewPikcvPointsID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewPikcvPointsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewPikcvPointsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.InterviewPikcvPointsID);
			p.SourceColumn = ColumnNames.InterviewPikcvPointsID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.InterviewPikcvPointsID);
			p.SourceColumn = ColumnNames.InterviewPikcvPointsID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewPikcvID);
			p.SourceColumn = ColumnNames.InterviewPikcvID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewPikcvPropertiesID);
			p.SourceColumn = ColumnNames.InterviewPikcvPropertiesID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Points);
			p.SourceColumn = ColumnNames.Points;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Opinion);
			p.SourceColumn = ColumnNames.Opinion;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
