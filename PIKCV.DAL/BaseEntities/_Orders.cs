
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _Orders : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _Orders()
		{
			this.QuerySource = "Orders";
			this.MappingName = "Orders";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_OrdersLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int OrderID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.OrderID, OrderID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_OrdersLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter OrderID
			{
				get
				{
					return new SqlParameter("@OrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyID
			{
				get
				{
					return new SqlParameter("@CompanyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrderDate
			{
				get
				{
					return new SqlParameter("@OrderDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter OrderTypeID
			{
				get
				{
					return new SqlParameter("@OrderTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ProcessTypeCode
			{
				get
				{
					return new SqlParameter("@ProcessTypeCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TotalCreditsUsed
			{
				get
				{
					return new SqlParameter("@TotalCreditsUsed", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Price
			{
				get
				{
					return new SqlParameter("@Price", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter IsConfirmed
			{
				get
				{
					return new SqlParameter("@IsConfirmed", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string OrderID = "OrderID";
            public const string CompanyID = "CompanyID";
            public const string OrderDate = "OrderDate";
            public const string OrderTypeID = "OrderTypeID";
            public const string ProcessTypeCode = "ProcessTypeCode";
            public const string TotalCreditsUsed = "TotalCreditsUsed";
            public const string Price = "Price";
            public const string IsConfirmed = "IsConfirmed";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[OrderID] = _Orders.PropertyNames.OrderID;
					ht[CompanyID] = _Orders.PropertyNames.CompanyID;
					ht[OrderDate] = _Orders.PropertyNames.OrderDate;
					ht[OrderTypeID] = _Orders.PropertyNames.OrderTypeID;
					ht[ProcessTypeCode] = _Orders.PropertyNames.ProcessTypeCode;
					ht[TotalCreditsUsed] = _Orders.PropertyNames.TotalCreditsUsed;
					ht[Price] = _Orders.PropertyNames.Price;
					ht[IsConfirmed] = _Orders.PropertyNames.IsConfirmed;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string OrderID = "OrderID";
            public const string CompanyID = "CompanyID";
            public const string OrderDate = "OrderDate";
            public const string OrderTypeID = "OrderTypeID";
            public const string ProcessTypeCode = "ProcessTypeCode";
            public const string TotalCreditsUsed = "TotalCreditsUsed";
            public const string Price = "Price";
            public const string IsConfirmed = "IsConfirmed";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[OrderID] = _Orders.ColumnNames.OrderID;
					ht[CompanyID] = _Orders.ColumnNames.CompanyID;
					ht[OrderDate] = _Orders.ColumnNames.OrderDate;
					ht[OrderTypeID] = _Orders.ColumnNames.OrderTypeID;
					ht[ProcessTypeCode] = _Orders.ColumnNames.ProcessTypeCode;
					ht[TotalCreditsUsed] = _Orders.ColumnNames.TotalCreditsUsed;
					ht[Price] = _Orders.ColumnNames.Price;
					ht[IsConfirmed] = _Orders.ColumnNames.IsConfirmed;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string OrderID = "s_OrderID";
            public const string CompanyID = "s_CompanyID";
            public const string OrderDate = "s_OrderDate";
            public const string OrderTypeID = "s_OrderTypeID";
            public const string ProcessTypeCode = "s_ProcessTypeCode";
            public const string TotalCreditsUsed = "s_TotalCreditsUsed";
            public const string Price = "s_Price";
            public const string IsConfirmed = "s_IsConfirmed";

		}
		#endregion		
		
		#region Properties
	
		public virtual int OrderID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderID);
			}
			set
	        {
				base.Setint(ColumnNames.OrderID, value);
			}
		}

		public virtual int CompanyID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyID, value);
			}
		}

		public virtual DateTime OrderDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.OrderDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.OrderDate, value);
			}
		}

		public virtual int OrderTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.OrderTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.OrderTypeID, value);
			}
		}

		public virtual int ProcessTypeCode
	    {
			get
	        {
				return base.Getint(ColumnNames.ProcessTypeCode);
			}
			set
	        {
				base.Setint(ColumnNames.ProcessTypeCode, value);
			}
		}

		public virtual int TotalCreditsUsed
	    {
			get
	        {
				return base.Getint(ColumnNames.TotalCreditsUsed);
			}
			set
	        {
				base.Setint(ColumnNames.TotalCreditsUsed, value);
			}
		}

		public virtual double Price
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Price);
			}
			set
	        {
				base.Setdouble(ColumnNames.Price, value);
			}
		}

		public virtual bool IsConfirmed
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsConfirmed);
			}
			set
	        {
				base.Setbool(ColumnNames.IsConfirmed, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_OrderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderID) ? string.Empty : base.GetintAsString(ColumnNames.OrderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderID);
				else
					this.OrderID = base.SetintAsString(ColumnNames.OrderID, value);
			}
		}

		public virtual string s_CompanyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyID);
				else
					this.CompanyID = base.SetintAsString(ColumnNames.CompanyID, value);
			}
		}

		public virtual string s_OrderDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.OrderDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderDate);
				else
					this.OrderDate = base.SetDateTimeAsString(ColumnNames.OrderDate, value);
			}
		}

		public virtual string s_OrderTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OrderTypeID) ? string.Empty : base.GetintAsString(ColumnNames.OrderTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderTypeID);
				else
					this.OrderTypeID = base.SetintAsString(ColumnNames.OrderTypeID, value);
			}
		}

		public virtual string s_ProcessTypeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ProcessTypeCode) ? string.Empty : base.GetintAsString(ColumnNames.ProcessTypeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProcessTypeCode);
				else
					this.ProcessTypeCode = base.SetintAsString(ColumnNames.ProcessTypeCode, value);
			}
		}

		public virtual string s_TotalCreditsUsed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TotalCreditsUsed) ? string.Empty : base.GetintAsString(ColumnNames.TotalCreditsUsed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TotalCreditsUsed);
				else
					this.TotalCreditsUsed = base.SetintAsString(ColumnNames.TotalCreditsUsed, value);
			}
		}

		public virtual string s_Price
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Price) ? string.Empty : base.GetdoubleAsString(ColumnNames.Price);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Price);
				else
					this.Price = base.SetdoubleAsString(ColumnNames.Price, value);
			}
		}

		public virtual string s_IsConfirmed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsConfirmed) ? string.Empty : base.GetboolAsString(ColumnNames.IsConfirmed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsConfirmed);
				else
					this.IsConfirmed = base.SetboolAsString(ColumnNames.IsConfirmed, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter OrderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderDate, Parameters.OrderDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OrderTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OrderTypeID, Parameters.OrderTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ProcessTypeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ProcessTypeCode, Parameters.ProcessTypeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TotalCreditsUsed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TotalCreditsUsed, Parameters.TotalCreditsUsed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Price
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Price, Parameters.Price);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsConfirmed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsConfirmed, Parameters.IsConfirmed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public WhereParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public WhereParameter OrderDate
		    {
				get
		        {
					if(_OrderDate_W == null)
	        	    {
						_OrderDate_W = TearOff.OrderDate;
					}
					return _OrderDate_W;
				}
			}

			public WhereParameter OrderTypeID
		    {
				get
		        {
					if(_OrderTypeID_W == null)
	        	    {
						_OrderTypeID_W = TearOff.OrderTypeID;
					}
					return _OrderTypeID_W;
				}
			}

			public WhereParameter ProcessTypeCode
		    {
				get
		        {
					if(_ProcessTypeCode_W == null)
	        	    {
						_ProcessTypeCode_W = TearOff.ProcessTypeCode;
					}
					return _ProcessTypeCode_W;
				}
			}

			public WhereParameter TotalCreditsUsed
		    {
				get
		        {
					if(_TotalCreditsUsed_W == null)
	        	    {
						_TotalCreditsUsed_W = TearOff.TotalCreditsUsed;
					}
					return _TotalCreditsUsed_W;
				}
			}

			public WhereParameter Price
		    {
				get
		        {
					if(_Price_W == null)
	        	    {
						_Price_W = TearOff.Price;
					}
					return _Price_W;
				}
			}

			public WhereParameter IsConfirmed
		    {
				get
		        {
					if(_IsConfirmed_W == null)
	        	    {
						_IsConfirmed_W = TearOff.IsConfirmed;
					}
					return _IsConfirmed_W;
				}
			}

			private WhereParameter _OrderID_W = null;
			private WhereParameter _CompanyID_W = null;
			private WhereParameter _OrderDate_W = null;
			private WhereParameter _OrderTypeID_W = null;
			private WhereParameter _ProcessTypeCode_W = null;
			private WhereParameter _TotalCreditsUsed_W = null;
			private WhereParameter _Price_W = null;
			private WhereParameter _IsConfirmed_W = null;

			public void WhereClauseReset()
			{
				_OrderID_W = null;
				_CompanyID_W = null;
				_OrderDate_W = null;
				_OrderTypeID_W = null;
				_ProcessTypeCode_W = null;
				_TotalCreditsUsed_W = null;
				_Price_W = null;
				_IsConfirmed_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter OrderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderID, Parameters.OrderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderDate, Parameters.OrderDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OrderTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OrderTypeID, Parameters.OrderTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ProcessTypeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ProcessTypeCode, Parameters.ProcessTypeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TotalCreditsUsed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalCreditsUsed, Parameters.TotalCreditsUsed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Price
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Price, Parameters.Price);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsConfirmed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsConfirmed, Parameters.IsConfirmed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter OrderID
		    {
				get
		        {
					if(_OrderID_W == null)
	        	    {
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public AggregateParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public AggregateParameter OrderDate
		    {
				get
		        {
					if(_OrderDate_W == null)
	        	    {
						_OrderDate_W = TearOff.OrderDate;
					}
					return _OrderDate_W;
				}
			}

			public AggregateParameter OrderTypeID
		    {
				get
		        {
					if(_OrderTypeID_W == null)
	        	    {
						_OrderTypeID_W = TearOff.OrderTypeID;
					}
					return _OrderTypeID_W;
				}
			}

			public AggregateParameter ProcessTypeCode
		    {
				get
		        {
					if(_ProcessTypeCode_W == null)
	        	    {
						_ProcessTypeCode_W = TearOff.ProcessTypeCode;
					}
					return _ProcessTypeCode_W;
				}
			}

			public AggregateParameter TotalCreditsUsed
		    {
				get
		        {
					if(_TotalCreditsUsed_W == null)
	        	    {
						_TotalCreditsUsed_W = TearOff.TotalCreditsUsed;
					}
					return _TotalCreditsUsed_W;
				}
			}

			public AggregateParameter Price
		    {
				get
		        {
					if(_Price_W == null)
	        	    {
						_Price_W = TearOff.Price;
					}
					return _Price_W;
				}
			}

			public AggregateParameter IsConfirmed
		    {
				get
		        {
					if(_IsConfirmed_W == null)
	        	    {
						_IsConfirmed_W = TearOff.IsConfirmed;
					}
					return _IsConfirmed_W;
				}
			}

			private AggregateParameter _OrderID_W = null;
			private AggregateParameter _CompanyID_W = null;
			private AggregateParameter _OrderDate_W = null;
			private AggregateParameter _OrderTypeID_W = null;
			private AggregateParameter _ProcessTypeCode_W = null;
			private AggregateParameter _TotalCreditsUsed_W = null;
			private AggregateParameter _Price_W = null;
			private AggregateParameter _IsConfirmed_W = null;

			public void AggregateClauseReset()
			{
				_OrderID_W = null;
				_CompanyID_W = null;
				_OrderDate_W = null;
				_OrderTypeID_W = null;
				_ProcessTypeCode_W = null;
				_TotalCreditsUsed_W = null;
				_Price_W = null;
				_IsConfirmed_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrdersInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.OrderID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrdersUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_OrdersDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.OrderID);
			p.SourceColumn = ColumnNames.OrderID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.OrderID);
			p.SourceColumn = ColumnNames.OrderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyID);
			p.SourceColumn = ColumnNames.CompanyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderDate);
			p.SourceColumn = ColumnNames.OrderDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OrderTypeID);
			p.SourceColumn = ColumnNames.OrderTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ProcessTypeCode);
			p.SourceColumn = ColumnNames.ProcessTypeCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TotalCreditsUsed);
			p.SourceColumn = ColumnNames.TotalCreditsUsed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Price);
			p.SourceColumn = ColumnNames.Price;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsConfirmed);
			p.SourceColumn = ColumnNames.IsConfirmed;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
