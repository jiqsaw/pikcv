
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _InterviewStatusChanges : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _InterviewStatusChanges()
		{
			this.QuerySource = "InterviewStatusChanges";
			this.MappingName = "InterviewStatusChanges";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InterviewStatusChangesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int InterviewStatusChangeID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.InterviewStatusChangeID, InterviewStatusChangeID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InterviewStatusChangesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter InterviewStatusChangeID
			{
				get
				{
					return new SqlParameter("@InterviewStatusChangeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InterviewID
			{
				get
				{
					return new SqlParameter("@InterviewID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StatusChageDate
			{
				get
				{
					return new SqlParameter("@StatusChageDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter InterviewStatusID
			{
				get
				{
					return new SqlParameter("@InterviewStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StatusTitle
			{
				get
				{
					return new SqlParameter("@StatusTitle", SqlDbType.NVarChar, 32);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string InterviewStatusChangeID = "InterviewStatusChangeID";
            public const string InterviewID = "InterviewID";
            public const string StatusChageDate = "StatusChageDate";
            public const string InterviewStatusID = "InterviewStatusID";
            public const string StatusTitle = "StatusTitle";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InterviewStatusChangeID] = _InterviewStatusChanges.PropertyNames.InterviewStatusChangeID;
					ht[InterviewID] = _InterviewStatusChanges.PropertyNames.InterviewID;
					ht[StatusChageDate] = _InterviewStatusChanges.PropertyNames.StatusChageDate;
					ht[InterviewStatusID] = _InterviewStatusChanges.PropertyNames.InterviewStatusID;
					ht[StatusTitle] = _InterviewStatusChanges.PropertyNames.StatusTitle;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string InterviewStatusChangeID = "InterviewStatusChangeID";
            public const string InterviewID = "InterviewID";
            public const string StatusChageDate = "StatusChageDate";
            public const string InterviewStatusID = "InterviewStatusID";
            public const string StatusTitle = "StatusTitle";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InterviewStatusChangeID] = _InterviewStatusChanges.ColumnNames.InterviewStatusChangeID;
					ht[InterviewID] = _InterviewStatusChanges.ColumnNames.InterviewID;
					ht[StatusChageDate] = _InterviewStatusChanges.ColumnNames.StatusChageDate;
					ht[InterviewStatusID] = _InterviewStatusChanges.ColumnNames.InterviewStatusID;
					ht[StatusTitle] = _InterviewStatusChanges.ColumnNames.StatusTitle;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string InterviewStatusChangeID = "s_InterviewStatusChangeID";
            public const string InterviewID = "s_InterviewID";
            public const string StatusChageDate = "s_StatusChageDate";
            public const string InterviewStatusID = "s_InterviewStatusID";
            public const string StatusTitle = "s_StatusTitle";

		}
		#endregion		
		
		#region Properties
	
		public virtual int InterviewStatusChangeID
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewStatusChangeID);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewStatusChangeID, value);
			}
		}

		public virtual int InterviewID
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewID);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewID, value);
			}
		}

		public virtual DateTime StatusChageDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.StatusChageDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.StatusChageDate, value);
			}
		}

		public virtual int InterviewStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewStatusID, value);
			}
		}

		public virtual string StatusTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.StatusTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.StatusTitle, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_InterviewStatusChangeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewStatusChangeID) ? string.Empty : base.GetintAsString(ColumnNames.InterviewStatusChangeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewStatusChangeID);
				else
					this.InterviewStatusChangeID = base.SetintAsString(ColumnNames.InterviewStatusChangeID, value);
			}
		}

		public virtual string s_InterviewID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewID) ? string.Empty : base.GetintAsString(ColumnNames.InterviewID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewID);
				else
					this.InterviewID = base.SetintAsString(ColumnNames.InterviewID, value);
			}
		}

		public virtual string s_StatusChageDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StatusChageDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StatusChageDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StatusChageDate);
				else
					this.StatusChageDate = base.SetDateTimeAsString(ColumnNames.StatusChageDate, value);
			}
		}

		public virtual string s_InterviewStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewStatusID) ? string.Empty : base.GetintAsString(ColumnNames.InterviewStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewStatusID);
				else
					this.InterviewStatusID = base.SetintAsString(ColumnNames.InterviewStatusID, value);
			}
		}

		public virtual string s_StatusTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StatusTitle) ? string.Empty : base.GetstringAsString(ColumnNames.StatusTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StatusTitle);
				else
					this.StatusTitle = base.SetstringAsString(ColumnNames.StatusTitle, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter InterviewStatusChangeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewStatusChangeID, Parameters.InterviewStatusChangeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewID, Parameters.InterviewID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StatusChageDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StatusChageDate, Parameters.StatusChageDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewStatusID, Parameters.InterviewStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StatusTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StatusTitle, Parameters.StatusTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter InterviewStatusChangeID
		    {
				get
		        {
					if(_InterviewStatusChangeID_W == null)
	        	    {
						_InterviewStatusChangeID_W = TearOff.InterviewStatusChangeID;
					}
					return _InterviewStatusChangeID_W;
				}
			}

			public WhereParameter InterviewID
		    {
				get
		        {
					if(_InterviewID_W == null)
	        	    {
						_InterviewID_W = TearOff.InterviewID;
					}
					return _InterviewID_W;
				}
			}

			public WhereParameter StatusChageDate
		    {
				get
		        {
					if(_StatusChageDate_W == null)
	        	    {
						_StatusChageDate_W = TearOff.StatusChageDate;
					}
					return _StatusChageDate_W;
				}
			}

			public WhereParameter InterviewStatusID
		    {
				get
		        {
					if(_InterviewStatusID_W == null)
	        	    {
						_InterviewStatusID_W = TearOff.InterviewStatusID;
					}
					return _InterviewStatusID_W;
				}
			}

			public WhereParameter StatusTitle
		    {
				get
		        {
					if(_StatusTitle_W == null)
	        	    {
						_StatusTitle_W = TearOff.StatusTitle;
					}
					return _StatusTitle_W;
				}
			}

			private WhereParameter _InterviewStatusChangeID_W = null;
			private WhereParameter _InterviewID_W = null;
			private WhereParameter _StatusChageDate_W = null;
			private WhereParameter _InterviewStatusID_W = null;
			private WhereParameter _StatusTitle_W = null;

			public void WhereClauseReset()
			{
				_InterviewStatusChangeID_W = null;
				_InterviewID_W = null;
				_StatusChageDate_W = null;
				_InterviewStatusID_W = null;
				_StatusTitle_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter InterviewStatusChangeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewStatusChangeID, Parameters.InterviewStatusChangeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewID, Parameters.InterviewID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StatusChageDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StatusChageDate, Parameters.StatusChageDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewStatusID, Parameters.InterviewStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StatusTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StatusTitle, Parameters.StatusTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter InterviewStatusChangeID
		    {
				get
		        {
					if(_InterviewStatusChangeID_W == null)
	        	    {
						_InterviewStatusChangeID_W = TearOff.InterviewStatusChangeID;
					}
					return _InterviewStatusChangeID_W;
				}
			}

			public AggregateParameter InterviewID
		    {
				get
		        {
					if(_InterviewID_W == null)
	        	    {
						_InterviewID_W = TearOff.InterviewID;
					}
					return _InterviewID_W;
				}
			}

			public AggregateParameter StatusChageDate
		    {
				get
		        {
					if(_StatusChageDate_W == null)
	        	    {
						_StatusChageDate_W = TearOff.StatusChageDate;
					}
					return _StatusChageDate_W;
				}
			}

			public AggregateParameter InterviewStatusID
		    {
				get
		        {
					if(_InterviewStatusID_W == null)
	        	    {
						_InterviewStatusID_W = TearOff.InterviewStatusID;
					}
					return _InterviewStatusID_W;
				}
			}

			public AggregateParameter StatusTitle
		    {
				get
		        {
					if(_StatusTitle_W == null)
	        	    {
						_StatusTitle_W = TearOff.StatusTitle;
					}
					return _StatusTitle_W;
				}
			}

			private AggregateParameter _InterviewStatusChangeID_W = null;
			private AggregateParameter _InterviewID_W = null;
			private AggregateParameter _StatusChageDate_W = null;
			private AggregateParameter _InterviewStatusID_W = null;
			private AggregateParameter _StatusTitle_W = null;

			public void AggregateClauseReset()
			{
				_InterviewStatusChangeID_W = null;
				_InterviewID_W = null;
				_StatusChageDate_W = null;
				_InterviewStatusID_W = null;
				_StatusTitle_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewStatusChangesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.InterviewStatusChangeID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewStatusChangesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewStatusChangesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.InterviewStatusChangeID);
			p.SourceColumn = ColumnNames.InterviewStatusChangeID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.InterviewStatusChangeID);
			p.SourceColumn = ColumnNames.InterviewStatusChangeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewID);
			p.SourceColumn = ColumnNames.InterviewID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StatusChageDate);
			p.SourceColumn = ColumnNames.StatusChageDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewStatusID);
			p.SourceColumn = ColumnNames.InterviewStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StatusTitle);
			p.SourceColumn = ColumnNames.StatusTitle;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
