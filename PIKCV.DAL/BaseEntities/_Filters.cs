
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _Filters : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _Filters()
		{
			this.QuerySource = "Filters";
			this.MappingName = "Filters";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_FiltersLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int FilterID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.FilterID, FilterID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_FiltersLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter FilterID
			{
				get
				{
					return new SqlParameter("@FilterID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FilterTypeCode
			{
				get
				{
					return new SqlParameter("@FilterTypeCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FilterOwnerTypeCode
			{
				get
				{
					return new SqlParameter("@FilterOwnerTypeCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FilterOwnerID
			{
				get
				{
					return new SqlParameter("@FilterOwnerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FilterName
			{
				get
				{
					return new SqlParameter("@FilterName", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter FilterValue
			{
				get
				{
					return new SqlParameter("@FilterValue", SqlDbType.Text, 2147483647);
				}
			}
			
			public static SqlParameter CreateDate
			{
				get
				{
					return new SqlParameter("@CreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifyDate
			{
				get
				{
					return new SqlParameter("@ModifyDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IsDeleted
			{
				get
				{
					return new SqlParameter("@IsDeleted", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string FilterID = "FilterID";
            public const string FilterTypeCode = "FilterTypeCode";
            public const string FilterOwnerTypeCode = "FilterOwnerTypeCode";
            public const string FilterOwnerID = "FilterOwnerID";
            public const string FilterName = "FilterName";
            public const string FilterValue = "FilterValue";
            public const string CreateDate = "CreateDate";
            public const string ModifyDate = "ModifyDate";
            public const string IsDeleted = "IsDeleted";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[FilterID] = _Filters.PropertyNames.FilterID;
					ht[FilterTypeCode] = _Filters.PropertyNames.FilterTypeCode;
					ht[FilterOwnerTypeCode] = _Filters.PropertyNames.FilterOwnerTypeCode;
					ht[FilterOwnerID] = _Filters.PropertyNames.FilterOwnerID;
					ht[FilterName] = _Filters.PropertyNames.FilterName;
					ht[FilterValue] = _Filters.PropertyNames.FilterValue;
					ht[CreateDate] = _Filters.PropertyNames.CreateDate;
					ht[ModifyDate] = _Filters.PropertyNames.ModifyDate;
					ht[IsDeleted] = _Filters.PropertyNames.IsDeleted;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string FilterID = "FilterID";
            public const string FilterTypeCode = "FilterTypeCode";
            public const string FilterOwnerTypeCode = "FilterOwnerTypeCode";
            public const string FilterOwnerID = "FilterOwnerID";
            public const string FilterName = "FilterName";
            public const string FilterValue = "FilterValue";
            public const string CreateDate = "CreateDate";
            public const string ModifyDate = "ModifyDate";
            public const string IsDeleted = "IsDeleted";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[FilterID] = _Filters.ColumnNames.FilterID;
					ht[FilterTypeCode] = _Filters.ColumnNames.FilterTypeCode;
					ht[FilterOwnerTypeCode] = _Filters.ColumnNames.FilterOwnerTypeCode;
					ht[FilterOwnerID] = _Filters.ColumnNames.FilterOwnerID;
					ht[FilterName] = _Filters.ColumnNames.FilterName;
					ht[FilterValue] = _Filters.ColumnNames.FilterValue;
					ht[CreateDate] = _Filters.ColumnNames.CreateDate;
					ht[ModifyDate] = _Filters.ColumnNames.ModifyDate;
					ht[IsDeleted] = _Filters.ColumnNames.IsDeleted;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string FilterID = "s_FilterID";
            public const string FilterTypeCode = "s_FilterTypeCode";
            public const string FilterOwnerTypeCode = "s_FilterOwnerTypeCode";
            public const string FilterOwnerID = "s_FilterOwnerID";
            public const string FilterName = "s_FilterName";
            public const string FilterValue = "s_FilterValue";
            public const string CreateDate = "s_CreateDate";
            public const string ModifyDate = "s_ModifyDate";
            public const string IsDeleted = "s_IsDeleted";

		}
		#endregion		
		
		#region Properties
	
		public virtual int FilterID
	    {
			get
	        {
				return base.Getint(ColumnNames.FilterID);
			}
			set
	        {
				base.Setint(ColumnNames.FilterID, value);
			}
		}

		public virtual int FilterTypeCode
	    {
			get
	        {
				return base.Getint(ColumnNames.FilterTypeCode);
			}
			set
	        {
				base.Setint(ColumnNames.FilterTypeCode, value);
			}
		}

		public virtual int FilterOwnerTypeCode
	    {
			get
	        {
				return base.Getint(ColumnNames.FilterOwnerTypeCode);
			}
			set
	        {
				base.Setint(ColumnNames.FilterOwnerTypeCode, value);
			}
		}

		public virtual int FilterOwnerID
	    {
			get
	        {
				return base.Getint(ColumnNames.FilterOwnerID);
			}
			set
	        {
				base.Setint(ColumnNames.FilterOwnerID, value);
			}
		}

		public virtual string FilterName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FilterName);
			}
			set
	        {
				base.Setstring(ColumnNames.FilterName, value);
			}
		}

		public virtual string FilterValue
	    {
			get
	        {
				return base.Getstring(ColumnNames.FilterValue);
			}
			set
	        {
				base.Setstring(ColumnNames.FilterValue, value);
			}
		}

		public virtual DateTime CreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreateDate, value);
			}
		}

		public virtual DateTime ModifyDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifyDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifyDate, value);
			}
		}

		public virtual bool IsDeleted
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDeleted);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDeleted, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_FilterID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FilterID) ? string.Empty : base.GetintAsString(ColumnNames.FilterID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FilterID);
				else
					this.FilterID = base.SetintAsString(ColumnNames.FilterID, value);
			}
		}

		public virtual string s_FilterTypeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FilterTypeCode) ? string.Empty : base.GetintAsString(ColumnNames.FilterTypeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FilterTypeCode);
				else
					this.FilterTypeCode = base.SetintAsString(ColumnNames.FilterTypeCode, value);
			}
		}

		public virtual string s_FilterOwnerTypeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FilterOwnerTypeCode) ? string.Empty : base.GetintAsString(ColumnNames.FilterOwnerTypeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FilterOwnerTypeCode);
				else
					this.FilterOwnerTypeCode = base.SetintAsString(ColumnNames.FilterOwnerTypeCode, value);
			}
		}

		public virtual string s_FilterOwnerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FilterOwnerID) ? string.Empty : base.GetintAsString(ColumnNames.FilterOwnerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FilterOwnerID);
				else
					this.FilterOwnerID = base.SetintAsString(ColumnNames.FilterOwnerID, value);
			}
		}

		public virtual string s_FilterName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FilterName) ? string.Empty : base.GetstringAsString(ColumnNames.FilterName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FilterName);
				else
					this.FilterName = base.SetstringAsString(ColumnNames.FilterName, value);
			}
		}

		public virtual string s_FilterValue
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FilterValue) ? string.Empty : base.GetstringAsString(ColumnNames.FilterValue);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FilterValue);
				else
					this.FilterValue = base.SetstringAsString(ColumnNames.FilterValue, value);
			}
		}

		public virtual string s_CreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreateDate);
				else
					this.CreateDate = base.SetDateTimeAsString(ColumnNames.CreateDate, value);
			}
		}

		public virtual string s_ModifyDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifyDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifyDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifyDate);
				else
					this.ModifyDate = base.SetDateTimeAsString(ColumnNames.ModifyDate, value);
			}
		}

		public virtual string s_IsDeleted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDeleted) ? string.Empty : base.GetboolAsString(ColumnNames.IsDeleted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDeleted);
				else
					this.IsDeleted = base.SetboolAsString(ColumnNames.IsDeleted, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter FilterID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FilterID, Parameters.FilterID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FilterTypeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FilterTypeCode, Parameters.FilterTypeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FilterOwnerTypeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FilterOwnerTypeCode, Parameters.FilterOwnerTypeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FilterOwnerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FilterOwnerID, Parameters.FilterOwnerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FilterName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FilterName, Parameters.FilterName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FilterValue
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FilterValue, Parameters.FilterValue);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifyDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDeleted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter FilterID
		    {
				get
		        {
					if(_FilterID_W == null)
	        	    {
						_FilterID_W = TearOff.FilterID;
					}
					return _FilterID_W;
				}
			}

			public WhereParameter FilterTypeCode
		    {
				get
		        {
					if(_FilterTypeCode_W == null)
	        	    {
						_FilterTypeCode_W = TearOff.FilterTypeCode;
					}
					return _FilterTypeCode_W;
				}
			}

			public WhereParameter FilterOwnerTypeCode
		    {
				get
		        {
					if(_FilterOwnerTypeCode_W == null)
	        	    {
						_FilterOwnerTypeCode_W = TearOff.FilterOwnerTypeCode;
					}
					return _FilterOwnerTypeCode_W;
				}
			}

			public WhereParameter FilterOwnerID
		    {
				get
		        {
					if(_FilterOwnerID_W == null)
	        	    {
						_FilterOwnerID_W = TearOff.FilterOwnerID;
					}
					return _FilterOwnerID_W;
				}
			}

			public WhereParameter FilterName
		    {
				get
		        {
					if(_FilterName_W == null)
	        	    {
						_FilterName_W = TearOff.FilterName;
					}
					return _FilterName_W;
				}
			}

			public WhereParameter FilterValue
		    {
				get
		        {
					if(_FilterValue_W == null)
	        	    {
						_FilterValue_W = TearOff.FilterValue;
					}
					return _FilterValue_W;
				}
			}

			public WhereParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public WhereParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public WhereParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			private WhereParameter _FilterID_W = null;
			private WhereParameter _FilterTypeCode_W = null;
			private WhereParameter _FilterOwnerTypeCode_W = null;
			private WhereParameter _FilterOwnerID_W = null;
			private WhereParameter _FilterName_W = null;
			private WhereParameter _FilterValue_W = null;
			private WhereParameter _CreateDate_W = null;
			private WhereParameter _ModifyDate_W = null;
			private WhereParameter _IsDeleted_W = null;

			public void WhereClauseReset()
			{
				_FilterID_W = null;
				_FilterTypeCode_W = null;
				_FilterOwnerTypeCode_W = null;
				_FilterOwnerID_W = null;
				_FilterName_W = null;
				_FilterValue_W = null;
				_CreateDate_W = null;
				_ModifyDate_W = null;
				_IsDeleted_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter FilterID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FilterID, Parameters.FilterID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FilterTypeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FilterTypeCode, Parameters.FilterTypeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FilterOwnerTypeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FilterOwnerTypeCode, Parameters.FilterOwnerTypeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FilterOwnerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FilterOwnerID, Parameters.FilterOwnerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FilterName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FilterName, Parameters.FilterName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FilterValue
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FilterValue, Parameters.FilterValue);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifyDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDeleted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter FilterID
		    {
				get
		        {
					if(_FilterID_W == null)
	        	    {
						_FilterID_W = TearOff.FilterID;
					}
					return _FilterID_W;
				}
			}

			public AggregateParameter FilterTypeCode
		    {
				get
		        {
					if(_FilterTypeCode_W == null)
	        	    {
						_FilterTypeCode_W = TearOff.FilterTypeCode;
					}
					return _FilterTypeCode_W;
				}
			}

			public AggregateParameter FilterOwnerTypeCode
		    {
				get
		        {
					if(_FilterOwnerTypeCode_W == null)
	        	    {
						_FilterOwnerTypeCode_W = TearOff.FilterOwnerTypeCode;
					}
					return _FilterOwnerTypeCode_W;
				}
			}

			public AggregateParameter FilterOwnerID
		    {
				get
		        {
					if(_FilterOwnerID_W == null)
	        	    {
						_FilterOwnerID_W = TearOff.FilterOwnerID;
					}
					return _FilterOwnerID_W;
				}
			}

			public AggregateParameter FilterName
		    {
				get
		        {
					if(_FilterName_W == null)
	        	    {
						_FilterName_W = TearOff.FilterName;
					}
					return _FilterName_W;
				}
			}

			public AggregateParameter FilterValue
		    {
				get
		        {
					if(_FilterValue_W == null)
	        	    {
						_FilterValue_W = TearOff.FilterValue;
					}
					return _FilterValue_W;
				}
			}

			public AggregateParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public AggregateParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public AggregateParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			private AggregateParameter _FilterID_W = null;
			private AggregateParameter _FilterTypeCode_W = null;
			private AggregateParameter _FilterOwnerTypeCode_W = null;
			private AggregateParameter _FilterOwnerID_W = null;
			private AggregateParameter _FilterName_W = null;
			private AggregateParameter _FilterValue_W = null;
			private AggregateParameter _CreateDate_W = null;
			private AggregateParameter _ModifyDate_W = null;
			private AggregateParameter _IsDeleted_W = null;

			public void AggregateClauseReset()
			{
				_FilterID_W = null;
				_FilterTypeCode_W = null;
				_FilterOwnerTypeCode_W = null;
				_FilterOwnerID_W = null;
				_FilterName_W = null;
				_FilterValue_W = null;
				_CreateDate_W = null;
				_ModifyDate_W = null;
				_IsDeleted_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_FiltersInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.FilterID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_FiltersUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_FiltersDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.FilterID);
			p.SourceColumn = ColumnNames.FilterID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.FilterID);
			p.SourceColumn = ColumnNames.FilterID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FilterTypeCode);
			p.SourceColumn = ColumnNames.FilterTypeCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FilterOwnerTypeCode);
			p.SourceColumn = ColumnNames.FilterOwnerTypeCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FilterOwnerID);
			p.SourceColumn = ColumnNames.FilterOwnerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FilterName);
			p.SourceColumn = ColumnNames.FilterName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FilterValue);
			p.SourceColumn = ColumnNames.FilterValue;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreateDate);
			p.SourceColumn = ColumnNames.CreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifyDate);
			p.SourceColumn = ColumnNames.ModifyDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsDeleted);
			p.SourceColumn = ColumnNames.IsDeleted;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
