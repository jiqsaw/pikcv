
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _UserCVs : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _UserCVs()
		{
			this.QuerySource = "UserCVs";
			this.MappingName = "UserCVs";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserCVsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int UserCVID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.UserCVID, UserCVID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserCVsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter UserCVID
			{
				get
				{
					return new SqlParameter("@UserCVID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NationID
			{
				get
				{
					return new SqlParameter("@NationID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter BirthDate
			{
				get
				{
					return new SqlParameter("@BirthDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter BirthPlaceID
			{
				get
				{
					return new SqlParameter("@BirthPlaceID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OtherBirthPlaceName
			{
				get
				{
					return new SqlParameter("@OtherBirthPlaceName", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter SexCode
			{
				get
				{
					return new SqlParameter("@SexCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MaritalStatusID
			{
				get
				{
					return new SqlParameter("@MaritalStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MilitaryStatusID
			{
				get
				{
					return new SqlParameter("@MilitaryStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MilitaryYear
			{
				get
				{
					return new SqlParameter("@MilitaryYear", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter IsDisabled
			{
				get
				{
					return new SqlParameter("@IsDisabled", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsOldConvicted
			{
				get
				{
					return new SqlParameter("@IsOldConvicted", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsMartyrRelative
			{
				get
				{
					return new SqlParameter("@IsMartyrRelative", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsTerrorWronged
			{
				get
				{
					return new SqlParameter("@IsTerrorWronged", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter ChronicIllness
			{
				get
				{
					return new SqlParameter("@ChronicIllness", SqlDbType.NVarChar, 1024);
				}
			}
			
			public static SqlParameter HomeAddress
			{
				get
				{
					return new SqlParameter("@HomeAddress", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter HomeCountryID
			{
				get
				{
					return new SqlParameter("@HomeCountryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter HomeCityID
			{
				get
				{
					return new SqlParameter("@HomeCityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OtherHomeCityName
			{
				get
				{
					return new SqlParameter("@OtherHomeCityName", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter HomePhone
			{
				get
				{
					return new SqlParameter("@HomePhone", SqlDbType.NVarChar, 18);
				}
			}
			
			public static SqlParameter BusinessPhone
			{
				get
				{
					return new SqlParameter("@BusinessPhone", SqlDbType.NVarChar, 18);
				}
			}
			
			public static SqlParameter GSM
			{
				get
				{
					return new SqlParameter("@GSM", SqlDbType.NVarChar, 17);
				}
			}
			
			public static SqlParameter GSM2
			{
				get
				{
					return new SqlParameter("@GSM2", SqlDbType.NVarChar, 17);
				}
			}
			
			public static SqlParameter ContactEmail
			{
				get
				{
					return new SqlParameter("@ContactEmail", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter AlternateContactName
			{
				get
				{
					return new SqlParameter("@AlternateContactName", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter AlternateContactPhone
			{
				get
				{
					return new SqlParameter("@AlternateContactPhone", SqlDbType.NVarChar, 18);
				}
			}
			
			public static SqlParameter EducationTypeCode
			{
				get
				{
					return new SqlParameter("@EducationTypeCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MiddleSchoolName
			{
				get
				{
					return new SqlParameter("@MiddleSchoolName", SqlDbType.NVarChar, 512);
				}
			}
			
			public static SqlParameter MiddleSchoolStatusID
			{
				get
				{
					return new SqlParameter("@MiddleSchoolStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MiddleSchoolEndDate
			{
				get
				{
					return new SqlParameter("@MiddleSchoolEndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter HighSchoolTypeID
			{
				get
				{
					return new SqlParameter("@HighSchoolTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter HighSchoolName
			{
				get
				{
					return new SqlParameter("@HighSchoolName", SqlDbType.NVarChar, 512);
				}
			}
			
			public static SqlParameter HighSchoolEndDate
			{
				get
				{
					return new SqlParameter("@HighSchoolEndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter HighSchoolStatusID
			{
				get
				{
					return new SqlParameter("@HighSchoolStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TotalWorkExperience
			{
				get
				{
					return new SqlParameter("@TotalWorkExperience", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DriverLicenseTypeID
			{
				get
				{
					return new SqlParameter("@DriverLicenseTypeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DriverLicenseYear
			{
				get
				{
					return new SqlParameter("@DriverLicenseYear", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter HasTravelDifficulty
			{
				get
				{
					return new SqlParameter("@HasTravelDifficulty", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsSmoking
			{
				get
				{
					return new SqlParameter("@IsSmoking", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter SeriousSickness
			{
				get
				{
					return new SqlParameter("@SeriousSickness", SqlDbType.NVarChar, 1024);
				}
			}
			
			public static SqlParameter PhotoFileName
			{
				get
				{
					return new SqlParameter("@PhotoFileName", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter VideoFileName
			{
				get
				{
					return new SqlParameter("@VideoFileName", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter CourseAndCertificates
			{
				get
				{
					return new SqlParameter("@CourseAndCertificates", SqlDbType.NVarChar, 2048);
				}
			}
			
			public static SqlParameter Interests
			{
				get
				{
					return new SqlParameter("@Interests", SqlDbType.NVarChar, 2048);
				}
			}
			
			public static SqlParameter Clubs
			{
				get
				{
					return new SqlParameter("@Clubs", SqlDbType.NVarChar, 2048);
				}
			}
			
			public static SqlParameter CreateDate
			{
				get
				{
					return new SqlParameter("@CreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifyDate
			{
				get
				{
					return new SqlParameter("@ModifyDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter TestMatDate
			{
				get
				{
					return new SqlParameter("@TestMatDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter TestYetDate
			{
				get
				{
					return new SqlParameter("@TestYetDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CvFocusCode
			{
				get
				{
					return new SqlParameter("@CvFocusCode", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string UserCVID = "UserCVID";
            public const string UserID = "UserID";
            public const string NationID = "NationID";
            public const string BirthDate = "BirthDate";
            public const string BirthPlaceID = "BirthPlaceID";
            public const string OtherBirthPlaceName = "OtherBirthPlaceName";
            public const string SexCode = "SexCode";
            public const string MaritalStatusID = "MaritalStatusID";
            public const string MilitaryStatusID = "MilitaryStatusID";
            public const string MilitaryYear = "MilitaryYear";
            public const string IsDisabled = "IsDisabled";
            public const string IsOldConvicted = "IsOldConvicted";
            public const string IsMartyrRelative = "IsMartyrRelative";
            public const string IsTerrorWronged = "IsTerrorWronged";
            public const string ChronicIllness = "ChronicIllness";
            public const string HomeAddress = "HomeAddress";
            public const string HomeCountryID = "HomeCountryID";
            public const string HomeCityID = "HomeCityID";
            public const string OtherHomeCityName = "OtherHomeCityName";
            public const string HomePhone = "HomePhone";
            public const string BusinessPhone = "BusinessPhone";
            public const string GSM = "GSM";
            public const string GSM2 = "GSM2";
            public const string ContactEmail = "ContactEmail";
            public const string AlternateContactName = "AlternateContactName";
            public const string AlternateContactPhone = "AlternateContactPhone";
            public const string EducationTypeCode = "EducationTypeCode";
            public const string MiddleSchoolName = "MiddleSchoolName";
            public const string MiddleSchoolStatusID = "MiddleSchoolStatusID";
            public const string MiddleSchoolEndDate = "MiddleSchoolEndDate";
            public const string HighSchoolTypeID = "HighSchoolTypeID";
            public const string HighSchoolName = "HighSchoolName";
            public const string HighSchoolEndDate = "HighSchoolEndDate";
            public const string HighSchoolStatusID = "HighSchoolStatusID";
            public const string TotalWorkExperience = "TotalWorkExperience";
            public const string DriverLicenseTypeID = "DriverLicenseTypeID";
            public const string DriverLicenseYear = "DriverLicenseYear";
            public const string HasTravelDifficulty = "HasTravelDifficulty";
            public const string IsSmoking = "IsSmoking";
            public const string SeriousSickness = "SeriousSickness";
            public const string PhotoFileName = "PhotoFileName";
            public const string VideoFileName = "VideoFileName";
            public const string CourseAndCertificates = "CourseAndCertificates";
            public const string Interests = "Interests";
            public const string Clubs = "Clubs";
            public const string CreateDate = "CreateDate";
            public const string ModifyDate = "ModifyDate";
            public const string TestMatDate = "TestMatDate";
            public const string TestYetDate = "TestYetDate";
            public const string CvFocusCode = "CvFocusCode";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserCVID] = _UserCVs.PropertyNames.UserCVID;
					ht[UserID] = _UserCVs.PropertyNames.UserID;
					ht[NationID] = _UserCVs.PropertyNames.NationID;
					ht[BirthDate] = _UserCVs.PropertyNames.BirthDate;
					ht[BirthPlaceID] = _UserCVs.PropertyNames.BirthPlaceID;
					ht[OtherBirthPlaceName] = _UserCVs.PropertyNames.OtherBirthPlaceName;
					ht[SexCode] = _UserCVs.PropertyNames.SexCode;
					ht[MaritalStatusID] = _UserCVs.PropertyNames.MaritalStatusID;
					ht[MilitaryStatusID] = _UserCVs.PropertyNames.MilitaryStatusID;
					ht[MilitaryYear] = _UserCVs.PropertyNames.MilitaryYear;
					ht[IsDisabled] = _UserCVs.PropertyNames.IsDisabled;
					ht[IsOldConvicted] = _UserCVs.PropertyNames.IsOldConvicted;
					ht[IsMartyrRelative] = _UserCVs.PropertyNames.IsMartyrRelative;
					ht[IsTerrorWronged] = _UserCVs.PropertyNames.IsTerrorWronged;
					ht[ChronicIllness] = _UserCVs.PropertyNames.ChronicIllness;
					ht[HomeAddress] = _UserCVs.PropertyNames.HomeAddress;
					ht[HomeCountryID] = _UserCVs.PropertyNames.HomeCountryID;
					ht[HomeCityID] = _UserCVs.PropertyNames.HomeCityID;
					ht[OtherHomeCityName] = _UserCVs.PropertyNames.OtherHomeCityName;
					ht[HomePhone] = _UserCVs.PropertyNames.HomePhone;
					ht[BusinessPhone] = _UserCVs.PropertyNames.BusinessPhone;
					ht[GSM] = _UserCVs.PropertyNames.GSM;
					ht[GSM2] = _UserCVs.PropertyNames.GSM2;
					ht[ContactEmail] = _UserCVs.PropertyNames.ContactEmail;
					ht[AlternateContactName] = _UserCVs.PropertyNames.AlternateContactName;
					ht[AlternateContactPhone] = _UserCVs.PropertyNames.AlternateContactPhone;
					ht[EducationTypeCode] = _UserCVs.PropertyNames.EducationTypeCode;
					ht[MiddleSchoolName] = _UserCVs.PropertyNames.MiddleSchoolName;
					ht[MiddleSchoolStatusID] = _UserCVs.PropertyNames.MiddleSchoolStatusID;
					ht[MiddleSchoolEndDate] = _UserCVs.PropertyNames.MiddleSchoolEndDate;
					ht[HighSchoolTypeID] = _UserCVs.PropertyNames.HighSchoolTypeID;
					ht[HighSchoolName] = _UserCVs.PropertyNames.HighSchoolName;
					ht[HighSchoolEndDate] = _UserCVs.PropertyNames.HighSchoolEndDate;
					ht[HighSchoolStatusID] = _UserCVs.PropertyNames.HighSchoolStatusID;
					ht[TotalWorkExperience] = _UserCVs.PropertyNames.TotalWorkExperience;
					ht[DriverLicenseTypeID] = _UserCVs.PropertyNames.DriverLicenseTypeID;
					ht[DriverLicenseYear] = _UserCVs.PropertyNames.DriverLicenseYear;
					ht[HasTravelDifficulty] = _UserCVs.PropertyNames.HasTravelDifficulty;
					ht[IsSmoking] = _UserCVs.PropertyNames.IsSmoking;
					ht[SeriousSickness] = _UserCVs.PropertyNames.SeriousSickness;
					ht[PhotoFileName] = _UserCVs.PropertyNames.PhotoFileName;
					ht[VideoFileName] = _UserCVs.PropertyNames.VideoFileName;
					ht[CourseAndCertificates] = _UserCVs.PropertyNames.CourseAndCertificates;
					ht[Interests] = _UserCVs.PropertyNames.Interests;
					ht[Clubs] = _UserCVs.PropertyNames.Clubs;
					ht[CreateDate] = _UserCVs.PropertyNames.CreateDate;
					ht[ModifyDate] = _UserCVs.PropertyNames.ModifyDate;
					ht[TestMatDate] = _UserCVs.PropertyNames.TestMatDate;
					ht[TestYetDate] = _UserCVs.PropertyNames.TestYetDate;
					ht[CvFocusCode] = _UserCVs.PropertyNames.CvFocusCode;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string UserCVID = "UserCVID";
            public const string UserID = "UserID";
            public const string NationID = "NationID";
            public const string BirthDate = "BirthDate";
            public const string BirthPlaceID = "BirthPlaceID";
            public const string OtherBirthPlaceName = "OtherBirthPlaceName";
            public const string SexCode = "SexCode";
            public const string MaritalStatusID = "MaritalStatusID";
            public const string MilitaryStatusID = "MilitaryStatusID";
            public const string MilitaryYear = "MilitaryYear";
            public const string IsDisabled = "IsDisabled";
            public const string IsOldConvicted = "IsOldConvicted";
            public const string IsMartyrRelative = "IsMartyrRelative";
            public const string IsTerrorWronged = "IsTerrorWronged";
            public const string ChronicIllness = "ChronicIllness";
            public const string HomeAddress = "HomeAddress";
            public const string HomeCountryID = "HomeCountryID";
            public const string HomeCityID = "HomeCityID";
            public const string OtherHomeCityName = "OtherHomeCityName";
            public const string HomePhone = "HomePhone";
            public const string BusinessPhone = "BusinessPhone";
            public const string GSM = "GSM";
            public const string GSM2 = "GSM2";
            public const string ContactEmail = "ContactEmail";
            public const string AlternateContactName = "AlternateContactName";
            public const string AlternateContactPhone = "AlternateContactPhone";
            public const string EducationTypeCode = "EducationTypeCode";
            public const string MiddleSchoolName = "MiddleSchoolName";
            public const string MiddleSchoolStatusID = "MiddleSchoolStatusID";
            public const string MiddleSchoolEndDate = "MiddleSchoolEndDate";
            public const string HighSchoolTypeID = "HighSchoolTypeID";
            public const string HighSchoolName = "HighSchoolName";
            public const string HighSchoolEndDate = "HighSchoolEndDate";
            public const string HighSchoolStatusID = "HighSchoolStatusID";
            public const string TotalWorkExperience = "TotalWorkExperience";
            public const string DriverLicenseTypeID = "DriverLicenseTypeID";
            public const string DriverLicenseYear = "DriverLicenseYear";
            public const string HasTravelDifficulty = "HasTravelDifficulty";
            public const string IsSmoking = "IsSmoking";
            public const string SeriousSickness = "SeriousSickness";
            public const string PhotoFileName = "PhotoFileName";
            public const string VideoFileName = "VideoFileName";
            public const string CourseAndCertificates = "CourseAndCertificates";
            public const string Interests = "Interests";
            public const string Clubs = "Clubs";
            public const string CreateDate = "CreateDate";
            public const string ModifyDate = "ModifyDate";
            public const string TestMatDate = "TestMatDate";
            public const string TestYetDate = "TestYetDate";
            public const string CvFocusCode = "CvFocusCode";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserCVID] = _UserCVs.ColumnNames.UserCVID;
					ht[UserID] = _UserCVs.ColumnNames.UserID;
					ht[NationID] = _UserCVs.ColumnNames.NationID;
					ht[BirthDate] = _UserCVs.ColumnNames.BirthDate;
					ht[BirthPlaceID] = _UserCVs.ColumnNames.BirthPlaceID;
					ht[OtherBirthPlaceName] = _UserCVs.ColumnNames.OtherBirthPlaceName;
					ht[SexCode] = _UserCVs.ColumnNames.SexCode;
					ht[MaritalStatusID] = _UserCVs.ColumnNames.MaritalStatusID;
					ht[MilitaryStatusID] = _UserCVs.ColumnNames.MilitaryStatusID;
					ht[MilitaryYear] = _UserCVs.ColumnNames.MilitaryYear;
					ht[IsDisabled] = _UserCVs.ColumnNames.IsDisabled;
					ht[IsOldConvicted] = _UserCVs.ColumnNames.IsOldConvicted;
					ht[IsMartyrRelative] = _UserCVs.ColumnNames.IsMartyrRelative;
					ht[IsTerrorWronged] = _UserCVs.ColumnNames.IsTerrorWronged;
					ht[ChronicIllness] = _UserCVs.ColumnNames.ChronicIllness;
					ht[HomeAddress] = _UserCVs.ColumnNames.HomeAddress;
					ht[HomeCountryID] = _UserCVs.ColumnNames.HomeCountryID;
					ht[HomeCityID] = _UserCVs.ColumnNames.HomeCityID;
					ht[OtherHomeCityName] = _UserCVs.ColumnNames.OtherHomeCityName;
					ht[HomePhone] = _UserCVs.ColumnNames.HomePhone;
					ht[BusinessPhone] = _UserCVs.ColumnNames.BusinessPhone;
					ht[GSM] = _UserCVs.ColumnNames.GSM;
					ht[GSM2] = _UserCVs.ColumnNames.GSM2;
					ht[ContactEmail] = _UserCVs.ColumnNames.ContactEmail;
					ht[AlternateContactName] = _UserCVs.ColumnNames.AlternateContactName;
					ht[AlternateContactPhone] = _UserCVs.ColumnNames.AlternateContactPhone;
					ht[EducationTypeCode] = _UserCVs.ColumnNames.EducationTypeCode;
					ht[MiddleSchoolName] = _UserCVs.ColumnNames.MiddleSchoolName;
					ht[MiddleSchoolStatusID] = _UserCVs.ColumnNames.MiddleSchoolStatusID;
					ht[MiddleSchoolEndDate] = _UserCVs.ColumnNames.MiddleSchoolEndDate;
					ht[HighSchoolTypeID] = _UserCVs.ColumnNames.HighSchoolTypeID;
					ht[HighSchoolName] = _UserCVs.ColumnNames.HighSchoolName;
					ht[HighSchoolEndDate] = _UserCVs.ColumnNames.HighSchoolEndDate;
					ht[HighSchoolStatusID] = _UserCVs.ColumnNames.HighSchoolStatusID;
					ht[TotalWorkExperience] = _UserCVs.ColumnNames.TotalWorkExperience;
					ht[DriverLicenseTypeID] = _UserCVs.ColumnNames.DriverLicenseTypeID;
					ht[DriverLicenseYear] = _UserCVs.ColumnNames.DriverLicenseYear;
					ht[HasTravelDifficulty] = _UserCVs.ColumnNames.HasTravelDifficulty;
					ht[IsSmoking] = _UserCVs.ColumnNames.IsSmoking;
					ht[SeriousSickness] = _UserCVs.ColumnNames.SeriousSickness;
					ht[PhotoFileName] = _UserCVs.ColumnNames.PhotoFileName;
					ht[VideoFileName] = _UserCVs.ColumnNames.VideoFileName;
					ht[CourseAndCertificates] = _UserCVs.ColumnNames.CourseAndCertificates;
					ht[Interests] = _UserCVs.ColumnNames.Interests;
					ht[Clubs] = _UserCVs.ColumnNames.Clubs;
					ht[CreateDate] = _UserCVs.ColumnNames.CreateDate;
					ht[ModifyDate] = _UserCVs.ColumnNames.ModifyDate;
					ht[TestMatDate] = _UserCVs.ColumnNames.TestMatDate;
					ht[TestYetDate] = _UserCVs.ColumnNames.TestYetDate;
					ht[CvFocusCode] = _UserCVs.ColumnNames.CvFocusCode;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string UserCVID = "s_UserCVID";
            public const string UserID = "s_UserID";
            public const string NationID = "s_NationID";
            public const string BirthDate = "s_BirthDate";
            public const string BirthPlaceID = "s_BirthPlaceID";
            public const string OtherBirthPlaceName = "s_OtherBirthPlaceName";
            public const string SexCode = "s_SexCode";
            public const string MaritalStatusID = "s_MaritalStatusID";
            public const string MilitaryStatusID = "s_MilitaryStatusID";
            public const string MilitaryYear = "s_MilitaryYear";
            public const string IsDisabled = "s_IsDisabled";
            public const string IsOldConvicted = "s_IsOldConvicted";
            public const string IsMartyrRelative = "s_IsMartyrRelative";
            public const string IsTerrorWronged = "s_IsTerrorWronged";
            public const string ChronicIllness = "s_ChronicIllness";
            public const string HomeAddress = "s_HomeAddress";
            public const string HomeCountryID = "s_HomeCountryID";
            public const string HomeCityID = "s_HomeCityID";
            public const string OtherHomeCityName = "s_OtherHomeCityName";
            public const string HomePhone = "s_HomePhone";
            public const string BusinessPhone = "s_BusinessPhone";
            public const string GSM = "s_GSM";
            public const string GSM2 = "s_GSM2";
            public const string ContactEmail = "s_ContactEmail";
            public const string AlternateContactName = "s_AlternateContactName";
            public const string AlternateContactPhone = "s_AlternateContactPhone";
            public const string EducationTypeCode = "s_EducationTypeCode";
            public const string MiddleSchoolName = "s_MiddleSchoolName";
            public const string MiddleSchoolStatusID = "s_MiddleSchoolStatusID";
            public const string MiddleSchoolEndDate = "s_MiddleSchoolEndDate";
            public const string HighSchoolTypeID = "s_HighSchoolTypeID";
            public const string HighSchoolName = "s_HighSchoolName";
            public const string HighSchoolEndDate = "s_HighSchoolEndDate";
            public const string HighSchoolStatusID = "s_HighSchoolStatusID";
            public const string TotalWorkExperience = "s_TotalWorkExperience";
            public const string DriverLicenseTypeID = "s_DriverLicenseTypeID";
            public const string DriverLicenseYear = "s_DriverLicenseYear";
            public const string HasTravelDifficulty = "s_HasTravelDifficulty";
            public const string IsSmoking = "s_IsSmoking";
            public const string SeriousSickness = "s_SeriousSickness";
            public const string PhotoFileName = "s_PhotoFileName";
            public const string VideoFileName = "s_VideoFileName";
            public const string CourseAndCertificates = "s_CourseAndCertificates";
            public const string Interests = "s_Interests";
            public const string Clubs = "s_Clubs";
            public const string CreateDate = "s_CreateDate";
            public const string ModifyDate = "s_ModifyDate";
            public const string TestMatDate = "s_TestMatDate";
            public const string TestYetDate = "s_TestYetDate";
            public const string CvFocusCode = "s_CvFocusCode";

		}
		#endregion		
		
		#region Properties
	
		public virtual int UserCVID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserCVID);
			}
			set
	        {
				base.Setint(ColumnNames.UserCVID, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual int NationID
	    {
			get
	        {
				return base.Getint(ColumnNames.NationID);
			}
			set
	        {
				base.Setint(ColumnNames.NationID, value);
			}
		}

		public virtual DateTime BirthDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.BirthDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.BirthDate, value);
			}
		}

		public virtual int BirthPlaceID
	    {
			get
	        {
				return base.Getint(ColumnNames.BirthPlaceID);
			}
			set
	        {
				base.Setint(ColumnNames.BirthPlaceID, value);
			}
		}

		public virtual string OtherBirthPlaceName
	    {
			get
	        {
				return base.Getstring(ColumnNames.OtherBirthPlaceName);
			}
			set
	        {
				base.Setstring(ColumnNames.OtherBirthPlaceName, value);
			}
		}

		public virtual int SexCode
	    {
			get
	        {
				return base.Getint(ColumnNames.SexCode);
			}
			set
	        {
				base.Setint(ColumnNames.SexCode, value);
			}
		}

		public virtual int MaritalStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.MaritalStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.MaritalStatusID, value);
			}
		}

		public virtual int MilitaryStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.MilitaryStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.MilitaryStatusID, value);
			}
		}

		public virtual int MilitaryYear
	    {
			get
	        {
				return base.Getint(ColumnNames.MilitaryYear);
			}
			set
	        {
				base.Setint(ColumnNames.MilitaryYear, value);
			}
		}

		public virtual bool IsDisabled
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDisabled);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDisabled, value);
			}
		}

		public virtual bool IsOldConvicted
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsOldConvicted);
			}
			set
	        {
				base.Setbool(ColumnNames.IsOldConvicted, value);
			}
		}

		public virtual bool IsMartyrRelative
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsMartyrRelative);
			}
			set
	        {
				base.Setbool(ColumnNames.IsMartyrRelative, value);
			}
		}

		public virtual bool IsTerrorWronged
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsTerrorWronged);
			}
			set
	        {
				base.Setbool(ColumnNames.IsTerrorWronged, value);
			}
		}

		public virtual string ChronicIllness
	    {
			get
	        {
				return base.Getstring(ColumnNames.ChronicIllness);
			}
			set
	        {
				base.Setstring(ColumnNames.ChronicIllness, value);
			}
		}

		public virtual string HomeAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.HomeAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.HomeAddress, value);
			}
		}

		public virtual int HomeCountryID
	    {
			get
	        {
				return base.Getint(ColumnNames.HomeCountryID);
			}
			set
	        {
				base.Setint(ColumnNames.HomeCountryID, value);
			}
		}

		public virtual int HomeCityID
	    {
			get
	        {
				return base.Getint(ColumnNames.HomeCityID);
			}
			set
	        {
				base.Setint(ColumnNames.HomeCityID, value);
			}
		}

		public virtual string OtherHomeCityName
	    {
			get
	        {
				return base.Getstring(ColumnNames.OtherHomeCityName);
			}
			set
	        {
				base.Setstring(ColumnNames.OtherHomeCityName, value);
			}
		}

		public virtual string HomePhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.HomePhone);
			}
			set
	        {
				base.Setstring(ColumnNames.HomePhone, value);
			}
		}

		public virtual string BusinessPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.BusinessPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.BusinessPhone, value);
			}
		}

		public virtual string GSM
	    {
			get
	        {
				return base.Getstring(ColumnNames.GSM);
			}
			set
	        {
				base.Setstring(ColumnNames.GSM, value);
			}
		}

		public virtual string GSM2
	    {
			get
	        {
				return base.Getstring(ColumnNames.GSM2);
			}
			set
	        {
				base.Setstring(ColumnNames.GSM2, value);
			}
		}

		public virtual string ContactEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactEmail, value);
			}
		}

		public virtual string AlternateContactName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AlternateContactName);
			}
			set
	        {
				base.Setstring(ColumnNames.AlternateContactName, value);
			}
		}

		public virtual string AlternateContactPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.AlternateContactPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.AlternateContactPhone, value);
			}
		}

		public virtual int EducationTypeCode
	    {
			get
	        {
				return base.Getint(ColumnNames.EducationTypeCode);
			}
			set
	        {
				base.Setint(ColumnNames.EducationTypeCode, value);
			}
		}

		public virtual string MiddleSchoolName
	    {
			get
	        {
				return base.Getstring(ColumnNames.MiddleSchoolName);
			}
			set
	        {
				base.Setstring(ColumnNames.MiddleSchoolName, value);
			}
		}

		public virtual int MiddleSchoolStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.MiddleSchoolStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.MiddleSchoolStatusID, value);
			}
		}

		public virtual DateTime MiddleSchoolEndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.MiddleSchoolEndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.MiddleSchoolEndDate, value);
			}
		}

		public virtual int HighSchoolTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.HighSchoolTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.HighSchoolTypeID, value);
			}
		}

		public virtual string HighSchoolName
	    {
			get
	        {
				return base.Getstring(ColumnNames.HighSchoolName);
			}
			set
	        {
				base.Setstring(ColumnNames.HighSchoolName, value);
			}
		}

		public virtual DateTime HighSchoolEndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.HighSchoolEndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.HighSchoolEndDate, value);
			}
		}

		public virtual int HighSchoolStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.HighSchoolStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.HighSchoolStatusID, value);
			}
		}

		public virtual int TotalWorkExperience
	    {
			get
	        {
				return base.Getint(ColumnNames.TotalWorkExperience);
			}
			set
	        {
				base.Setint(ColumnNames.TotalWorkExperience, value);
			}
		}

		public virtual int DriverLicenseTypeID
	    {
			get
	        {
				return base.Getint(ColumnNames.DriverLicenseTypeID);
			}
			set
	        {
				base.Setint(ColumnNames.DriverLicenseTypeID, value);
			}
		}

		public virtual int DriverLicenseYear
	    {
			get
	        {
				return base.Getint(ColumnNames.DriverLicenseYear);
			}
			set
	        {
				base.Setint(ColumnNames.DriverLicenseYear, value);
			}
		}

		public virtual bool HasTravelDifficulty
	    {
			get
	        {
				return base.Getbool(ColumnNames.HasTravelDifficulty);
			}
			set
	        {
				base.Setbool(ColumnNames.HasTravelDifficulty, value);
			}
		}

		public virtual bool IsSmoking
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsSmoking);
			}
			set
	        {
				base.Setbool(ColumnNames.IsSmoking, value);
			}
		}

		public virtual string SeriousSickness
	    {
			get
	        {
				return base.Getstring(ColumnNames.SeriousSickness);
			}
			set
	        {
				base.Setstring(ColumnNames.SeriousSickness, value);
			}
		}

		public virtual string PhotoFileName
	    {
			get
	        {
				return base.Getstring(ColumnNames.PhotoFileName);
			}
			set
	        {
				base.Setstring(ColumnNames.PhotoFileName, value);
			}
		}

		public virtual string VideoFileName
	    {
			get
	        {
				return base.Getstring(ColumnNames.VideoFileName);
			}
			set
	        {
				base.Setstring(ColumnNames.VideoFileName, value);
			}
		}

		public virtual string CourseAndCertificates
	    {
			get
	        {
				return base.Getstring(ColumnNames.CourseAndCertificates);
			}
			set
	        {
				base.Setstring(ColumnNames.CourseAndCertificates, value);
			}
		}

		public virtual string Interests
	    {
			get
	        {
				return base.Getstring(ColumnNames.Interests);
			}
			set
	        {
				base.Setstring(ColumnNames.Interests, value);
			}
		}

		public virtual string Clubs
	    {
			get
	        {
				return base.Getstring(ColumnNames.Clubs);
			}
			set
	        {
				base.Setstring(ColumnNames.Clubs, value);
			}
		}

		public virtual DateTime CreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreateDate, value);
			}
		}

		public virtual DateTime ModifyDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifyDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifyDate, value);
			}
		}

		public virtual DateTime TestMatDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.TestMatDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.TestMatDate, value);
			}
		}

		public virtual DateTime TestYetDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.TestYetDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.TestYetDate, value);
			}
		}

		public virtual int CvFocusCode
	    {
			get
	        {
				return base.Getint(ColumnNames.CvFocusCode);
			}
			set
	        {
				base.Setint(ColumnNames.CvFocusCode, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_UserCVID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserCVID) ? string.Empty : base.GetintAsString(ColumnNames.UserCVID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserCVID);
				else
					this.UserCVID = base.SetintAsString(ColumnNames.UserCVID, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_NationID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NationID) ? string.Empty : base.GetintAsString(ColumnNames.NationID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NationID);
				else
					this.NationID = base.SetintAsString(ColumnNames.NationID, value);
			}
		}

		public virtual string s_BirthDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BirthDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.BirthDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BirthDate);
				else
					this.BirthDate = base.SetDateTimeAsString(ColumnNames.BirthDate, value);
			}
		}

		public virtual string s_BirthPlaceID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BirthPlaceID) ? string.Empty : base.GetintAsString(ColumnNames.BirthPlaceID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BirthPlaceID);
				else
					this.BirthPlaceID = base.SetintAsString(ColumnNames.BirthPlaceID, value);
			}
		}

		public virtual string s_OtherBirthPlaceName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OtherBirthPlaceName) ? string.Empty : base.GetstringAsString(ColumnNames.OtherBirthPlaceName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OtherBirthPlaceName);
				else
					this.OtherBirthPlaceName = base.SetstringAsString(ColumnNames.OtherBirthPlaceName, value);
			}
		}

		public virtual string s_SexCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SexCode) ? string.Empty : base.GetintAsString(ColumnNames.SexCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SexCode);
				else
					this.SexCode = base.SetintAsString(ColumnNames.SexCode, value);
			}
		}

		public virtual string s_MaritalStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MaritalStatusID) ? string.Empty : base.GetintAsString(ColumnNames.MaritalStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MaritalStatusID);
				else
					this.MaritalStatusID = base.SetintAsString(ColumnNames.MaritalStatusID, value);
			}
		}

		public virtual string s_MilitaryStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MilitaryStatusID) ? string.Empty : base.GetintAsString(ColumnNames.MilitaryStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MilitaryStatusID);
				else
					this.MilitaryStatusID = base.SetintAsString(ColumnNames.MilitaryStatusID, value);
			}
		}

		public virtual string s_MilitaryYear
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MilitaryYear) ? string.Empty : base.GetintAsString(ColumnNames.MilitaryYear);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MilitaryYear);
				else
					this.MilitaryYear = base.SetintAsString(ColumnNames.MilitaryYear, value);
			}
		}

		public virtual string s_IsDisabled
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDisabled) ? string.Empty : base.GetboolAsString(ColumnNames.IsDisabled);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDisabled);
				else
					this.IsDisabled = base.SetboolAsString(ColumnNames.IsDisabled, value);
			}
		}

		public virtual string s_IsOldConvicted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsOldConvicted) ? string.Empty : base.GetboolAsString(ColumnNames.IsOldConvicted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsOldConvicted);
				else
					this.IsOldConvicted = base.SetboolAsString(ColumnNames.IsOldConvicted, value);
			}
		}

		public virtual string s_IsMartyrRelative
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsMartyrRelative) ? string.Empty : base.GetboolAsString(ColumnNames.IsMartyrRelative);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsMartyrRelative);
				else
					this.IsMartyrRelative = base.SetboolAsString(ColumnNames.IsMartyrRelative, value);
			}
		}

		public virtual string s_IsTerrorWronged
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsTerrorWronged) ? string.Empty : base.GetboolAsString(ColumnNames.IsTerrorWronged);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsTerrorWronged);
				else
					this.IsTerrorWronged = base.SetboolAsString(ColumnNames.IsTerrorWronged, value);
			}
		}

		public virtual string s_ChronicIllness
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ChronicIllness) ? string.Empty : base.GetstringAsString(ColumnNames.ChronicIllness);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ChronicIllness);
				else
					this.ChronicIllness = base.SetstringAsString(ColumnNames.ChronicIllness, value);
			}
		}

		public virtual string s_HomeAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HomeAddress) ? string.Empty : base.GetstringAsString(ColumnNames.HomeAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HomeAddress);
				else
					this.HomeAddress = base.SetstringAsString(ColumnNames.HomeAddress, value);
			}
		}

		public virtual string s_HomeCountryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HomeCountryID) ? string.Empty : base.GetintAsString(ColumnNames.HomeCountryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HomeCountryID);
				else
					this.HomeCountryID = base.SetintAsString(ColumnNames.HomeCountryID, value);
			}
		}

		public virtual string s_HomeCityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HomeCityID) ? string.Empty : base.GetintAsString(ColumnNames.HomeCityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HomeCityID);
				else
					this.HomeCityID = base.SetintAsString(ColumnNames.HomeCityID, value);
			}
		}

		public virtual string s_OtherHomeCityName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OtherHomeCityName) ? string.Empty : base.GetstringAsString(ColumnNames.OtherHomeCityName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OtherHomeCityName);
				else
					this.OtherHomeCityName = base.SetstringAsString(ColumnNames.OtherHomeCityName, value);
			}
		}

		public virtual string s_HomePhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HomePhone) ? string.Empty : base.GetstringAsString(ColumnNames.HomePhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HomePhone);
				else
					this.HomePhone = base.SetstringAsString(ColumnNames.HomePhone, value);
			}
		}

		public virtual string s_BusinessPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BusinessPhone) ? string.Empty : base.GetstringAsString(ColumnNames.BusinessPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BusinessPhone);
				else
					this.BusinessPhone = base.SetstringAsString(ColumnNames.BusinessPhone, value);
			}
		}

		public virtual string s_GSM
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GSM) ? string.Empty : base.GetstringAsString(ColumnNames.GSM);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GSM);
				else
					this.GSM = base.SetstringAsString(ColumnNames.GSM, value);
			}
		}

		public virtual string s_GSM2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.GSM2) ? string.Empty : base.GetstringAsString(ColumnNames.GSM2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.GSM2);
				else
					this.GSM2 = base.SetstringAsString(ColumnNames.GSM2, value);
			}
		}

		public virtual string s_ContactEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactEmail) ? string.Empty : base.GetstringAsString(ColumnNames.ContactEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactEmail);
				else
					this.ContactEmail = base.SetstringAsString(ColumnNames.ContactEmail, value);
			}
		}

		public virtual string s_AlternateContactName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AlternateContactName) ? string.Empty : base.GetstringAsString(ColumnNames.AlternateContactName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AlternateContactName);
				else
					this.AlternateContactName = base.SetstringAsString(ColumnNames.AlternateContactName, value);
			}
		}

		public virtual string s_AlternateContactPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AlternateContactPhone) ? string.Empty : base.GetstringAsString(ColumnNames.AlternateContactPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AlternateContactPhone);
				else
					this.AlternateContactPhone = base.SetstringAsString(ColumnNames.AlternateContactPhone, value);
			}
		}

		public virtual string s_EducationTypeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EducationTypeCode) ? string.Empty : base.GetintAsString(ColumnNames.EducationTypeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EducationTypeCode);
				else
					this.EducationTypeCode = base.SetintAsString(ColumnNames.EducationTypeCode, value);
			}
		}

		public virtual string s_MiddleSchoolName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MiddleSchoolName) ? string.Empty : base.GetstringAsString(ColumnNames.MiddleSchoolName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MiddleSchoolName);
				else
					this.MiddleSchoolName = base.SetstringAsString(ColumnNames.MiddleSchoolName, value);
			}
		}

		public virtual string s_MiddleSchoolStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MiddleSchoolStatusID) ? string.Empty : base.GetintAsString(ColumnNames.MiddleSchoolStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MiddleSchoolStatusID);
				else
					this.MiddleSchoolStatusID = base.SetintAsString(ColumnNames.MiddleSchoolStatusID, value);
			}
		}

		public virtual string s_MiddleSchoolEndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MiddleSchoolEndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.MiddleSchoolEndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MiddleSchoolEndDate);
				else
					this.MiddleSchoolEndDate = base.SetDateTimeAsString(ColumnNames.MiddleSchoolEndDate, value);
			}
		}

		public virtual string s_HighSchoolTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HighSchoolTypeID) ? string.Empty : base.GetintAsString(ColumnNames.HighSchoolTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HighSchoolTypeID);
				else
					this.HighSchoolTypeID = base.SetintAsString(ColumnNames.HighSchoolTypeID, value);
			}
		}

		public virtual string s_HighSchoolName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HighSchoolName) ? string.Empty : base.GetstringAsString(ColumnNames.HighSchoolName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HighSchoolName);
				else
					this.HighSchoolName = base.SetstringAsString(ColumnNames.HighSchoolName, value);
			}
		}

		public virtual string s_HighSchoolEndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HighSchoolEndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.HighSchoolEndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HighSchoolEndDate);
				else
					this.HighSchoolEndDate = base.SetDateTimeAsString(ColumnNames.HighSchoolEndDate, value);
			}
		}

		public virtual string s_HighSchoolStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HighSchoolStatusID) ? string.Empty : base.GetintAsString(ColumnNames.HighSchoolStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HighSchoolStatusID);
				else
					this.HighSchoolStatusID = base.SetintAsString(ColumnNames.HighSchoolStatusID, value);
			}
		}

		public virtual string s_TotalWorkExperience
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TotalWorkExperience) ? string.Empty : base.GetintAsString(ColumnNames.TotalWorkExperience);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TotalWorkExperience);
				else
					this.TotalWorkExperience = base.SetintAsString(ColumnNames.TotalWorkExperience, value);
			}
		}

		public virtual string s_DriverLicenseTypeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DriverLicenseTypeID) ? string.Empty : base.GetintAsString(ColumnNames.DriverLicenseTypeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DriverLicenseTypeID);
				else
					this.DriverLicenseTypeID = base.SetintAsString(ColumnNames.DriverLicenseTypeID, value);
			}
		}

		public virtual string s_DriverLicenseYear
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DriverLicenseYear) ? string.Empty : base.GetintAsString(ColumnNames.DriverLicenseYear);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DriverLicenseYear);
				else
					this.DriverLicenseYear = base.SetintAsString(ColumnNames.DriverLicenseYear, value);
			}
		}

		public virtual string s_HasTravelDifficulty
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HasTravelDifficulty) ? string.Empty : base.GetboolAsString(ColumnNames.HasTravelDifficulty);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HasTravelDifficulty);
				else
					this.HasTravelDifficulty = base.SetboolAsString(ColumnNames.HasTravelDifficulty, value);
			}
		}

		public virtual string s_IsSmoking
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsSmoking) ? string.Empty : base.GetboolAsString(ColumnNames.IsSmoking);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsSmoking);
				else
					this.IsSmoking = base.SetboolAsString(ColumnNames.IsSmoking, value);
			}
		}

		public virtual string s_SeriousSickness
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SeriousSickness) ? string.Empty : base.GetstringAsString(ColumnNames.SeriousSickness);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SeriousSickness);
				else
					this.SeriousSickness = base.SetstringAsString(ColumnNames.SeriousSickness, value);
			}
		}

		public virtual string s_PhotoFileName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhotoFileName) ? string.Empty : base.GetstringAsString(ColumnNames.PhotoFileName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhotoFileName);
				else
					this.PhotoFileName = base.SetstringAsString(ColumnNames.PhotoFileName, value);
			}
		}

		public virtual string s_VideoFileName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VideoFileName) ? string.Empty : base.GetstringAsString(ColumnNames.VideoFileName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VideoFileName);
				else
					this.VideoFileName = base.SetstringAsString(ColumnNames.VideoFileName, value);
			}
		}

		public virtual string s_CourseAndCertificates
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CourseAndCertificates) ? string.Empty : base.GetstringAsString(ColumnNames.CourseAndCertificates);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CourseAndCertificates);
				else
					this.CourseAndCertificates = base.SetstringAsString(ColumnNames.CourseAndCertificates, value);
			}
		}

		public virtual string s_Interests
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Interests) ? string.Empty : base.GetstringAsString(ColumnNames.Interests);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Interests);
				else
					this.Interests = base.SetstringAsString(ColumnNames.Interests, value);
			}
		}

		public virtual string s_Clubs
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Clubs) ? string.Empty : base.GetstringAsString(ColumnNames.Clubs);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Clubs);
				else
					this.Clubs = base.SetstringAsString(ColumnNames.Clubs, value);
			}
		}

		public virtual string s_CreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreateDate);
				else
					this.CreateDate = base.SetDateTimeAsString(ColumnNames.CreateDate, value);
			}
		}

		public virtual string s_ModifyDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifyDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifyDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifyDate);
				else
					this.ModifyDate = base.SetDateTimeAsString(ColumnNames.ModifyDate, value);
			}
		}

		public virtual string s_TestMatDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TestMatDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.TestMatDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TestMatDate);
				else
					this.TestMatDate = base.SetDateTimeAsString(ColumnNames.TestMatDate, value);
			}
		}

		public virtual string s_TestYetDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TestYetDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.TestYetDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TestYetDate);
				else
					this.TestYetDate = base.SetDateTimeAsString(ColumnNames.TestYetDate, value);
			}
		}

		public virtual string s_CvFocusCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CvFocusCode) ? string.Empty : base.GetintAsString(ColumnNames.CvFocusCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CvFocusCode);
				else
					this.CvFocusCode = base.SetintAsString(ColumnNames.CvFocusCode, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter UserCVID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserCVID, Parameters.UserCVID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NationID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NationID, Parameters.NationID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BirthDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BirthDate, Parameters.BirthDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BirthPlaceID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BirthPlaceID, Parameters.BirthPlaceID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OtherBirthPlaceName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OtherBirthPlaceName, Parameters.OtherBirthPlaceName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SexCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SexCode, Parameters.SexCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MaritalStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MaritalStatusID, Parameters.MaritalStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MilitaryStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MilitaryStatusID, Parameters.MilitaryStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MilitaryYear
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MilitaryYear, Parameters.MilitaryYear);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDisabled
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDisabled, Parameters.IsDisabled);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsOldConvicted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsOldConvicted, Parameters.IsOldConvicted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsMartyrRelative
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsMartyrRelative, Parameters.IsMartyrRelative);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsTerrorWronged
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsTerrorWronged, Parameters.IsTerrorWronged);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ChronicIllness
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ChronicIllness, Parameters.ChronicIllness);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HomeAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HomeAddress, Parameters.HomeAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HomeCountryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HomeCountryID, Parameters.HomeCountryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HomeCityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HomeCityID, Parameters.HomeCityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OtherHomeCityName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OtherHomeCityName, Parameters.OtherHomeCityName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HomePhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HomePhone, Parameters.HomePhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BusinessPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BusinessPhone, Parameters.BusinessPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GSM
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GSM, Parameters.GSM);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter GSM2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.GSM2, Parameters.GSM2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactEmail, Parameters.ContactEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AlternateContactName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AlternateContactName, Parameters.AlternateContactName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AlternateContactPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AlternateContactPhone, Parameters.AlternateContactPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EducationTypeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EducationTypeCode, Parameters.EducationTypeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MiddleSchoolName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MiddleSchoolName, Parameters.MiddleSchoolName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MiddleSchoolStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MiddleSchoolStatusID, Parameters.MiddleSchoolStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MiddleSchoolEndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MiddleSchoolEndDate, Parameters.MiddleSchoolEndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HighSchoolTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HighSchoolTypeID, Parameters.HighSchoolTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HighSchoolName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HighSchoolName, Parameters.HighSchoolName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HighSchoolEndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HighSchoolEndDate, Parameters.HighSchoolEndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HighSchoolStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HighSchoolStatusID, Parameters.HighSchoolStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TotalWorkExperience
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TotalWorkExperience, Parameters.TotalWorkExperience);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DriverLicenseTypeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DriverLicenseTypeID, Parameters.DriverLicenseTypeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DriverLicenseYear
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DriverLicenseYear, Parameters.DriverLicenseYear);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HasTravelDifficulty
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HasTravelDifficulty, Parameters.HasTravelDifficulty);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsSmoking
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsSmoking, Parameters.IsSmoking);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SeriousSickness
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SeriousSickness, Parameters.SeriousSickness);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhotoFileName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhotoFileName, Parameters.PhotoFileName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VideoFileName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VideoFileName, Parameters.VideoFileName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CourseAndCertificates
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CourseAndCertificates, Parameters.CourseAndCertificates);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Interests
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Interests, Parameters.Interests);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Clubs
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Clubs, Parameters.Clubs);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifyDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TestMatDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TestMatDate, Parameters.TestMatDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TestYetDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TestYetDate, Parameters.TestYetDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CvFocusCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CvFocusCode, Parameters.CvFocusCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter UserCVID
		    {
				get
		        {
					if(_UserCVID_W == null)
	        	    {
						_UserCVID_W = TearOff.UserCVID;
					}
					return _UserCVID_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter NationID
		    {
				get
		        {
					if(_NationID_W == null)
	        	    {
						_NationID_W = TearOff.NationID;
					}
					return _NationID_W;
				}
			}

			public WhereParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public WhereParameter BirthPlaceID
		    {
				get
		        {
					if(_BirthPlaceID_W == null)
	        	    {
						_BirthPlaceID_W = TearOff.BirthPlaceID;
					}
					return _BirthPlaceID_W;
				}
			}

			public WhereParameter OtherBirthPlaceName
		    {
				get
		        {
					if(_OtherBirthPlaceName_W == null)
	        	    {
						_OtherBirthPlaceName_W = TearOff.OtherBirthPlaceName;
					}
					return _OtherBirthPlaceName_W;
				}
			}

			public WhereParameter SexCode
		    {
				get
		        {
					if(_SexCode_W == null)
	        	    {
						_SexCode_W = TearOff.SexCode;
					}
					return _SexCode_W;
				}
			}

			public WhereParameter MaritalStatusID
		    {
				get
		        {
					if(_MaritalStatusID_W == null)
	        	    {
						_MaritalStatusID_W = TearOff.MaritalStatusID;
					}
					return _MaritalStatusID_W;
				}
			}

			public WhereParameter MilitaryStatusID
		    {
				get
		        {
					if(_MilitaryStatusID_W == null)
	        	    {
						_MilitaryStatusID_W = TearOff.MilitaryStatusID;
					}
					return _MilitaryStatusID_W;
				}
			}

			public WhereParameter MilitaryYear
		    {
				get
		        {
					if(_MilitaryYear_W == null)
	        	    {
						_MilitaryYear_W = TearOff.MilitaryYear;
					}
					return _MilitaryYear_W;
				}
			}

			public WhereParameter IsDisabled
		    {
				get
		        {
					if(_IsDisabled_W == null)
	        	    {
						_IsDisabled_W = TearOff.IsDisabled;
					}
					return _IsDisabled_W;
				}
			}

			public WhereParameter IsOldConvicted
		    {
				get
		        {
					if(_IsOldConvicted_W == null)
	        	    {
						_IsOldConvicted_W = TearOff.IsOldConvicted;
					}
					return _IsOldConvicted_W;
				}
			}

			public WhereParameter IsMartyrRelative
		    {
				get
		        {
					if(_IsMartyrRelative_W == null)
	        	    {
						_IsMartyrRelative_W = TearOff.IsMartyrRelative;
					}
					return _IsMartyrRelative_W;
				}
			}

			public WhereParameter IsTerrorWronged
		    {
				get
		        {
					if(_IsTerrorWronged_W == null)
	        	    {
						_IsTerrorWronged_W = TearOff.IsTerrorWronged;
					}
					return _IsTerrorWronged_W;
				}
			}

			public WhereParameter ChronicIllness
		    {
				get
		        {
					if(_ChronicIllness_W == null)
	        	    {
						_ChronicIllness_W = TearOff.ChronicIllness;
					}
					return _ChronicIllness_W;
				}
			}

			public WhereParameter HomeAddress
		    {
				get
		        {
					if(_HomeAddress_W == null)
	        	    {
						_HomeAddress_W = TearOff.HomeAddress;
					}
					return _HomeAddress_W;
				}
			}

			public WhereParameter HomeCountryID
		    {
				get
		        {
					if(_HomeCountryID_W == null)
	        	    {
						_HomeCountryID_W = TearOff.HomeCountryID;
					}
					return _HomeCountryID_W;
				}
			}

			public WhereParameter HomeCityID
		    {
				get
		        {
					if(_HomeCityID_W == null)
	        	    {
						_HomeCityID_W = TearOff.HomeCityID;
					}
					return _HomeCityID_W;
				}
			}

			public WhereParameter OtherHomeCityName
		    {
				get
		        {
					if(_OtherHomeCityName_W == null)
	        	    {
						_OtherHomeCityName_W = TearOff.OtherHomeCityName;
					}
					return _OtherHomeCityName_W;
				}
			}

			public WhereParameter HomePhone
		    {
				get
		        {
					if(_HomePhone_W == null)
	        	    {
						_HomePhone_W = TearOff.HomePhone;
					}
					return _HomePhone_W;
				}
			}

			public WhereParameter BusinessPhone
		    {
				get
		        {
					if(_BusinessPhone_W == null)
	        	    {
						_BusinessPhone_W = TearOff.BusinessPhone;
					}
					return _BusinessPhone_W;
				}
			}

			public WhereParameter GSM
		    {
				get
		        {
					if(_GSM_W == null)
	        	    {
						_GSM_W = TearOff.GSM;
					}
					return _GSM_W;
				}
			}

			public WhereParameter GSM2
		    {
				get
		        {
					if(_GSM2_W == null)
	        	    {
						_GSM2_W = TearOff.GSM2;
					}
					return _GSM2_W;
				}
			}

			public WhereParameter ContactEmail
		    {
				get
		        {
					if(_ContactEmail_W == null)
	        	    {
						_ContactEmail_W = TearOff.ContactEmail;
					}
					return _ContactEmail_W;
				}
			}

			public WhereParameter AlternateContactName
		    {
				get
		        {
					if(_AlternateContactName_W == null)
	        	    {
						_AlternateContactName_W = TearOff.AlternateContactName;
					}
					return _AlternateContactName_W;
				}
			}

			public WhereParameter AlternateContactPhone
		    {
				get
		        {
					if(_AlternateContactPhone_W == null)
	        	    {
						_AlternateContactPhone_W = TearOff.AlternateContactPhone;
					}
					return _AlternateContactPhone_W;
				}
			}

			public WhereParameter EducationTypeCode
		    {
				get
		        {
					if(_EducationTypeCode_W == null)
	        	    {
						_EducationTypeCode_W = TearOff.EducationTypeCode;
					}
					return _EducationTypeCode_W;
				}
			}

			public WhereParameter MiddleSchoolName
		    {
				get
		        {
					if(_MiddleSchoolName_W == null)
	        	    {
						_MiddleSchoolName_W = TearOff.MiddleSchoolName;
					}
					return _MiddleSchoolName_W;
				}
			}

			public WhereParameter MiddleSchoolStatusID
		    {
				get
		        {
					if(_MiddleSchoolStatusID_W == null)
	        	    {
						_MiddleSchoolStatusID_W = TearOff.MiddleSchoolStatusID;
					}
					return _MiddleSchoolStatusID_W;
				}
			}

			public WhereParameter MiddleSchoolEndDate
		    {
				get
		        {
					if(_MiddleSchoolEndDate_W == null)
	        	    {
						_MiddleSchoolEndDate_W = TearOff.MiddleSchoolEndDate;
					}
					return _MiddleSchoolEndDate_W;
				}
			}

			public WhereParameter HighSchoolTypeID
		    {
				get
		        {
					if(_HighSchoolTypeID_W == null)
	        	    {
						_HighSchoolTypeID_W = TearOff.HighSchoolTypeID;
					}
					return _HighSchoolTypeID_W;
				}
			}

			public WhereParameter HighSchoolName
		    {
				get
		        {
					if(_HighSchoolName_W == null)
	        	    {
						_HighSchoolName_W = TearOff.HighSchoolName;
					}
					return _HighSchoolName_W;
				}
			}

			public WhereParameter HighSchoolEndDate
		    {
				get
		        {
					if(_HighSchoolEndDate_W == null)
	        	    {
						_HighSchoolEndDate_W = TearOff.HighSchoolEndDate;
					}
					return _HighSchoolEndDate_W;
				}
			}

			public WhereParameter HighSchoolStatusID
		    {
				get
		        {
					if(_HighSchoolStatusID_W == null)
	        	    {
						_HighSchoolStatusID_W = TearOff.HighSchoolStatusID;
					}
					return _HighSchoolStatusID_W;
				}
			}

			public WhereParameter TotalWorkExperience
		    {
				get
		        {
					if(_TotalWorkExperience_W == null)
	        	    {
						_TotalWorkExperience_W = TearOff.TotalWorkExperience;
					}
					return _TotalWorkExperience_W;
				}
			}

			public WhereParameter DriverLicenseTypeID
		    {
				get
		        {
					if(_DriverLicenseTypeID_W == null)
	        	    {
						_DriverLicenseTypeID_W = TearOff.DriverLicenseTypeID;
					}
					return _DriverLicenseTypeID_W;
				}
			}

			public WhereParameter DriverLicenseYear
		    {
				get
		        {
					if(_DriverLicenseYear_W == null)
	        	    {
						_DriverLicenseYear_W = TearOff.DriverLicenseYear;
					}
					return _DriverLicenseYear_W;
				}
			}

			public WhereParameter HasTravelDifficulty
		    {
				get
		        {
					if(_HasTravelDifficulty_W == null)
	        	    {
						_HasTravelDifficulty_W = TearOff.HasTravelDifficulty;
					}
					return _HasTravelDifficulty_W;
				}
			}

			public WhereParameter IsSmoking
		    {
				get
		        {
					if(_IsSmoking_W == null)
	        	    {
						_IsSmoking_W = TearOff.IsSmoking;
					}
					return _IsSmoking_W;
				}
			}

			public WhereParameter SeriousSickness
		    {
				get
		        {
					if(_SeriousSickness_W == null)
	        	    {
						_SeriousSickness_W = TearOff.SeriousSickness;
					}
					return _SeriousSickness_W;
				}
			}

			public WhereParameter PhotoFileName
		    {
				get
		        {
					if(_PhotoFileName_W == null)
	        	    {
						_PhotoFileName_W = TearOff.PhotoFileName;
					}
					return _PhotoFileName_W;
				}
			}

			public WhereParameter VideoFileName
		    {
				get
		        {
					if(_VideoFileName_W == null)
	        	    {
						_VideoFileName_W = TearOff.VideoFileName;
					}
					return _VideoFileName_W;
				}
			}

			public WhereParameter CourseAndCertificates
		    {
				get
		        {
					if(_CourseAndCertificates_W == null)
	        	    {
						_CourseAndCertificates_W = TearOff.CourseAndCertificates;
					}
					return _CourseAndCertificates_W;
				}
			}

			public WhereParameter Interests
		    {
				get
		        {
					if(_Interests_W == null)
	        	    {
						_Interests_W = TearOff.Interests;
					}
					return _Interests_W;
				}
			}

			public WhereParameter Clubs
		    {
				get
		        {
					if(_Clubs_W == null)
	        	    {
						_Clubs_W = TearOff.Clubs;
					}
					return _Clubs_W;
				}
			}

			public WhereParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public WhereParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public WhereParameter TestMatDate
		    {
				get
		        {
					if(_TestMatDate_W == null)
	        	    {
						_TestMatDate_W = TearOff.TestMatDate;
					}
					return _TestMatDate_W;
				}
			}

			public WhereParameter TestYetDate
		    {
				get
		        {
					if(_TestYetDate_W == null)
	        	    {
						_TestYetDate_W = TearOff.TestYetDate;
					}
					return _TestYetDate_W;
				}
			}

			public WhereParameter CvFocusCode
		    {
				get
		        {
					if(_CvFocusCode_W == null)
	        	    {
						_CvFocusCode_W = TearOff.CvFocusCode;
					}
					return _CvFocusCode_W;
				}
			}

			private WhereParameter _UserCVID_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _NationID_W = null;
			private WhereParameter _BirthDate_W = null;
			private WhereParameter _BirthPlaceID_W = null;
			private WhereParameter _OtherBirthPlaceName_W = null;
			private WhereParameter _SexCode_W = null;
			private WhereParameter _MaritalStatusID_W = null;
			private WhereParameter _MilitaryStatusID_W = null;
			private WhereParameter _MilitaryYear_W = null;
			private WhereParameter _IsDisabled_W = null;
			private WhereParameter _IsOldConvicted_W = null;
			private WhereParameter _IsMartyrRelative_W = null;
			private WhereParameter _IsTerrorWronged_W = null;
			private WhereParameter _ChronicIllness_W = null;
			private WhereParameter _HomeAddress_W = null;
			private WhereParameter _HomeCountryID_W = null;
			private WhereParameter _HomeCityID_W = null;
			private WhereParameter _OtherHomeCityName_W = null;
			private WhereParameter _HomePhone_W = null;
			private WhereParameter _BusinessPhone_W = null;
			private WhereParameter _GSM_W = null;
			private WhereParameter _GSM2_W = null;
			private WhereParameter _ContactEmail_W = null;
			private WhereParameter _AlternateContactName_W = null;
			private WhereParameter _AlternateContactPhone_W = null;
			private WhereParameter _EducationTypeCode_W = null;
			private WhereParameter _MiddleSchoolName_W = null;
			private WhereParameter _MiddleSchoolStatusID_W = null;
			private WhereParameter _MiddleSchoolEndDate_W = null;
			private WhereParameter _HighSchoolTypeID_W = null;
			private WhereParameter _HighSchoolName_W = null;
			private WhereParameter _HighSchoolEndDate_W = null;
			private WhereParameter _HighSchoolStatusID_W = null;
			private WhereParameter _TotalWorkExperience_W = null;
			private WhereParameter _DriverLicenseTypeID_W = null;
			private WhereParameter _DriverLicenseYear_W = null;
			private WhereParameter _HasTravelDifficulty_W = null;
			private WhereParameter _IsSmoking_W = null;
			private WhereParameter _SeriousSickness_W = null;
			private WhereParameter _PhotoFileName_W = null;
			private WhereParameter _VideoFileName_W = null;
			private WhereParameter _CourseAndCertificates_W = null;
			private WhereParameter _Interests_W = null;
			private WhereParameter _Clubs_W = null;
			private WhereParameter _CreateDate_W = null;
			private WhereParameter _ModifyDate_W = null;
			private WhereParameter _TestMatDate_W = null;
			private WhereParameter _TestYetDate_W = null;
			private WhereParameter _CvFocusCode_W = null;

			public void WhereClauseReset()
			{
				_UserCVID_W = null;
				_UserID_W = null;
				_NationID_W = null;
				_BirthDate_W = null;
				_BirthPlaceID_W = null;
				_OtherBirthPlaceName_W = null;
				_SexCode_W = null;
				_MaritalStatusID_W = null;
				_MilitaryStatusID_W = null;
				_MilitaryYear_W = null;
				_IsDisabled_W = null;
				_IsOldConvicted_W = null;
				_IsMartyrRelative_W = null;
				_IsTerrorWronged_W = null;
				_ChronicIllness_W = null;
				_HomeAddress_W = null;
				_HomeCountryID_W = null;
				_HomeCityID_W = null;
				_OtherHomeCityName_W = null;
				_HomePhone_W = null;
				_BusinessPhone_W = null;
				_GSM_W = null;
				_GSM2_W = null;
				_ContactEmail_W = null;
				_AlternateContactName_W = null;
				_AlternateContactPhone_W = null;
				_EducationTypeCode_W = null;
				_MiddleSchoolName_W = null;
				_MiddleSchoolStatusID_W = null;
				_MiddleSchoolEndDate_W = null;
				_HighSchoolTypeID_W = null;
				_HighSchoolName_W = null;
				_HighSchoolEndDate_W = null;
				_HighSchoolStatusID_W = null;
				_TotalWorkExperience_W = null;
				_DriverLicenseTypeID_W = null;
				_DriverLicenseYear_W = null;
				_HasTravelDifficulty_W = null;
				_IsSmoking_W = null;
				_SeriousSickness_W = null;
				_PhotoFileName_W = null;
				_VideoFileName_W = null;
				_CourseAndCertificates_W = null;
				_Interests_W = null;
				_Clubs_W = null;
				_CreateDate_W = null;
				_ModifyDate_W = null;
				_TestMatDate_W = null;
				_TestYetDate_W = null;
				_CvFocusCode_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter UserCVID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserCVID, Parameters.UserCVID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NationID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NationID, Parameters.NationID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BirthDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BirthDate, Parameters.BirthDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BirthPlaceID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BirthPlaceID, Parameters.BirthPlaceID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OtherBirthPlaceName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OtherBirthPlaceName, Parameters.OtherBirthPlaceName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SexCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SexCode, Parameters.SexCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MaritalStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MaritalStatusID, Parameters.MaritalStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MilitaryStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MilitaryStatusID, Parameters.MilitaryStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MilitaryYear
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MilitaryYear, Parameters.MilitaryYear);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDisabled
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDisabled, Parameters.IsDisabled);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsOldConvicted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsOldConvicted, Parameters.IsOldConvicted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsMartyrRelative
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsMartyrRelative, Parameters.IsMartyrRelative);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsTerrorWronged
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsTerrorWronged, Parameters.IsTerrorWronged);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ChronicIllness
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ChronicIllness, Parameters.ChronicIllness);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HomeAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HomeAddress, Parameters.HomeAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HomeCountryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HomeCountryID, Parameters.HomeCountryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HomeCityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HomeCityID, Parameters.HomeCityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OtherHomeCityName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OtherHomeCityName, Parameters.OtherHomeCityName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HomePhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HomePhone, Parameters.HomePhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BusinessPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BusinessPhone, Parameters.BusinessPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GSM
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GSM, Parameters.GSM);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter GSM2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.GSM2, Parameters.GSM2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactEmail, Parameters.ContactEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AlternateContactName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AlternateContactName, Parameters.AlternateContactName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AlternateContactPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AlternateContactPhone, Parameters.AlternateContactPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EducationTypeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EducationTypeCode, Parameters.EducationTypeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MiddleSchoolName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MiddleSchoolName, Parameters.MiddleSchoolName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MiddleSchoolStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MiddleSchoolStatusID, Parameters.MiddleSchoolStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MiddleSchoolEndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MiddleSchoolEndDate, Parameters.MiddleSchoolEndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HighSchoolTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HighSchoolTypeID, Parameters.HighSchoolTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HighSchoolName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HighSchoolName, Parameters.HighSchoolName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HighSchoolEndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HighSchoolEndDate, Parameters.HighSchoolEndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HighSchoolStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HighSchoolStatusID, Parameters.HighSchoolStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TotalWorkExperience
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalWorkExperience, Parameters.TotalWorkExperience);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DriverLicenseTypeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DriverLicenseTypeID, Parameters.DriverLicenseTypeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DriverLicenseYear
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DriverLicenseYear, Parameters.DriverLicenseYear);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HasTravelDifficulty
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HasTravelDifficulty, Parameters.HasTravelDifficulty);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsSmoking
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsSmoking, Parameters.IsSmoking);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SeriousSickness
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SeriousSickness, Parameters.SeriousSickness);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhotoFileName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhotoFileName, Parameters.PhotoFileName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VideoFileName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VideoFileName, Parameters.VideoFileName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CourseAndCertificates
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CourseAndCertificates, Parameters.CourseAndCertificates);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Interests
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Interests, Parameters.Interests);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Clubs
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Clubs, Parameters.Clubs);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifyDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TestMatDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TestMatDate, Parameters.TestMatDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TestYetDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TestYetDate, Parameters.TestYetDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CvFocusCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CvFocusCode, Parameters.CvFocusCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter UserCVID
		    {
				get
		        {
					if(_UserCVID_W == null)
	        	    {
						_UserCVID_W = TearOff.UserCVID;
					}
					return _UserCVID_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter NationID
		    {
				get
		        {
					if(_NationID_W == null)
	        	    {
						_NationID_W = TearOff.NationID;
					}
					return _NationID_W;
				}
			}

			public AggregateParameter BirthDate
		    {
				get
		        {
					if(_BirthDate_W == null)
	        	    {
						_BirthDate_W = TearOff.BirthDate;
					}
					return _BirthDate_W;
				}
			}

			public AggregateParameter BirthPlaceID
		    {
				get
		        {
					if(_BirthPlaceID_W == null)
	        	    {
						_BirthPlaceID_W = TearOff.BirthPlaceID;
					}
					return _BirthPlaceID_W;
				}
			}

			public AggregateParameter OtherBirthPlaceName
		    {
				get
		        {
					if(_OtherBirthPlaceName_W == null)
	        	    {
						_OtherBirthPlaceName_W = TearOff.OtherBirthPlaceName;
					}
					return _OtherBirthPlaceName_W;
				}
			}

			public AggregateParameter SexCode
		    {
				get
		        {
					if(_SexCode_W == null)
	        	    {
						_SexCode_W = TearOff.SexCode;
					}
					return _SexCode_W;
				}
			}

			public AggregateParameter MaritalStatusID
		    {
				get
		        {
					if(_MaritalStatusID_W == null)
	        	    {
						_MaritalStatusID_W = TearOff.MaritalStatusID;
					}
					return _MaritalStatusID_W;
				}
			}

			public AggregateParameter MilitaryStatusID
		    {
				get
		        {
					if(_MilitaryStatusID_W == null)
	        	    {
						_MilitaryStatusID_W = TearOff.MilitaryStatusID;
					}
					return _MilitaryStatusID_W;
				}
			}

			public AggregateParameter MilitaryYear
		    {
				get
		        {
					if(_MilitaryYear_W == null)
	        	    {
						_MilitaryYear_W = TearOff.MilitaryYear;
					}
					return _MilitaryYear_W;
				}
			}

			public AggregateParameter IsDisabled
		    {
				get
		        {
					if(_IsDisabled_W == null)
	        	    {
						_IsDisabled_W = TearOff.IsDisabled;
					}
					return _IsDisabled_W;
				}
			}

			public AggregateParameter IsOldConvicted
		    {
				get
		        {
					if(_IsOldConvicted_W == null)
	        	    {
						_IsOldConvicted_W = TearOff.IsOldConvicted;
					}
					return _IsOldConvicted_W;
				}
			}

			public AggregateParameter IsMartyrRelative
		    {
				get
		        {
					if(_IsMartyrRelative_W == null)
	        	    {
						_IsMartyrRelative_W = TearOff.IsMartyrRelative;
					}
					return _IsMartyrRelative_W;
				}
			}

			public AggregateParameter IsTerrorWronged
		    {
				get
		        {
					if(_IsTerrorWronged_W == null)
	        	    {
						_IsTerrorWronged_W = TearOff.IsTerrorWronged;
					}
					return _IsTerrorWronged_W;
				}
			}

			public AggregateParameter ChronicIllness
		    {
				get
		        {
					if(_ChronicIllness_W == null)
	        	    {
						_ChronicIllness_W = TearOff.ChronicIllness;
					}
					return _ChronicIllness_W;
				}
			}

			public AggregateParameter HomeAddress
		    {
				get
		        {
					if(_HomeAddress_W == null)
	        	    {
						_HomeAddress_W = TearOff.HomeAddress;
					}
					return _HomeAddress_W;
				}
			}

			public AggregateParameter HomeCountryID
		    {
				get
		        {
					if(_HomeCountryID_W == null)
	        	    {
						_HomeCountryID_W = TearOff.HomeCountryID;
					}
					return _HomeCountryID_W;
				}
			}

			public AggregateParameter HomeCityID
		    {
				get
		        {
					if(_HomeCityID_W == null)
	        	    {
						_HomeCityID_W = TearOff.HomeCityID;
					}
					return _HomeCityID_W;
				}
			}

			public AggregateParameter OtherHomeCityName
		    {
				get
		        {
					if(_OtherHomeCityName_W == null)
	        	    {
						_OtherHomeCityName_W = TearOff.OtherHomeCityName;
					}
					return _OtherHomeCityName_W;
				}
			}

			public AggregateParameter HomePhone
		    {
				get
		        {
					if(_HomePhone_W == null)
	        	    {
						_HomePhone_W = TearOff.HomePhone;
					}
					return _HomePhone_W;
				}
			}

			public AggregateParameter BusinessPhone
		    {
				get
		        {
					if(_BusinessPhone_W == null)
	        	    {
						_BusinessPhone_W = TearOff.BusinessPhone;
					}
					return _BusinessPhone_W;
				}
			}

			public AggregateParameter GSM
		    {
				get
		        {
					if(_GSM_W == null)
	        	    {
						_GSM_W = TearOff.GSM;
					}
					return _GSM_W;
				}
			}

			public AggregateParameter GSM2
		    {
				get
		        {
					if(_GSM2_W == null)
	        	    {
						_GSM2_W = TearOff.GSM2;
					}
					return _GSM2_W;
				}
			}

			public AggregateParameter ContactEmail
		    {
				get
		        {
					if(_ContactEmail_W == null)
	        	    {
						_ContactEmail_W = TearOff.ContactEmail;
					}
					return _ContactEmail_W;
				}
			}

			public AggregateParameter AlternateContactName
		    {
				get
		        {
					if(_AlternateContactName_W == null)
	        	    {
						_AlternateContactName_W = TearOff.AlternateContactName;
					}
					return _AlternateContactName_W;
				}
			}

			public AggregateParameter AlternateContactPhone
		    {
				get
		        {
					if(_AlternateContactPhone_W == null)
	        	    {
						_AlternateContactPhone_W = TearOff.AlternateContactPhone;
					}
					return _AlternateContactPhone_W;
				}
			}

			public AggregateParameter EducationTypeCode
		    {
				get
		        {
					if(_EducationTypeCode_W == null)
	        	    {
						_EducationTypeCode_W = TearOff.EducationTypeCode;
					}
					return _EducationTypeCode_W;
				}
			}

			public AggregateParameter MiddleSchoolName
		    {
				get
		        {
					if(_MiddleSchoolName_W == null)
	        	    {
						_MiddleSchoolName_W = TearOff.MiddleSchoolName;
					}
					return _MiddleSchoolName_W;
				}
			}

			public AggregateParameter MiddleSchoolStatusID
		    {
				get
		        {
					if(_MiddleSchoolStatusID_W == null)
	        	    {
						_MiddleSchoolStatusID_W = TearOff.MiddleSchoolStatusID;
					}
					return _MiddleSchoolStatusID_W;
				}
			}

			public AggregateParameter MiddleSchoolEndDate
		    {
				get
		        {
					if(_MiddleSchoolEndDate_W == null)
	        	    {
						_MiddleSchoolEndDate_W = TearOff.MiddleSchoolEndDate;
					}
					return _MiddleSchoolEndDate_W;
				}
			}

			public AggregateParameter HighSchoolTypeID
		    {
				get
		        {
					if(_HighSchoolTypeID_W == null)
	        	    {
						_HighSchoolTypeID_W = TearOff.HighSchoolTypeID;
					}
					return _HighSchoolTypeID_W;
				}
			}

			public AggregateParameter HighSchoolName
		    {
				get
		        {
					if(_HighSchoolName_W == null)
	        	    {
						_HighSchoolName_W = TearOff.HighSchoolName;
					}
					return _HighSchoolName_W;
				}
			}

			public AggregateParameter HighSchoolEndDate
		    {
				get
		        {
					if(_HighSchoolEndDate_W == null)
	        	    {
						_HighSchoolEndDate_W = TearOff.HighSchoolEndDate;
					}
					return _HighSchoolEndDate_W;
				}
			}

			public AggregateParameter HighSchoolStatusID
		    {
				get
		        {
					if(_HighSchoolStatusID_W == null)
	        	    {
						_HighSchoolStatusID_W = TearOff.HighSchoolStatusID;
					}
					return _HighSchoolStatusID_W;
				}
			}

			public AggregateParameter TotalWorkExperience
		    {
				get
		        {
					if(_TotalWorkExperience_W == null)
	        	    {
						_TotalWorkExperience_W = TearOff.TotalWorkExperience;
					}
					return _TotalWorkExperience_W;
				}
			}

			public AggregateParameter DriverLicenseTypeID
		    {
				get
		        {
					if(_DriverLicenseTypeID_W == null)
	        	    {
						_DriverLicenseTypeID_W = TearOff.DriverLicenseTypeID;
					}
					return _DriverLicenseTypeID_W;
				}
			}

			public AggregateParameter DriverLicenseYear
		    {
				get
		        {
					if(_DriverLicenseYear_W == null)
	        	    {
						_DriverLicenseYear_W = TearOff.DriverLicenseYear;
					}
					return _DriverLicenseYear_W;
				}
			}

			public AggregateParameter HasTravelDifficulty
		    {
				get
		        {
					if(_HasTravelDifficulty_W == null)
	        	    {
						_HasTravelDifficulty_W = TearOff.HasTravelDifficulty;
					}
					return _HasTravelDifficulty_W;
				}
			}

			public AggregateParameter IsSmoking
		    {
				get
		        {
					if(_IsSmoking_W == null)
	        	    {
						_IsSmoking_W = TearOff.IsSmoking;
					}
					return _IsSmoking_W;
				}
			}

			public AggregateParameter SeriousSickness
		    {
				get
		        {
					if(_SeriousSickness_W == null)
	        	    {
						_SeriousSickness_W = TearOff.SeriousSickness;
					}
					return _SeriousSickness_W;
				}
			}

			public AggregateParameter PhotoFileName
		    {
				get
		        {
					if(_PhotoFileName_W == null)
	        	    {
						_PhotoFileName_W = TearOff.PhotoFileName;
					}
					return _PhotoFileName_W;
				}
			}

			public AggregateParameter VideoFileName
		    {
				get
		        {
					if(_VideoFileName_W == null)
	        	    {
						_VideoFileName_W = TearOff.VideoFileName;
					}
					return _VideoFileName_W;
				}
			}

			public AggregateParameter CourseAndCertificates
		    {
				get
		        {
					if(_CourseAndCertificates_W == null)
	        	    {
						_CourseAndCertificates_W = TearOff.CourseAndCertificates;
					}
					return _CourseAndCertificates_W;
				}
			}

			public AggregateParameter Interests
		    {
				get
		        {
					if(_Interests_W == null)
	        	    {
						_Interests_W = TearOff.Interests;
					}
					return _Interests_W;
				}
			}

			public AggregateParameter Clubs
		    {
				get
		        {
					if(_Clubs_W == null)
	        	    {
						_Clubs_W = TearOff.Clubs;
					}
					return _Clubs_W;
				}
			}

			public AggregateParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public AggregateParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public AggregateParameter TestMatDate
		    {
				get
		        {
					if(_TestMatDate_W == null)
	        	    {
						_TestMatDate_W = TearOff.TestMatDate;
					}
					return _TestMatDate_W;
				}
			}

			public AggregateParameter TestYetDate
		    {
				get
		        {
					if(_TestYetDate_W == null)
	        	    {
						_TestYetDate_W = TearOff.TestYetDate;
					}
					return _TestYetDate_W;
				}
			}

			public AggregateParameter CvFocusCode
		    {
				get
		        {
					if(_CvFocusCode_W == null)
	        	    {
						_CvFocusCode_W = TearOff.CvFocusCode;
					}
					return _CvFocusCode_W;
				}
			}

			private AggregateParameter _UserCVID_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _NationID_W = null;
			private AggregateParameter _BirthDate_W = null;
			private AggregateParameter _BirthPlaceID_W = null;
			private AggregateParameter _OtherBirthPlaceName_W = null;
			private AggregateParameter _SexCode_W = null;
			private AggregateParameter _MaritalStatusID_W = null;
			private AggregateParameter _MilitaryStatusID_W = null;
			private AggregateParameter _MilitaryYear_W = null;
			private AggregateParameter _IsDisabled_W = null;
			private AggregateParameter _IsOldConvicted_W = null;
			private AggregateParameter _IsMartyrRelative_W = null;
			private AggregateParameter _IsTerrorWronged_W = null;
			private AggregateParameter _ChronicIllness_W = null;
			private AggregateParameter _HomeAddress_W = null;
			private AggregateParameter _HomeCountryID_W = null;
			private AggregateParameter _HomeCityID_W = null;
			private AggregateParameter _OtherHomeCityName_W = null;
			private AggregateParameter _HomePhone_W = null;
			private AggregateParameter _BusinessPhone_W = null;
			private AggregateParameter _GSM_W = null;
			private AggregateParameter _GSM2_W = null;
			private AggregateParameter _ContactEmail_W = null;
			private AggregateParameter _AlternateContactName_W = null;
			private AggregateParameter _AlternateContactPhone_W = null;
			private AggregateParameter _EducationTypeCode_W = null;
			private AggregateParameter _MiddleSchoolName_W = null;
			private AggregateParameter _MiddleSchoolStatusID_W = null;
			private AggregateParameter _MiddleSchoolEndDate_W = null;
			private AggregateParameter _HighSchoolTypeID_W = null;
			private AggregateParameter _HighSchoolName_W = null;
			private AggregateParameter _HighSchoolEndDate_W = null;
			private AggregateParameter _HighSchoolStatusID_W = null;
			private AggregateParameter _TotalWorkExperience_W = null;
			private AggregateParameter _DriverLicenseTypeID_W = null;
			private AggregateParameter _DriverLicenseYear_W = null;
			private AggregateParameter _HasTravelDifficulty_W = null;
			private AggregateParameter _IsSmoking_W = null;
			private AggregateParameter _SeriousSickness_W = null;
			private AggregateParameter _PhotoFileName_W = null;
			private AggregateParameter _VideoFileName_W = null;
			private AggregateParameter _CourseAndCertificates_W = null;
			private AggregateParameter _Interests_W = null;
			private AggregateParameter _Clubs_W = null;
			private AggregateParameter _CreateDate_W = null;
			private AggregateParameter _ModifyDate_W = null;
			private AggregateParameter _TestMatDate_W = null;
			private AggregateParameter _TestYetDate_W = null;
			private AggregateParameter _CvFocusCode_W = null;

			public void AggregateClauseReset()
			{
				_UserCVID_W = null;
				_UserID_W = null;
				_NationID_W = null;
				_BirthDate_W = null;
				_BirthPlaceID_W = null;
				_OtherBirthPlaceName_W = null;
				_SexCode_W = null;
				_MaritalStatusID_W = null;
				_MilitaryStatusID_W = null;
				_MilitaryYear_W = null;
				_IsDisabled_W = null;
				_IsOldConvicted_W = null;
				_IsMartyrRelative_W = null;
				_IsTerrorWronged_W = null;
				_ChronicIllness_W = null;
				_HomeAddress_W = null;
				_HomeCountryID_W = null;
				_HomeCityID_W = null;
				_OtherHomeCityName_W = null;
				_HomePhone_W = null;
				_BusinessPhone_W = null;
				_GSM_W = null;
				_GSM2_W = null;
				_ContactEmail_W = null;
				_AlternateContactName_W = null;
				_AlternateContactPhone_W = null;
				_EducationTypeCode_W = null;
				_MiddleSchoolName_W = null;
				_MiddleSchoolStatusID_W = null;
				_MiddleSchoolEndDate_W = null;
				_HighSchoolTypeID_W = null;
				_HighSchoolName_W = null;
				_HighSchoolEndDate_W = null;
				_HighSchoolStatusID_W = null;
				_TotalWorkExperience_W = null;
				_DriverLicenseTypeID_W = null;
				_DriverLicenseYear_W = null;
				_HasTravelDifficulty_W = null;
				_IsSmoking_W = null;
				_SeriousSickness_W = null;
				_PhotoFileName_W = null;
				_VideoFileName_W = null;
				_CourseAndCertificates_W = null;
				_Interests_W = null;
				_Clubs_W = null;
				_CreateDate_W = null;
				_ModifyDate_W = null;
				_TestMatDate_W = null;
				_TestYetDate_W = null;
				_CvFocusCode_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserCVsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.UserCVID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserCVsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserCVsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.UserCVID);
			p.SourceColumn = ColumnNames.UserCVID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.UserCVID);
			p.SourceColumn = ColumnNames.UserCVID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NationID);
			p.SourceColumn = ColumnNames.NationID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BirthDate);
			p.SourceColumn = ColumnNames.BirthDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BirthPlaceID);
			p.SourceColumn = ColumnNames.BirthPlaceID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OtherBirthPlaceName);
			p.SourceColumn = ColumnNames.OtherBirthPlaceName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SexCode);
			p.SourceColumn = ColumnNames.SexCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MaritalStatusID);
			p.SourceColumn = ColumnNames.MaritalStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MilitaryStatusID);
			p.SourceColumn = ColumnNames.MilitaryStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MilitaryYear);
			p.SourceColumn = ColumnNames.MilitaryYear;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsDisabled);
			p.SourceColumn = ColumnNames.IsDisabled;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsOldConvicted);
			p.SourceColumn = ColumnNames.IsOldConvicted;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsMartyrRelative);
			p.SourceColumn = ColumnNames.IsMartyrRelative;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsTerrorWronged);
			p.SourceColumn = ColumnNames.IsTerrorWronged;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ChronicIllness);
			p.SourceColumn = ColumnNames.ChronicIllness;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HomeAddress);
			p.SourceColumn = ColumnNames.HomeAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HomeCountryID);
			p.SourceColumn = ColumnNames.HomeCountryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HomeCityID);
			p.SourceColumn = ColumnNames.HomeCityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OtherHomeCityName);
			p.SourceColumn = ColumnNames.OtherHomeCityName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HomePhone);
			p.SourceColumn = ColumnNames.HomePhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BusinessPhone);
			p.SourceColumn = ColumnNames.BusinessPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GSM);
			p.SourceColumn = ColumnNames.GSM;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.GSM2);
			p.SourceColumn = ColumnNames.GSM2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactEmail);
			p.SourceColumn = ColumnNames.ContactEmail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AlternateContactName);
			p.SourceColumn = ColumnNames.AlternateContactName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AlternateContactPhone);
			p.SourceColumn = ColumnNames.AlternateContactPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EducationTypeCode);
			p.SourceColumn = ColumnNames.EducationTypeCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MiddleSchoolName);
			p.SourceColumn = ColumnNames.MiddleSchoolName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MiddleSchoolStatusID);
			p.SourceColumn = ColumnNames.MiddleSchoolStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MiddleSchoolEndDate);
			p.SourceColumn = ColumnNames.MiddleSchoolEndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HighSchoolTypeID);
			p.SourceColumn = ColumnNames.HighSchoolTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HighSchoolName);
			p.SourceColumn = ColumnNames.HighSchoolName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HighSchoolEndDate);
			p.SourceColumn = ColumnNames.HighSchoolEndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HighSchoolStatusID);
			p.SourceColumn = ColumnNames.HighSchoolStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TotalWorkExperience);
			p.SourceColumn = ColumnNames.TotalWorkExperience;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DriverLicenseTypeID);
			p.SourceColumn = ColumnNames.DriverLicenseTypeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DriverLicenseYear);
			p.SourceColumn = ColumnNames.DriverLicenseYear;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.HasTravelDifficulty);
			p.SourceColumn = ColumnNames.HasTravelDifficulty;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsSmoking);
			p.SourceColumn = ColumnNames.IsSmoking;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SeriousSickness);
			p.SourceColumn = ColumnNames.SeriousSickness;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhotoFileName);
			p.SourceColumn = ColumnNames.PhotoFileName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VideoFileName);
			p.SourceColumn = ColumnNames.VideoFileName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CourseAndCertificates);
			p.SourceColumn = ColumnNames.CourseAndCertificates;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Interests);
			p.SourceColumn = ColumnNames.Interests;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Clubs);
			p.SourceColumn = ColumnNames.Clubs;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreateDate);
			p.SourceColumn = ColumnNames.CreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifyDate);
			p.SourceColumn = ColumnNames.ModifyDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TestMatDate);
			p.SourceColumn = ColumnNames.TestMatDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TestYetDate);
			p.SourceColumn = ColumnNames.TestYetDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CvFocusCode);
			p.SourceColumn = ColumnNames.CvFocusCode;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
