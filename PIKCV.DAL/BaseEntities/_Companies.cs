
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _Companies : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _Companies()
		{
			this.QuerySource = "Companies";
			this.MappingName = "Companies";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CompaniesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int CompanyID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.CompanyID, CompanyID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CompaniesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter CompanyID
			{
				get
				{
					return new SqlParameter("@CompanyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyName
			{
				get
				{
					return new SqlParameter("@CompanyName", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter CompanyDescription
			{
				get
				{
					return new SqlParameter("@CompanyDescription", SqlDbType.NVarChar, 1024);
				}
			}
			
			public static SqlParameter PhotoFileName
			{
				get
				{
					return new SqlParameter("@PhotoFileName", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter UserName
			{
				get
				{
					return new SqlParameter("@UserName", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter Password
			{
				get
				{
					return new SqlParameter("@Password", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter ContactName
			{
				get
				{
					return new SqlParameter("@ContactName", SqlDbType.NVarChar, 32);
				}
			}
			
			public static SqlParameter ContactLastName
			{
				get
				{
					return new SqlParameter("@ContactLastName", SqlDbType.NVarChar, 32);
				}
			}
			
			public static SqlParameter ContactTitle
			{
				get
				{
					return new SqlParameter("@ContactTitle", SqlDbType.NVarChar, 16);
				}
			}
			
			public static SqlParameter ContactEmail
			{
				get
				{
					return new SqlParameter("@ContactEmail", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter CountryID
			{
				get
				{
					return new SqlParameter("@CountryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CityID
			{
				get
				{
					return new SqlParameter("@CityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OtherCity
			{
				get
				{
					return new SqlParameter("@OtherCity", SqlDbType.NVarChar, 24);
				}
			}
			
			public static SqlParameter TownID
			{
				get
				{
					return new SqlParameter("@TownID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OtherTown
			{
				get
				{
					return new SqlParameter("@OtherTown", SqlDbType.NVarChar, 24);
				}
			}
			
			public static SqlParameter StreetAddress
			{
				get
				{
					return new SqlParameter("@StreetAddress", SqlDbType.NVarChar, 255);
				}
			}
			
			public static SqlParameter PostalCode
			{
				get
				{
					return new SqlParameter("@PostalCode", SqlDbType.VarChar, 12);
				}
			}
			
			public static SqlParameter PhoneCountryCode
			{
				get
				{
					return new SqlParameter("@PhoneCountryCode", SqlDbType.VarChar, 4);
				}
			}
			
			public static SqlParameter PhoneAreaCode
			{
				get
				{
					return new SqlParameter("@PhoneAreaCode", SqlDbType.NVarChar, 8);
				}
			}
			
			public static SqlParameter Phone
			{
				get
				{
					return new SqlParameter("@Phone", SqlDbType.NVarChar, 20);
				}
			}
			
			public static SqlParameter FaxCountryCode
			{
				get
				{
					return new SqlParameter("@FaxCountryCode", SqlDbType.VarChar, 4);
				}
			}
			
			public static SqlParameter FaxAreaCode
			{
				get
				{
					return new SqlParameter("@FaxAreaCode", SqlDbType.VarChar, 8);
				}
			}
			
			public static SqlParameter Fax
			{
				get
				{
					return new SqlParameter("@Fax", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter TaxNumber
			{
				get
				{
					return new SqlParameter("@TaxNumber", SqlDbType.VarChar, 16);
				}
			}
			
			public static SqlParameter TaxOffice
			{
				get
				{
					return new SqlParameter("@TaxOffice", SqlDbType.NVarChar, 24);
				}
			}
			
			public static SqlParameter Credits
			{
				get
				{
					return new SqlParameter("@Credits", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter MaxLoan
			{
				get
				{
					return new SqlParameter("@MaxLoan", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter RepresentativeID
			{
				get
				{
					return new SqlParameter("@RepresentativeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter NumberOfWorkers
			{
				get
				{
					return new SqlParameter("@NumberOfWorkers", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ActivationNumber
			{
				get
				{
					return new SqlParameter("@ActivationNumber", SqlDbType.Char, 20);
				}
			}
			
			public static SqlParameter IsEmailConfirmed
			{
				get
				{
					return new SqlParameter("@IsEmailConfirmed", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter RegisterDate
			{
				get
				{
					return new SqlParameter("@RegisterDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter LastLoginDate
			{
				get
				{
					return new SqlParameter("@LastLoginDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter SecretQuestion
			{
				get
				{
					return new SqlParameter("@SecretQuestion", SqlDbType.NVarChar, 512);
				}
			}
			
			public static SqlParameter SecretAnswer
			{
				get
				{
					return new SqlParameter("@SecretAnswer", SqlDbType.NVarChar, 512);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsDeleted
			{
				get
				{
					return new SqlParameter("@IsDeleted", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter IsFirstLogin
			{
				get
				{
					return new SqlParameter("@IsFirstLogin", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter CompanyRepresentative
			{
				get
				{
					return new SqlParameter("@CompanyRepresentative", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string CompanyID = "CompanyID";
            public const string CompanyName = "CompanyName";
            public const string CompanyDescription = "CompanyDescription";
            public const string PhotoFileName = "PhotoFileName";
            public const string UserName = "UserName";
            public const string Password = "Password";
            public const string ContactName = "ContactName";
            public const string ContactLastName = "ContactLastName";
            public const string ContactTitle = "ContactTitle";
            public const string ContactEmail = "ContactEmail";
            public const string CountryID = "CountryID";
            public const string CityID = "CityID";
            public const string OtherCity = "OtherCity";
            public const string TownID = "TownID";
            public const string OtherTown = "OtherTown";
            public const string StreetAddress = "StreetAddress";
            public const string PostalCode = "PostalCode";
            public const string PhoneCountryCode = "PhoneCountryCode";
            public const string PhoneAreaCode = "PhoneAreaCode";
            public const string Phone = "Phone";
            public const string FaxCountryCode = "FaxCountryCode";
            public const string FaxAreaCode = "FaxAreaCode";
            public const string Fax = "Fax";
            public const string TaxNumber = "TaxNumber";
            public const string TaxOffice = "TaxOffice";
            public const string Credits = "Credits";
            public const string MaxLoan = "MaxLoan";
            public const string RepresentativeID = "RepresentativeID";
            public const string NumberOfWorkers = "NumberOfWorkers";
            public const string ActivationNumber = "ActivationNumber";
            public const string IsEmailConfirmed = "IsEmailConfirmed";
            public const string RegisterDate = "RegisterDate";
            public const string LastLoginDate = "LastLoginDate";
            public const string SecretQuestion = "SecretQuestion";
            public const string SecretAnswer = "SecretAnswer";
            public const string IsActive = "IsActive";
            public const string IsDeleted = "IsDeleted";
            public const string IsFirstLogin = "IsFirstLogin";
            public const string CompanyRepresentative = "CompanyRepresentative";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CompanyID] = _Companies.PropertyNames.CompanyID;
					ht[CompanyName] = _Companies.PropertyNames.CompanyName;
					ht[CompanyDescription] = _Companies.PropertyNames.CompanyDescription;
					ht[PhotoFileName] = _Companies.PropertyNames.PhotoFileName;
					ht[UserName] = _Companies.PropertyNames.UserName;
					ht[Password] = _Companies.PropertyNames.Password;
					ht[ContactName] = _Companies.PropertyNames.ContactName;
					ht[ContactLastName] = _Companies.PropertyNames.ContactLastName;
					ht[ContactTitle] = _Companies.PropertyNames.ContactTitle;
					ht[ContactEmail] = _Companies.PropertyNames.ContactEmail;
					ht[CountryID] = _Companies.PropertyNames.CountryID;
					ht[CityID] = _Companies.PropertyNames.CityID;
					ht[OtherCity] = _Companies.PropertyNames.OtherCity;
					ht[TownID] = _Companies.PropertyNames.TownID;
					ht[OtherTown] = _Companies.PropertyNames.OtherTown;
					ht[StreetAddress] = _Companies.PropertyNames.StreetAddress;
					ht[PostalCode] = _Companies.PropertyNames.PostalCode;
					ht[PhoneCountryCode] = _Companies.PropertyNames.PhoneCountryCode;
					ht[PhoneAreaCode] = _Companies.PropertyNames.PhoneAreaCode;
					ht[Phone] = _Companies.PropertyNames.Phone;
					ht[FaxCountryCode] = _Companies.PropertyNames.FaxCountryCode;
					ht[FaxAreaCode] = _Companies.PropertyNames.FaxAreaCode;
					ht[Fax] = _Companies.PropertyNames.Fax;
					ht[TaxNumber] = _Companies.PropertyNames.TaxNumber;
					ht[TaxOffice] = _Companies.PropertyNames.TaxOffice;
					ht[Credits] = _Companies.PropertyNames.Credits;
					ht[MaxLoan] = _Companies.PropertyNames.MaxLoan;
					ht[RepresentativeID] = _Companies.PropertyNames.RepresentativeID;
					ht[NumberOfWorkers] = _Companies.PropertyNames.NumberOfWorkers;
					ht[ActivationNumber] = _Companies.PropertyNames.ActivationNumber;
					ht[IsEmailConfirmed] = _Companies.PropertyNames.IsEmailConfirmed;
					ht[RegisterDate] = _Companies.PropertyNames.RegisterDate;
					ht[LastLoginDate] = _Companies.PropertyNames.LastLoginDate;
					ht[SecretQuestion] = _Companies.PropertyNames.SecretQuestion;
					ht[SecretAnswer] = _Companies.PropertyNames.SecretAnswer;
					ht[IsActive] = _Companies.PropertyNames.IsActive;
					ht[IsDeleted] = _Companies.PropertyNames.IsDeleted;
					ht[IsFirstLogin] = _Companies.PropertyNames.IsFirstLogin;
					ht[CompanyRepresentative] = _Companies.PropertyNames.CompanyRepresentative;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string CompanyID = "CompanyID";
            public const string CompanyName = "CompanyName";
            public const string CompanyDescription = "CompanyDescription";
            public const string PhotoFileName = "PhotoFileName";
            public const string UserName = "UserName";
            public const string Password = "Password";
            public const string ContactName = "ContactName";
            public const string ContactLastName = "ContactLastName";
            public const string ContactTitle = "ContactTitle";
            public const string ContactEmail = "ContactEmail";
            public const string CountryID = "CountryID";
            public const string CityID = "CityID";
            public const string OtherCity = "OtherCity";
            public const string TownID = "TownID";
            public const string OtherTown = "OtherTown";
            public const string StreetAddress = "StreetAddress";
            public const string PostalCode = "PostalCode";
            public const string PhoneCountryCode = "PhoneCountryCode";
            public const string PhoneAreaCode = "PhoneAreaCode";
            public const string Phone = "Phone";
            public const string FaxCountryCode = "FaxCountryCode";
            public const string FaxAreaCode = "FaxAreaCode";
            public const string Fax = "Fax";
            public const string TaxNumber = "TaxNumber";
            public const string TaxOffice = "TaxOffice";
            public const string Credits = "Credits";
            public const string MaxLoan = "MaxLoan";
            public const string RepresentativeID = "RepresentativeID";
            public const string NumberOfWorkers = "NumberOfWorkers";
            public const string ActivationNumber = "ActivationNumber";
            public const string IsEmailConfirmed = "IsEmailConfirmed";
            public const string RegisterDate = "RegisterDate";
            public const string LastLoginDate = "LastLoginDate";
            public const string SecretQuestion = "SecretQuestion";
            public const string SecretAnswer = "SecretAnswer";
            public const string IsActive = "IsActive";
            public const string IsDeleted = "IsDeleted";
            public const string IsFirstLogin = "IsFirstLogin";
            public const string CompanyRepresentative = "CompanyRepresentative";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CompanyID] = _Companies.ColumnNames.CompanyID;
					ht[CompanyName] = _Companies.ColumnNames.CompanyName;
					ht[CompanyDescription] = _Companies.ColumnNames.CompanyDescription;
					ht[PhotoFileName] = _Companies.ColumnNames.PhotoFileName;
					ht[UserName] = _Companies.ColumnNames.UserName;
					ht[Password] = _Companies.ColumnNames.Password;
					ht[ContactName] = _Companies.ColumnNames.ContactName;
					ht[ContactLastName] = _Companies.ColumnNames.ContactLastName;
					ht[ContactTitle] = _Companies.ColumnNames.ContactTitle;
					ht[ContactEmail] = _Companies.ColumnNames.ContactEmail;
					ht[CountryID] = _Companies.ColumnNames.CountryID;
					ht[CityID] = _Companies.ColumnNames.CityID;
					ht[OtherCity] = _Companies.ColumnNames.OtherCity;
					ht[TownID] = _Companies.ColumnNames.TownID;
					ht[OtherTown] = _Companies.ColumnNames.OtherTown;
					ht[StreetAddress] = _Companies.ColumnNames.StreetAddress;
					ht[PostalCode] = _Companies.ColumnNames.PostalCode;
					ht[PhoneCountryCode] = _Companies.ColumnNames.PhoneCountryCode;
					ht[PhoneAreaCode] = _Companies.ColumnNames.PhoneAreaCode;
					ht[Phone] = _Companies.ColumnNames.Phone;
					ht[FaxCountryCode] = _Companies.ColumnNames.FaxCountryCode;
					ht[FaxAreaCode] = _Companies.ColumnNames.FaxAreaCode;
					ht[Fax] = _Companies.ColumnNames.Fax;
					ht[TaxNumber] = _Companies.ColumnNames.TaxNumber;
					ht[TaxOffice] = _Companies.ColumnNames.TaxOffice;
					ht[Credits] = _Companies.ColumnNames.Credits;
					ht[MaxLoan] = _Companies.ColumnNames.MaxLoan;
					ht[RepresentativeID] = _Companies.ColumnNames.RepresentativeID;
					ht[NumberOfWorkers] = _Companies.ColumnNames.NumberOfWorkers;
					ht[ActivationNumber] = _Companies.ColumnNames.ActivationNumber;
					ht[IsEmailConfirmed] = _Companies.ColumnNames.IsEmailConfirmed;
					ht[RegisterDate] = _Companies.ColumnNames.RegisterDate;
					ht[LastLoginDate] = _Companies.ColumnNames.LastLoginDate;
					ht[SecretQuestion] = _Companies.ColumnNames.SecretQuestion;
					ht[SecretAnswer] = _Companies.ColumnNames.SecretAnswer;
					ht[IsActive] = _Companies.ColumnNames.IsActive;
					ht[IsDeleted] = _Companies.ColumnNames.IsDeleted;
					ht[IsFirstLogin] = _Companies.ColumnNames.IsFirstLogin;
					ht[CompanyRepresentative] = _Companies.ColumnNames.CompanyRepresentative;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string CompanyID = "s_CompanyID";
            public const string CompanyName = "s_CompanyName";
            public const string CompanyDescription = "s_CompanyDescription";
            public const string PhotoFileName = "s_PhotoFileName";
            public const string UserName = "s_UserName";
            public const string Password = "s_Password";
            public const string ContactName = "s_ContactName";
            public const string ContactLastName = "s_ContactLastName";
            public const string ContactTitle = "s_ContactTitle";
            public const string ContactEmail = "s_ContactEmail";
            public const string CountryID = "s_CountryID";
            public const string CityID = "s_CityID";
            public const string OtherCity = "s_OtherCity";
            public const string TownID = "s_TownID";
            public const string OtherTown = "s_OtherTown";
            public const string StreetAddress = "s_StreetAddress";
            public const string PostalCode = "s_PostalCode";
            public const string PhoneCountryCode = "s_PhoneCountryCode";
            public const string PhoneAreaCode = "s_PhoneAreaCode";
            public const string Phone = "s_Phone";
            public const string FaxCountryCode = "s_FaxCountryCode";
            public const string FaxAreaCode = "s_FaxAreaCode";
            public const string Fax = "s_Fax";
            public const string TaxNumber = "s_TaxNumber";
            public const string TaxOffice = "s_TaxOffice";
            public const string Credits = "s_Credits";
            public const string MaxLoan = "s_MaxLoan";
            public const string RepresentativeID = "s_RepresentativeID";
            public const string NumberOfWorkers = "s_NumberOfWorkers";
            public const string ActivationNumber = "s_ActivationNumber";
            public const string IsEmailConfirmed = "s_IsEmailConfirmed";
            public const string RegisterDate = "s_RegisterDate";
            public const string LastLoginDate = "s_LastLoginDate";
            public const string SecretQuestion = "s_SecretQuestion";
            public const string SecretAnswer = "s_SecretAnswer";
            public const string IsActive = "s_IsActive";
            public const string IsDeleted = "s_IsDeleted";
            public const string IsFirstLogin = "s_IsFirstLogin";
            public const string CompanyRepresentative = "s_CompanyRepresentative";

		}
		#endregion		
		
		#region Properties
	
		public virtual int CompanyID
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyID);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyID, value);
			}
		}

		public virtual string CompanyName
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompanyName);
			}
			set
	        {
				base.Setstring(ColumnNames.CompanyName, value);
			}
		}

		public virtual string CompanyDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompanyDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.CompanyDescription, value);
			}
		}

		public virtual string PhotoFileName
	    {
			get
	        {
				return base.Getstring(ColumnNames.PhotoFileName);
			}
			set
	        {
				base.Setstring(ColumnNames.PhotoFileName, value);
			}
		}

		public virtual string UserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserName);
			}
			set
	        {
				base.Setstring(ColumnNames.UserName, value);
			}
		}

		public virtual string Password
	    {
			get
	        {
				return base.Getstring(ColumnNames.Password);
			}
			set
	        {
				base.Setstring(ColumnNames.Password, value);
			}
		}

		public virtual string ContactName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactName);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactName, value);
			}
		}

		public virtual string ContactLastName
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactLastName);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactLastName, value);
			}
		}

		public virtual string ContactTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactTitle, value);
			}
		}

		public virtual string ContactEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.ContactEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.ContactEmail, value);
			}
		}

		public virtual int CountryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryID, value);
			}
		}

		public virtual int CityID
	    {
			get
	        {
				return base.Getint(ColumnNames.CityID);
			}
			set
	        {
				base.Setint(ColumnNames.CityID, value);
			}
		}

		public virtual string OtherCity
	    {
			get
	        {
				return base.Getstring(ColumnNames.OtherCity);
			}
			set
	        {
				base.Setstring(ColumnNames.OtherCity, value);
			}
		}

		public virtual int TownID
	    {
			get
	        {
				return base.Getint(ColumnNames.TownID);
			}
			set
	        {
				base.Setint(ColumnNames.TownID, value);
			}
		}

		public virtual string OtherTown
	    {
			get
	        {
				return base.Getstring(ColumnNames.OtherTown);
			}
			set
	        {
				base.Setstring(ColumnNames.OtherTown, value);
			}
		}

		public virtual string StreetAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.StreetAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.StreetAddress, value);
			}
		}

		public virtual string PostalCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.PostalCode);
			}
			set
	        {
				base.Setstring(ColumnNames.PostalCode, value);
			}
		}

		public virtual string PhoneCountryCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.PhoneCountryCode);
			}
			set
	        {
				base.Setstring(ColumnNames.PhoneCountryCode, value);
			}
		}

		public virtual string PhoneAreaCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.PhoneAreaCode);
			}
			set
	        {
				base.Setstring(ColumnNames.PhoneAreaCode, value);
			}
		}

		public virtual string Phone
	    {
			get
	        {
				return base.Getstring(ColumnNames.Phone);
			}
			set
	        {
				base.Setstring(ColumnNames.Phone, value);
			}
		}

		public virtual string FaxCountryCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.FaxCountryCode);
			}
			set
	        {
				base.Setstring(ColumnNames.FaxCountryCode, value);
			}
		}

		public virtual string FaxAreaCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.FaxAreaCode);
			}
			set
	        {
				base.Setstring(ColumnNames.FaxAreaCode, value);
			}
		}

		public virtual string Fax
	    {
			get
	        {
				return base.Getstring(ColumnNames.Fax);
			}
			set
	        {
				base.Setstring(ColumnNames.Fax, value);
			}
		}

		public virtual string TaxNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.TaxNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.TaxNumber, value);
			}
		}

		public virtual string TaxOffice
	    {
			get
	        {
				return base.Getstring(ColumnNames.TaxOffice);
			}
			set
	        {
				base.Setstring(ColumnNames.TaxOffice, value);
			}
		}

		public virtual int Credits
	    {
			get
	        {
				return base.Getint(ColumnNames.Credits);
			}
			set
	        {
				base.Setint(ColumnNames.Credits, value);
			}
		}

		public virtual double MaxLoan
	    {
			get
	        {
				return base.Getdouble(ColumnNames.MaxLoan);
			}
			set
	        {
				base.Setdouble(ColumnNames.MaxLoan, value);
			}
		}

		public virtual int RepresentativeID
	    {
			get
	        {
				return base.Getint(ColumnNames.RepresentativeID);
			}
			set
	        {
				base.Setint(ColumnNames.RepresentativeID, value);
			}
		}

		public virtual int NumberOfWorkers
	    {
			get
	        {
				return base.Getint(ColumnNames.NumberOfWorkers);
			}
			set
	        {
				base.Setint(ColumnNames.NumberOfWorkers, value);
			}
		}

		public virtual string ActivationNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.ActivationNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.ActivationNumber, value);
			}
		}

		public virtual bool IsEmailConfirmed
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsEmailConfirmed);
			}
			set
	        {
				base.Setbool(ColumnNames.IsEmailConfirmed, value);
			}
		}

		public virtual DateTime RegisterDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.RegisterDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.RegisterDate, value);
			}
		}

		public virtual DateTime LastLoginDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.LastLoginDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.LastLoginDate, value);
			}
		}

		public virtual string SecretQuestion
	    {
			get
	        {
				return base.Getstring(ColumnNames.SecretQuestion);
			}
			set
	        {
				base.Setstring(ColumnNames.SecretQuestion, value);
			}
		}

		public virtual string SecretAnswer
	    {
			get
	        {
				return base.Getstring(ColumnNames.SecretAnswer);
			}
			set
	        {
				base.Setstring(ColumnNames.SecretAnswer, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}

		public virtual bool IsDeleted
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDeleted);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDeleted, value);
			}
		}

		public virtual bool IsFirstLogin
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsFirstLogin);
			}
			set
	        {
				base.Setbool(ColumnNames.IsFirstLogin, value);
			}
		}

		public virtual int CompanyRepresentative
	    {
			get
	        {
				return base.Getint(ColumnNames.CompanyRepresentative);
			}
			set
	        {
				base.Setint(ColumnNames.CompanyRepresentative, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_CompanyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyID) ? string.Empty : base.GetintAsString(ColumnNames.CompanyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyID);
				else
					this.CompanyID = base.SetintAsString(ColumnNames.CompanyID, value);
			}
		}

		public virtual string s_CompanyName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyName) ? string.Empty : base.GetstringAsString(ColumnNames.CompanyName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyName);
				else
					this.CompanyName = base.SetstringAsString(ColumnNames.CompanyName, value);
			}
		}

		public virtual string s_CompanyDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyDescription) ? string.Empty : base.GetstringAsString(ColumnNames.CompanyDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyDescription);
				else
					this.CompanyDescription = base.SetstringAsString(ColumnNames.CompanyDescription, value);
			}
		}

		public virtual string s_PhotoFileName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhotoFileName) ? string.Empty : base.GetstringAsString(ColumnNames.PhotoFileName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhotoFileName);
				else
					this.PhotoFileName = base.SetstringAsString(ColumnNames.PhotoFileName, value);
			}
		}

		public virtual string s_UserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserName) ? string.Empty : base.GetstringAsString(ColumnNames.UserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserName);
				else
					this.UserName = base.SetstringAsString(ColumnNames.UserName, value);
			}
		}

		public virtual string s_Password
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Password) ? string.Empty : base.GetstringAsString(ColumnNames.Password);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Password);
				else
					this.Password = base.SetstringAsString(ColumnNames.Password, value);
			}
		}

		public virtual string s_ContactName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactName) ? string.Empty : base.GetstringAsString(ColumnNames.ContactName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactName);
				else
					this.ContactName = base.SetstringAsString(ColumnNames.ContactName, value);
			}
		}

		public virtual string s_ContactLastName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactLastName) ? string.Empty : base.GetstringAsString(ColumnNames.ContactLastName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactLastName);
				else
					this.ContactLastName = base.SetstringAsString(ColumnNames.ContactLastName, value);
			}
		}

		public virtual string s_ContactTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactTitle) ? string.Empty : base.GetstringAsString(ColumnNames.ContactTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactTitle);
				else
					this.ContactTitle = base.SetstringAsString(ColumnNames.ContactTitle, value);
			}
		}

		public virtual string s_ContactEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ContactEmail) ? string.Empty : base.GetstringAsString(ColumnNames.ContactEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ContactEmail);
				else
					this.ContactEmail = base.SetstringAsString(ColumnNames.ContactEmail, value);
			}
		}

		public virtual string s_CountryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryID) ? string.Empty : base.GetintAsString(ColumnNames.CountryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryID);
				else
					this.CountryID = base.SetintAsString(ColumnNames.CountryID, value);
			}
		}

		public virtual string s_CityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CityID) ? string.Empty : base.GetintAsString(ColumnNames.CityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CityID);
				else
					this.CityID = base.SetintAsString(ColumnNames.CityID, value);
			}
		}

		public virtual string s_OtherCity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OtherCity) ? string.Empty : base.GetstringAsString(ColumnNames.OtherCity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OtherCity);
				else
					this.OtherCity = base.SetstringAsString(ColumnNames.OtherCity, value);
			}
		}

		public virtual string s_TownID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TownID) ? string.Empty : base.GetintAsString(ColumnNames.TownID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TownID);
				else
					this.TownID = base.SetintAsString(ColumnNames.TownID, value);
			}
		}

		public virtual string s_OtherTown
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OtherTown) ? string.Empty : base.GetstringAsString(ColumnNames.OtherTown);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OtherTown);
				else
					this.OtherTown = base.SetstringAsString(ColumnNames.OtherTown, value);
			}
		}

		public virtual string s_StreetAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StreetAddress) ? string.Empty : base.GetstringAsString(ColumnNames.StreetAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StreetAddress);
				else
					this.StreetAddress = base.SetstringAsString(ColumnNames.StreetAddress, value);
			}
		}

		public virtual string s_PostalCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PostalCode) ? string.Empty : base.GetstringAsString(ColumnNames.PostalCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PostalCode);
				else
					this.PostalCode = base.SetstringAsString(ColumnNames.PostalCode, value);
			}
		}

		public virtual string s_PhoneCountryCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhoneCountryCode) ? string.Empty : base.GetstringAsString(ColumnNames.PhoneCountryCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhoneCountryCode);
				else
					this.PhoneCountryCode = base.SetstringAsString(ColumnNames.PhoneCountryCode, value);
			}
		}

		public virtual string s_PhoneAreaCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhoneAreaCode) ? string.Empty : base.GetstringAsString(ColumnNames.PhoneAreaCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhoneAreaCode);
				else
					this.PhoneAreaCode = base.SetstringAsString(ColumnNames.PhoneAreaCode, value);
			}
		}

		public virtual string s_Phone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Phone) ? string.Empty : base.GetstringAsString(ColumnNames.Phone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Phone);
				else
					this.Phone = base.SetstringAsString(ColumnNames.Phone, value);
			}
		}

		public virtual string s_FaxCountryCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FaxCountryCode) ? string.Empty : base.GetstringAsString(ColumnNames.FaxCountryCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FaxCountryCode);
				else
					this.FaxCountryCode = base.SetstringAsString(ColumnNames.FaxCountryCode, value);
			}
		}

		public virtual string s_FaxAreaCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FaxAreaCode) ? string.Empty : base.GetstringAsString(ColumnNames.FaxAreaCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FaxAreaCode);
				else
					this.FaxAreaCode = base.SetstringAsString(ColumnNames.FaxAreaCode, value);
			}
		}

		public virtual string s_Fax
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Fax) ? string.Empty : base.GetstringAsString(ColumnNames.Fax);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Fax);
				else
					this.Fax = base.SetstringAsString(ColumnNames.Fax, value);
			}
		}

		public virtual string s_TaxNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TaxNumber) ? string.Empty : base.GetstringAsString(ColumnNames.TaxNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TaxNumber);
				else
					this.TaxNumber = base.SetstringAsString(ColumnNames.TaxNumber, value);
			}
		}

		public virtual string s_TaxOffice
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TaxOffice) ? string.Empty : base.GetstringAsString(ColumnNames.TaxOffice);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TaxOffice);
				else
					this.TaxOffice = base.SetstringAsString(ColumnNames.TaxOffice, value);
			}
		}

		public virtual string s_Credits
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Credits) ? string.Empty : base.GetintAsString(ColumnNames.Credits);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Credits);
				else
					this.Credits = base.SetintAsString(ColumnNames.Credits, value);
			}
		}

		public virtual string s_MaxLoan
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MaxLoan) ? string.Empty : base.GetdoubleAsString(ColumnNames.MaxLoan);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MaxLoan);
				else
					this.MaxLoan = base.SetdoubleAsString(ColumnNames.MaxLoan, value);
			}
		}

		public virtual string s_RepresentativeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RepresentativeID) ? string.Empty : base.GetintAsString(ColumnNames.RepresentativeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RepresentativeID);
				else
					this.RepresentativeID = base.SetintAsString(ColumnNames.RepresentativeID, value);
			}
		}

		public virtual string s_NumberOfWorkers
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NumberOfWorkers) ? string.Empty : base.GetintAsString(ColumnNames.NumberOfWorkers);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NumberOfWorkers);
				else
					this.NumberOfWorkers = base.SetintAsString(ColumnNames.NumberOfWorkers, value);
			}
		}

		public virtual string s_ActivationNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ActivationNumber) ? string.Empty : base.GetstringAsString(ColumnNames.ActivationNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ActivationNumber);
				else
					this.ActivationNumber = base.SetstringAsString(ColumnNames.ActivationNumber, value);
			}
		}

		public virtual string s_IsEmailConfirmed
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsEmailConfirmed) ? string.Empty : base.GetboolAsString(ColumnNames.IsEmailConfirmed);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsEmailConfirmed);
				else
					this.IsEmailConfirmed = base.SetboolAsString(ColumnNames.IsEmailConfirmed, value);
			}
		}

		public virtual string s_RegisterDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RegisterDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RegisterDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RegisterDate);
				else
					this.RegisterDate = base.SetDateTimeAsString(ColumnNames.RegisterDate, value);
			}
		}

		public virtual string s_LastLoginDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastLoginDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastLoginDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastLoginDate);
				else
					this.LastLoginDate = base.SetDateTimeAsString(ColumnNames.LastLoginDate, value);
			}
		}

		public virtual string s_SecretQuestion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SecretQuestion) ? string.Empty : base.GetstringAsString(ColumnNames.SecretQuestion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SecretQuestion);
				else
					this.SecretQuestion = base.SetstringAsString(ColumnNames.SecretQuestion, value);
			}
		}

		public virtual string s_SecretAnswer
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SecretAnswer) ? string.Empty : base.GetstringAsString(ColumnNames.SecretAnswer);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SecretAnswer);
				else
					this.SecretAnswer = base.SetstringAsString(ColumnNames.SecretAnswer, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}

		public virtual string s_IsDeleted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDeleted) ? string.Empty : base.GetboolAsString(ColumnNames.IsDeleted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDeleted);
				else
					this.IsDeleted = base.SetboolAsString(ColumnNames.IsDeleted, value);
			}
		}

		public virtual string s_IsFirstLogin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsFirstLogin) ? string.Empty : base.GetboolAsString(ColumnNames.IsFirstLogin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsFirstLogin);
				else
					this.IsFirstLogin = base.SetboolAsString(ColumnNames.IsFirstLogin, value);
			}
		}

		public virtual string s_CompanyRepresentative
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyRepresentative) ? string.Empty : base.GetintAsString(ColumnNames.CompanyRepresentative);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyRepresentative);
				else
					this.CompanyRepresentative = base.SetintAsString(ColumnNames.CompanyRepresentative, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CompanyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyName, Parameters.CompanyName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyDescription, Parameters.CompanyDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhotoFileName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhotoFileName, Parameters.PhotoFileName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Password
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactName, Parameters.ContactName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactLastName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactLastName, Parameters.ContactLastName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactTitle, Parameters.ContactTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ContactEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ContactEmail, Parameters.ContactEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CountryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CityID, Parameters.CityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OtherCity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OtherCity, Parameters.OtherCity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TownID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TownID, Parameters.TownID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OtherTown
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OtherTown, Parameters.OtherTown);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StreetAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StreetAddress, Parameters.StreetAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PostalCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PostalCode, Parameters.PostalCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhoneCountryCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhoneCountryCode, Parameters.PhoneCountryCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhoneAreaCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhoneAreaCode, Parameters.PhoneAreaCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Phone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Phone, Parameters.Phone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FaxCountryCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FaxCountryCode, Parameters.FaxCountryCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FaxAreaCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FaxAreaCode, Parameters.FaxAreaCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Fax
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Fax, Parameters.Fax);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TaxNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TaxNumber, Parameters.TaxNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TaxOffice
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TaxOffice, Parameters.TaxOffice);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Credits
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Credits, Parameters.Credits);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MaxLoan
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MaxLoan, Parameters.MaxLoan);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RepresentativeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RepresentativeID, Parameters.RepresentativeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NumberOfWorkers
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NumberOfWorkers, Parameters.NumberOfWorkers);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ActivationNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ActivationNumber, Parameters.ActivationNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsEmailConfirmed
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsEmailConfirmed, Parameters.IsEmailConfirmed);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RegisterDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RegisterDate, Parameters.RegisterDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastLoginDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastLoginDate, Parameters.LastLoginDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SecretQuestion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SecretQuestion, Parameters.SecretQuestion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SecretAnswer
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SecretAnswer, Parameters.SecretAnswer);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDeleted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsFirstLogin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsFirstLogin, Parameters.IsFirstLogin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyRepresentative
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyRepresentative, Parameters.CompanyRepresentative);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public WhereParameter CompanyName
		    {
				get
		        {
					if(_CompanyName_W == null)
	        	    {
						_CompanyName_W = TearOff.CompanyName;
					}
					return _CompanyName_W;
				}
			}

			public WhereParameter CompanyDescription
		    {
				get
		        {
					if(_CompanyDescription_W == null)
	        	    {
						_CompanyDescription_W = TearOff.CompanyDescription;
					}
					return _CompanyDescription_W;
				}
			}

			public WhereParameter PhotoFileName
		    {
				get
		        {
					if(_PhotoFileName_W == null)
	        	    {
						_PhotoFileName_W = TearOff.PhotoFileName;
					}
					return _PhotoFileName_W;
				}
			}

			public WhereParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public WhereParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public WhereParameter ContactName
		    {
				get
		        {
					if(_ContactName_W == null)
	        	    {
						_ContactName_W = TearOff.ContactName;
					}
					return _ContactName_W;
				}
			}

			public WhereParameter ContactLastName
		    {
				get
		        {
					if(_ContactLastName_W == null)
	        	    {
						_ContactLastName_W = TearOff.ContactLastName;
					}
					return _ContactLastName_W;
				}
			}

			public WhereParameter ContactTitle
		    {
				get
		        {
					if(_ContactTitle_W == null)
	        	    {
						_ContactTitle_W = TearOff.ContactTitle;
					}
					return _ContactTitle_W;
				}
			}

			public WhereParameter ContactEmail
		    {
				get
		        {
					if(_ContactEmail_W == null)
	        	    {
						_ContactEmail_W = TearOff.ContactEmail;
					}
					return _ContactEmail_W;
				}
			}

			public WhereParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public WhereParameter CityID
		    {
				get
		        {
					if(_CityID_W == null)
	        	    {
						_CityID_W = TearOff.CityID;
					}
					return _CityID_W;
				}
			}

			public WhereParameter OtherCity
		    {
				get
		        {
					if(_OtherCity_W == null)
	        	    {
						_OtherCity_W = TearOff.OtherCity;
					}
					return _OtherCity_W;
				}
			}

			public WhereParameter TownID
		    {
				get
		        {
					if(_TownID_W == null)
	        	    {
						_TownID_W = TearOff.TownID;
					}
					return _TownID_W;
				}
			}

			public WhereParameter OtherTown
		    {
				get
		        {
					if(_OtherTown_W == null)
	        	    {
						_OtherTown_W = TearOff.OtherTown;
					}
					return _OtherTown_W;
				}
			}

			public WhereParameter StreetAddress
		    {
				get
		        {
					if(_StreetAddress_W == null)
	        	    {
						_StreetAddress_W = TearOff.StreetAddress;
					}
					return _StreetAddress_W;
				}
			}

			public WhereParameter PostalCode
		    {
				get
		        {
					if(_PostalCode_W == null)
	        	    {
						_PostalCode_W = TearOff.PostalCode;
					}
					return _PostalCode_W;
				}
			}

			public WhereParameter PhoneCountryCode
		    {
				get
		        {
					if(_PhoneCountryCode_W == null)
	        	    {
						_PhoneCountryCode_W = TearOff.PhoneCountryCode;
					}
					return _PhoneCountryCode_W;
				}
			}

			public WhereParameter PhoneAreaCode
		    {
				get
		        {
					if(_PhoneAreaCode_W == null)
	        	    {
						_PhoneAreaCode_W = TearOff.PhoneAreaCode;
					}
					return _PhoneAreaCode_W;
				}
			}

			public WhereParameter Phone
		    {
				get
		        {
					if(_Phone_W == null)
	        	    {
						_Phone_W = TearOff.Phone;
					}
					return _Phone_W;
				}
			}

			public WhereParameter FaxCountryCode
		    {
				get
		        {
					if(_FaxCountryCode_W == null)
	        	    {
						_FaxCountryCode_W = TearOff.FaxCountryCode;
					}
					return _FaxCountryCode_W;
				}
			}

			public WhereParameter FaxAreaCode
		    {
				get
		        {
					if(_FaxAreaCode_W == null)
	        	    {
						_FaxAreaCode_W = TearOff.FaxAreaCode;
					}
					return _FaxAreaCode_W;
				}
			}

			public WhereParameter Fax
		    {
				get
		        {
					if(_Fax_W == null)
	        	    {
						_Fax_W = TearOff.Fax;
					}
					return _Fax_W;
				}
			}

			public WhereParameter TaxNumber
		    {
				get
		        {
					if(_TaxNumber_W == null)
	        	    {
						_TaxNumber_W = TearOff.TaxNumber;
					}
					return _TaxNumber_W;
				}
			}

			public WhereParameter TaxOffice
		    {
				get
		        {
					if(_TaxOffice_W == null)
	        	    {
						_TaxOffice_W = TearOff.TaxOffice;
					}
					return _TaxOffice_W;
				}
			}

			public WhereParameter Credits
		    {
				get
		        {
					if(_Credits_W == null)
	        	    {
						_Credits_W = TearOff.Credits;
					}
					return _Credits_W;
				}
			}

			public WhereParameter MaxLoan
		    {
				get
		        {
					if(_MaxLoan_W == null)
	        	    {
						_MaxLoan_W = TearOff.MaxLoan;
					}
					return _MaxLoan_W;
				}
			}

			public WhereParameter RepresentativeID
		    {
				get
		        {
					if(_RepresentativeID_W == null)
	        	    {
						_RepresentativeID_W = TearOff.RepresentativeID;
					}
					return _RepresentativeID_W;
				}
			}

			public WhereParameter NumberOfWorkers
		    {
				get
		        {
					if(_NumberOfWorkers_W == null)
	        	    {
						_NumberOfWorkers_W = TearOff.NumberOfWorkers;
					}
					return _NumberOfWorkers_W;
				}
			}

			public WhereParameter ActivationNumber
		    {
				get
		        {
					if(_ActivationNumber_W == null)
	        	    {
						_ActivationNumber_W = TearOff.ActivationNumber;
					}
					return _ActivationNumber_W;
				}
			}

			public WhereParameter IsEmailConfirmed
		    {
				get
		        {
					if(_IsEmailConfirmed_W == null)
	        	    {
						_IsEmailConfirmed_W = TearOff.IsEmailConfirmed;
					}
					return _IsEmailConfirmed_W;
				}
			}

			public WhereParameter RegisterDate
		    {
				get
		        {
					if(_RegisterDate_W == null)
	        	    {
						_RegisterDate_W = TearOff.RegisterDate;
					}
					return _RegisterDate_W;
				}
			}

			public WhereParameter LastLoginDate
		    {
				get
		        {
					if(_LastLoginDate_W == null)
	        	    {
						_LastLoginDate_W = TearOff.LastLoginDate;
					}
					return _LastLoginDate_W;
				}
			}

			public WhereParameter SecretQuestion
		    {
				get
		        {
					if(_SecretQuestion_W == null)
	        	    {
						_SecretQuestion_W = TearOff.SecretQuestion;
					}
					return _SecretQuestion_W;
				}
			}

			public WhereParameter SecretAnswer
		    {
				get
		        {
					if(_SecretAnswer_W == null)
	        	    {
						_SecretAnswer_W = TearOff.SecretAnswer;
					}
					return _SecretAnswer_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public WhereParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			public WhereParameter IsFirstLogin
		    {
				get
		        {
					if(_IsFirstLogin_W == null)
	        	    {
						_IsFirstLogin_W = TearOff.IsFirstLogin;
					}
					return _IsFirstLogin_W;
				}
			}

			public WhereParameter CompanyRepresentative
		    {
				get
		        {
					if(_CompanyRepresentative_W == null)
	        	    {
						_CompanyRepresentative_W = TearOff.CompanyRepresentative;
					}
					return _CompanyRepresentative_W;
				}
			}

			private WhereParameter _CompanyID_W = null;
			private WhereParameter _CompanyName_W = null;
			private WhereParameter _CompanyDescription_W = null;
			private WhereParameter _PhotoFileName_W = null;
			private WhereParameter _UserName_W = null;
			private WhereParameter _Password_W = null;
			private WhereParameter _ContactName_W = null;
			private WhereParameter _ContactLastName_W = null;
			private WhereParameter _ContactTitle_W = null;
			private WhereParameter _ContactEmail_W = null;
			private WhereParameter _CountryID_W = null;
			private WhereParameter _CityID_W = null;
			private WhereParameter _OtherCity_W = null;
			private WhereParameter _TownID_W = null;
			private WhereParameter _OtherTown_W = null;
			private WhereParameter _StreetAddress_W = null;
			private WhereParameter _PostalCode_W = null;
			private WhereParameter _PhoneCountryCode_W = null;
			private WhereParameter _PhoneAreaCode_W = null;
			private WhereParameter _Phone_W = null;
			private WhereParameter _FaxCountryCode_W = null;
			private WhereParameter _FaxAreaCode_W = null;
			private WhereParameter _Fax_W = null;
			private WhereParameter _TaxNumber_W = null;
			private WhereParameter _TaxOffice_W = null;
			private WhereParameter _Credits_W = null;
			private WhereParameter _MaxLoan_W = null;
			private WhereParameter _RepresentativeID_W = null;
			private WhereParameter _NumberOfWorkers_W = null;
			private WhereParameter _ActivationNumber_W = null;
			private WhereParameter _IsEmailConfirmed_W = null;
			private WhereParameter _RegisterDate_W = null;
			private WhereParameter _LastLoginDate_W = null;
			private WhereParameter _SecretQuestion_W = null;
			private WhereParameter _SecretAnswer_W = null;
			private WhereParameter _IsActive_W = null;
			private WhereParameter _IsDeleted_W = null;
			private WhereParameter _IsFirstLogin_W = null;
			private WhereParameter _CompanyRepresentative_W = null;

			public void WhereClauseReset()
			{
				_CompanyID_W = null;
				_CompanyName_W = null;
				_CompanyDescription_W = null;
				_PhotoFileName_W = null;
				_UserName_W = null;
				_Password_W = null;
				_ContactName_W = null;
				_ContactLastName_W = null;
				_ContactTitle_W = null;
				_ContactEmail_W = null;
				_CountryID_W = null;
				_CityID_W = null;
				_OtherCity_W = null;
				_TownID_W = null;
				_OtherTown_W = null;
				_StreetAddress_W = null;
				_PostalCode_W = null;
				_PhoneCountryCode_W = null;
				_PhoneAreaCode_W = null;
				_Phone_W = null;
				_FaxCountryCode_W = null;
				_FaxAreaCode_W = null;
				_Fax_W = null;
				_TaxNumber_W = null;
				_TaxOffice_W = null;
				_Credits_W = null;
				_MaxLoan_W = null;
				_RepresentativeID_W = null;
				_NumberOfWorkers_W = null;
				_ActivationNumber_W = null;
				_IsEmailConfirmed_W = null;
				_RegisterDate_W = null;
				_LastLoginDate_W = null;
				_SecretQuestion_W = null;
				_SecretAnswer_W = null;
				_IsActive_W = null;
				_IsDeleted_W = null;
				_IsFirstLogin_W = null;
				_CompanyRepresentative_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CompanyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyID, Parameters.CompanyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyName, Parameters.CompanyName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyDescription, Parameters.CompanyDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhotoFileName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhotoFileName, Parameters.PhotoFileName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserName, Parameters.UserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Password
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactName, Parameters.ContactName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactLastName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactLastName, Parameters.ContactLastName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactTitle, Parameters.ContactTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ContactEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ContactEmail, Parameters.ContactEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CountryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CityID, Parameters.CityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OtherCity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OtherCity, Parameters.OtherCity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TownID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TownID, Parameters.TownID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OtherTown
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OtherTown, Parameters.OtherTown);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StreetAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StreetAddress, Parameters.StreetAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PostalCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PostalCode, Parameters.PostalCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhoneCountryCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhoneCountryCode, Parameters.PhoneCountryCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhoneAreaCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhoneAreaCode, Parameters.PhoneAreaCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Phone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Phone, Parameters.Phone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FaxCountryCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FaxCountryCode, Parameters.FaxCountryCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FaxAreaCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FaxAreaCode, Parameters.FaxAreaCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Fax
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Fax, Parameters.Fax);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TaxNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TaxNumber, Parameters.TaxNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TaxOffice
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TaxOffice, Parameters.TaxOffice);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Credits
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Credits, Parameters.Credits);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MaxLoan
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MaxLoan, Parameters.MaxLoan);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RepresentativeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RepresentativeID, Parameters.RepresentativeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NumberOfWorkers
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NumberOfWorkers, Parameters.NumberOfWorkers);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ActivationNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ActivationNumber, Parameters.ActivationNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsEmailConfirmed
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsEmailConfirmed, Parameters.IsEmailConfirmed);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RegisterDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RegisterDate, Parameters.RegisterDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastLoginDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastLoginDate, Parameters.LastLoginDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SecretQuestion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SecretQuestion, Parameters.SecretQuestion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SecretAnswer
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SecretAnswer, Parameters.SecretAnswer);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDeleted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsFirstLogin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsFirstLogin, Parameters.IsFirstLogin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyRepresentative
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyRepresentative, Parameters.CompanyRepresentative);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CompanyID
		    {
				get
		        {
					if(_CompanyID_W == null)
	        	    {
						_CompanyID_W = TearOff.CompanyID;
					}
					return _CompanyID_W;
				}
			}

			public AggregateParameter CompanyName
		    {
				get
		        {
					if(_CompanyName_W == null)
	        	    {
						_CompanyName_W = TearOff.CompanyName;
					}
					return _CompanyName_W;
				}
			}

			public AggregateParameter CompanyDescription
		    {
				get
		        {
					if(_CompanyDescription_W == null)
	        	    {
						_CompanyDescription_W = TearOff.CompanyDescription;
					}
					return _CompanyDescription_W;
				}
			}

			public AggregateParameter PhotoFileName
		    {
				get
		        {
					if(_PhotoFileName_W == null)
	        	    {
						_PhotoFileName_W = TearOff.PhotoFileName;
					}
					return _PhotoFileName_W;
				}
			}

			public AggregateParameter UserName
		    {
				get
		        {
					if(_UserName_W == null)
	        	    {
						_UserName_W = TearOff.UserName;
					}
					return _UserName_W;
				}
			}

			public AggregateParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public AggregateParameter ContactName
		    {
				get
		        {
					if(_ContactName_W == null)
	        	    {
						_ContactName_W = TearOff.ContactName;
					}
					return _ContactName_W;
				}
			}

			public AggregateParameter ContactLastName
		    {
				get
		        {
					if(_ContactLastName_W == null)
	        	    {
						_ContactLastName_W = TearOff.ContactLastName;
					}
					return _ContactLastName_W;
				}
			}

			public AggregateParameter ContactTitle
		    {
				get
		        {
					if(_ContactTitle_W == null)
	        	    {
						_ContactTitle_W = TearOff.ContactTitle;
					}
					return _ContactTitle_W;
				}
			}

			public AggregateParameter ContactEmail
		    {
				get
		        {
					if(_ContactEmail_W == null)
	        	    {
						_ContactEmail_W = TearOff.ContactEmail;
					}
					return _ContactEmail_W;
				}
			}

			public AggregateParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public AggregateParameter CityID
		    {
				get
		        {
					if(_CityID_W == null)
	        	    {
						_CityID_W = TearOff.CityID;
					}
					return _CityID_W;
				}
			}

			public AggregateParameter OtherCity
		    {
				get
		        {
					if(_OtherCity_W == null)
	        	    {
						_OtherCity_W = TearOff.OtherCity;
					}
					return _OtherCity_W;
				}
			}

			public AggregateParameter TownID
		    {
				get
		        {
					if(_TownID_W == null)
	        	    {
						_TownID_W = TearOff.TownID;
					}
					return _TownID_W;
				}
			}

			public AggregateParameter OtherTown
		    {
				get
		        {
					if(_OtherTown_W == null)
	        	    {
						_OtherTown_W = TearOff.OtherTown;
					}
					return _OtherTown_W;
				}
			}

			public AggregateParameter StreetAddress
		    {
				get
		        {
					if(_StreetAddress_W == null)
	        	    {
						_StreetAddress_W = TearOff.StreetAddress;
					}
					return _StreetAddress_W;
				}
			}

			public AggregateParameter PostalCode
		    {
				get
		        {
					if(_PostalCode_W == null)
	        	    {
						_PostalCode_W = TearOff.PostalCode;
					}
					return _PostalCode_W;
				}
			}

			public AggregateParameter PhoneCountryCode
		    {
				get
		        {
					if(_PhoneCountryCode_W == null)
	        	    {
						_PhoneCountryCode_W = TearOff.PhoneCountryCode;
					}
					return _PhoneCountryCode_W;
				}
			}

			public AggregateParameter PhoneAreaCode
		    {
				get
		        {
					if(_PhoneAreaCode_W == null)
	        	    {
						_PhoneAreaCode_W = TearOff.PhoneAreaCode;
					}
					return _PhoneAreaCode_W;
				}
			}

			public AggregateParameter Phone
		    {
				get
		        {
					if(_Phone_W == null)
	        	    {
						_Phone_W = TearOff.Phone;
					}
					return _Phone_W;
				}
			}

			public AggregateParameter FaxCountryCode
		    {
				get
		        {
					if(_FaxCountryCode_W == null)
	        	    {
						_FaxCountryCode_W = TearOff.FaxCountryCode;
					}
					return _FaxCountryCode_W;
				}
			}

			public AggregateParameter FaxAreaCode
		    {
				get
		        {
					if(_FaxAreaCode_W == null)
	        	    {
						_FaxAreaCode_W = TearOff.FaxAreaCode;
					}
					return _FaxAreaCode_W;
				}
			}

			public AggregateParameter Fax
		    {
				get
		        {
					if(_Fax_W == null)
	        	    {
						_Fax_W = TearOff.Fax;
					}
					return _Fax_W;
				}
			}

			public AggregateParameter TaxNumber
		    {
				get
		        {
					if(_TaxNumber_W == null)
	        	    {
						_TaxNumber_W = TearOff.TaxNumber;
					}
					return _TaxNumber_W;
				}
			}

			public AggregateParameter TaxOffice
		    {
				get
		        {
					if(_TaxOffice_W == null)
	        	    {
						_TaxOffice_W = TearOff.TaxOffice;
					}
					return _TaxOffice_W;
				}
			}

			public AggregateParameter Credits
		    {
				get
		        {
					if(_Credits_W == null)
	        	    {
						_Credits_W = TearOff.Credits;
					}
					return _Credits_W;
				}
			}

			public AggregateParameter MaxLoan
		    {
				get
		        {
					if(_MaxLoan_W == null)
	        	    {
						_MaxLoan_W = TearOff.MaxLoan;
					}
					return _MaxLoan_W;
				}
			}

			public AggregateParameter RepresentativeID
		    {
				get
		        {
					if(_RepresentativeID_W == null)
	        	    {
						_RepresentativeID_W = TearOff.RepresentativeID;
					}
					return _RepresentativeID_W;
				}
			}

			public AggregateParameter NumberOfWorkers
		    {
				get
		        {
					if(_NumberOfWorkers_W == null)
	        	    {
						_NumberOfWorkers_W = TearOff.NumberOfWorkers;
					}
					return _NumberOfWorkers_W;
				}
			}

			public AggregateParameter ActivationNumber
		    {
				get
		        {
					if(_ActivationNumber_W == null)
	        	    {
						_ActivationNumber_W = TearOff.ActivationNumber;
					}
					return _ActivationNumber_W;
				}
			}

			public AggregateParameter IsEmailConfirmed
		    {
				get
		        {
					if(_IsEmailConfirmed_W == null)
	        	    {
						_IsEmailConfirmed_W = TearOff.IsEmailConfirmed;
					}
					return _IsEmailConfirmed_W;
				}
			}

			public AggregateParameter RegisterDate
		    {
				get
		        {
					if(_RegisterDate_W == null)
	        	    {
						_RegisterDate_W = TearOff.RegisterDate;
					}
					return _RegisterDate_W;
				}
			}

			public AggregateParameter LastLoginDate
		    {
				get
		        {
					if(_LastLoginDate_W == null)
	        	    {
						_LastLoginDate_W = TearOff.LastLoginDate;
					}
					return _LastLoginDate_W;
				}
			}

			public AggregateParameter SecretQuestion
		    {
				get
		        {
					if(_SecretQuestion_W == null)
	        	    {
						_SecretQuestion_W = TearOff.SecretQuestion;
					}
					return _SecretQuestion_W;
				}
			}

			public AggregateParameter SecretAnswer
		    {
				get
		        {
					if(_SecretAnswer_W == null)
	        	    {
						_SecretAnswer_W = TearOff.SecretAnswer;
					}
					return _SecretAnswer_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			public AggregateParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			public AggregateParameter IsFirstLogin
		    {
				get
		        {
					if(_IsFirstLogin_W == null)
	        	    {
						_IsFirstLogin_W = TearOff.IsFirstLogin;
					}
					return _IsFirstLogin_W;
				}
			}

			public AggregateParameter CompanyRepresentative
		    {
				get
		        {
					if(_CompanyRepresentative_W == null)
	        	    {
						_CompanyRepresentative_W = TearOff.CompanyRepresentative;
					}
					return _CompanyRepresentative_W;
				}
			}

			private AggregateParameter _CompanyID_W = null;
			private AggregateParameter _CompanyName_W = null;
			private AggregateParameter _CompanyDescription_W = null;
			private AggregateParameter _PhotoFileName_W = null;
			private AggregateParameter _UserName_W = null;
			private AggregateParameter _Password_W = null;
			private AggregateParameter _ContactName_W = null;
			private AggregateParameter _ContactLastName_W = null;
			private AggregateParameter _ContactTitle_W = null;
			private AggregateParameter _ContactEmail_W = null;
			private AggregateParameter _CountryID_W = null;
			private AggregateParameter _CityID_W = null;
			private AggregateParameter _OtherCity_W = null;
			private AggregateParameter _TownID_W = null;
			private AggregateParameter _OtherTown_W = null;
			private AggregateParameter _StreetAddress_W = null;
			private AggregateParameter _PostalCode_W = null;
			private AggregateParameter _PhoneCountryCode_W = null;
			private AggregateParameter _PhoneAreaCode_W = null;
			private AggregateParameter _Phone_W = null;
			private AggregateParameter _FaxCountryCode_W = null;
			private AggregateParameter _FaxAreaCode_W = null;
			private AggregateParameter _Fax_W = null;
			private AggregateParameter _TaxNumber_W = null;
			private AggregateParameter _TaxOffice_W = null;
			private AggregateParameter _Credits_W = null;
			private AggregateParameter _MaxLoan_W = null;
			private AggregateParameter _RepresentativeID_W = null;
			private AggregateParameter _NumberOfWorkers_W = null;
			private AggregateParameter _ActivationNumber_W = null;
			private AggregateParameter _IsEmailConfirmed_W = null;
			private AggregateParameter _RegisterDate_W = null;
			private AggregateParameter _LastLoginDate_W = null;
			private AggregateParameter _SecretQuestion_W = null;
			private AggregateParameter _SecretAnswer_W = null;
			private AggregateParameter _IsActive_W = null;
			private AggregateParameter _IsDeleted_W = null;
			private AggregateParameter _IsFirstLogin_W = null;
			private AggregateParameter _CompanyRepresentative_W = null;

			public void AggregateClauseReset()
			{
				_CompanyID_W = null;
				_CompanyName_W = null;
				_CompanyDescription_W = null;
				_PhotoFileName_W = null;
				_UserName_W = null;
				_Password_W = null;
				_ContactName_W = null;
				_ContactLastName_W = null;
				_ContactTitle_W = null;
				_ContactEmail_W = null;
				_CountryID_W = null;
				_CityID_W = null;
				_OtherCity_W = null;
				_TownID_W = null;
				_OtherTown_W = null;
				_StreetAddress_W = null;
				_PostalCode_W = null;
				_PhoneCountryCode_W = null;
				_PhoneAreaCode_W = null;
				_Phone_W = null;
				_FaxCountryCode_W = null;
				_FaxAreaCode_W = null;
				_Fax_W = null;
				_TaxNumber_W = null;
				_TaxOffice_W = null;
				_Credits_W = null;
				_MaxLoan_W = null;
				_RepresentativeID_W = null;
				_NumberOfWorkers_W = null;
				_ActivationNumber_W = null;
				_IsEmailConfirmed_W = null;
				_RegisterDate_W = null;
				_LastLoginDate_W = null;
				_SecretQuestion_W = null;
				_SecretAnswer_W = null;
				_IsActive_W = null;
				_IsDeleted_W = null;
				_IsFirstLogin_W = null;
				_CompanyRepresentative_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CompaniesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.CompanyID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CompaniesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CompaniesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.CompanyID);
			p.SourceColumn = ColumnNames.CompanyID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.CompanyID);
			p.SourceColumn = ColumnNames.CompanyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyName);
			p.SourceColumn = ColumnNames.CompanyName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyDescription);
			p.SourceColumn = ColumnNames.CompanyDescription;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhotoFileName);
			p.SourceColumn = ColumnNames.PhotoFileName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserName);
			p.SourceColumn = ColumnNames.UserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Password);
			p.SourceColumn = ColumnNames.Password;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactName);
			p.SourceColumn = ColumnNames.ContactName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactLastName);
			p.SourceColumn = ColumnNames.ContactLastName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactTitle);
			p.SourceColumn = ColumnNames.ContactTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ContactEmail);
			p.SourceColumn = ColumnNames.ContactEmail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CountryID);
			p.SourceColumn = ColumnNames.CountryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CityID);
			p.SourceColumn = ColumnNames.CityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OtherCity);
			p.SourceColumn = ColumnNames.OtherCity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TownID);
			p.SourceColumn = ColumnNames.TownID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OtherTown);
			p.SourceColumn = ColumnNames.OtherTown;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StreetAddress);
			p.SourceColumn = ColumnNames.StreetAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PostalCode);
			p.SourceColumn = ColumnNames.PostalCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhoneCountryCode);
			p.SourceColumn = ColumnNames.PhoneCountryCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhoneAreaCode);
			p.SourceColumn = ColumnNames.PhoneAreaCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Phone);
			p.SourceColumn = ColumnNames.Phone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FaxCountryCode);
			p.SourceColumn = ColumnNames.FaxCountryCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FaxAreaCode);
			p.SourceColumn = ColumnNames.FaxAreaCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Fax);
			p.SourceColumn = ColumnNames.Fax;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TaxNumber);
			p.SourceColumn = ColumnNames.TaxNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TaxOffice);
			p.SourceColumn = ColumnNames.TaxOffice;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Credits);
			p.SourceColumn = ColumnNames.Credits;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MaxLoan);
			p.SourceColumn = ColumnNames.MaxLoan;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RepresentativeID);
			p.SourceColumn = ColumnNames.RepresentativeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NumberOfWorkers);
			p.SourceColumn = ColumnNames.NumberOfWorkers;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ActivationNumber);
			p.SourceColumn = ColumnNames.ActivationNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsEmailConfirmed);
			p.SourceColumn = ColumnNames.IsEmailConfirmed;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RegisterDate);
			p.SourceColumn = ColumnNames.RegisterDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastLoginDate);
			p.SourceColumn = ColumnNames.LastLoginDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SecretQuestion);
			p.SourceColumn = ColumnNames.SecretQuestion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SecretAnswer);
			p.SourceColumn = ColumnNames.SecretAnswer;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsDeleted);
			p.SourceColumn = ColumnNames.IsDeleted;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsFirstLogin);
			p.SourceColumn = ColumnNames.IsFirstLogin;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyRepresentative);
			p.SourceColumn = ColumnNames.CompanyRepresentative;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
