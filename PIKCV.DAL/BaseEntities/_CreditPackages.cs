
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _CreditPackages : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _CreditPackages()
		{
			this.QuerySource = "CreditPackages";
			this.MappingName = "CreditPackages";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CreditPackagesLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int CreditPackageID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.CreditPackageID, CreditPackageID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_CreditPackagesLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter CreditPackageID
			{
				get
				{
					return new SqlParameter("@CreditPackageID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CreditPackageName
			{
				get
				{
					return new SqlParameter("@CreditPackageName", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter Credits
			{
				get
				{
					return new SqlParameter("@Credits", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ExtraCredits
			{
				get
				{
					return new SqlParameter("@ExtraCredits", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Multiplier
			{
				get
				{
					return new SqlParameter("@Multiplier", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter ModifyDate
			{
				get
				{
					return new SqlParameter("@ModifyDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter UpdatedBy
			{
				get
				{
					return new SqlParameter("@UpdatedBy", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string CreditPackageID = "CreditPackageID";
            public const string CreditPackageName = "CreditPackageName";
            public const string Credits = "Credits";
            public const string ExtraCredits = "ExtraCredits";
            public const string Multiplier = "Multiplier";
            public const string ModifyDate = "ModifyDate";
            public const string UpdatedBy = "UpdatedBy";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CreditPackageID] = _CreditPackages.PropertyNames.CreditPackageID;
					ht[CreditPackageName] = _CreditPackages.PropertyNames.CreditPackageName;
					ht[Credits] = _CreditPackages.PropertyNames.Credits;
					ht[ExtraCredits] = _CreditPackages.PropertyNames.ExtraCredits;
					ht[Multiplier] = _CreditPackages.PropertyNames.Multiplier;
					ht[ModifyDate] = _CreditPackages.PropertyNames.ModifyDate;
					ht[UpdatedBy] = _CreditPackages.PropertyNames.UpdatedBy;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string CreditPackageID = "CreditPackageID";
            public const string CreditPackageName = "CreditPackageName";
            public const string Credits = "Credits";
            public const string ExtraCredits = "ExtraCredits";
            public const string Multiplier = "Multiplier";
            public const string ModifyDate = "ModifyDate";
            public const string UpdatedBy = "UpdatedBy";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[CreditPackageID] = _CreditPackages.ColumnNames.CreditPackageID;
					ht[CreditPackageName] = _CreditPackages.ColumnNames.CreditPackageName;
					ht[Credits] = _CreditPackages.ColumnNames.Credits;
					ht[ExtraCredits] = _CreditPackages.ColumnNames.ExtraCredits;
					ht[Multiplier] = _CreditPackages.ColumnNames.Multiplier;
					ht[ModifyDate] = _CreditPackages.ColumnNames.ModifyDate;
					ht[UpdatedBy] = _CreditPackages.ColumnNames.UpdatedBy;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string CreditPackageID = "s_CreditPackageID";
            public const string CreditPackageName = "s_CreditPackageName";
            public const string Credits = "s_Credits";
            public const string ExtraCredits = "s_ExtraCredits";
            public const string Multiplier = "s_Multiplier";
            public const string ModifyDate = "s_ModifyDate";
            public const string UpdatedBy = "s_UpdatedBy";

		}
		#endregion		
		
		#region Properties
	
		public virtual int CreditPackageID
	    {
			get
	        {
				return base.Getint(ColumnNames.CreditPackageID);
			}
			set
	        {
				base.Setint(ColumnNames.CreditPackageID, value);
			}
		}

		public virtual string CreditPackageName
	    {
			get
	        {
				return base.Getstring(ColumnNames.CreditPackageName);
			}
			set
	        {
				base.Setstring(ColumnNames.CreditPackageName, value);
			}
		}

		public virtual int Credits
	    {
			get
	        {
				return base.Getint(ColumnNames.Credits);
			}
			set
	        {
				base.Setint(ColumnNames.Credits, value);
			}
		}

		public virtual int ExtraCredits
	    {
			get
	        {
				return base.Getint(ColumnNames.ExtraCredits);
			}
			set
	        {
				base.Setint(ColumnNames.ExtraCredits, value);
			}
		}

		public virtual double Multiplier
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Multiplier);
			}
			set
	        {
				base.Setdouble(ColumnNames.Multiplier, value);
			}
		}

		public virtual DateTime ModifyDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifyDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifyDate, value);
			}
		}

		public virtual int UpdatedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.UpdatedBy);
			}
			set
	        {
				base.Setint(ColumnNames.UpdatedBy, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_CreditPackageID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreditPackageID) ? string.Empty : base.GetintAsString(ColumnNames.CreditPackageID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreditPackageID);
				else
					this.CreditPackageID = base.SetintAsString(ColumnNames.CreditPackageID, value);
			}
		}

		public virtual string s_CreditPackageName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreditPackageName) ? string.Empty : base.GetstringAsString(ColumnNames.CreditPackageName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreditPackageName);
				else
					this.CreditPackageName = base.SetstringAsString(ColumnNames.CreditPackageName, value);
			}
		}

		public virtual string s_Credits
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Credits) ? string.Empty : base.GetintAsString(ColumnNames.Credits);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Credits);
				else
					this.Credits = base.SetintAsString(ColumnNames.Credits, value);
			}
		}

		public virtual string s_ExtraCredits
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ExtraCredits) ? string.Empty : base.GetintAsString(ColumnNames.ExtraCredits);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExtraCredits);
				else
					this.ExtraCredits = base.SetintAsString(ColumnNames.ExtraCredits, value);
			}
		}

		public virtual string s_Multiplier
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Multiplier) ? string.Empty : base.GetdoubleAsString(ColumnNames.Multiplier);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Multiplier);
				else
					this.Multiplier = base.SetdoubleAsString(ColumnNames.Multiplier, value);
			}
		}

		public virtual string s_ModifyDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifyDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifyDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifyDate);
				else
					this.ModifyDate = base.SetDateTimeAsString(ColumnNames.ModifyDate, value);
			}
		}

		public virtual string s_UpdatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UpdatedBy) ? string.Empty : base.GetintAsString(ColumnNames.UpdatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UpdatedBy);
				else
					this.UpdatedBy = base.SetintAsString(ColumnNames.UpdatedBy, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter CreditPackageID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreditPackageID, Parameters.CreditPackageID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreditPackageName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreditPackageName, Parameters.CreditPackageName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Credits
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Credits, Parameters.Credits);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ExtraCredits
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ExtraCredits, Parameters.ExtraCredits);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Multiplier
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Multiplier, Parameters.Multiplier);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifyDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UpdatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter CreditPackageID
		    {
				get
		        {
					if(_CreditPackageID_W == null)
	        	    {
						_CreditPackageID_W = TearOff.CreditPackageID;
					}
					return _CreditPackageID_W;
				}
			}

			public WhereParameter CreditPackageName
		    {
				get
		        {
					if(_CreditPackageName_W == null)
	        	    {
						_CreditPackageName_W = TearOff.CreditPackageName;
					}
					return _CreditPackageName_W;
				}
			}

			public WhereParameter Credits
		    {
				get
		        {
					if(_Credits_W == null)
	        	    {
						_Credits_W = TearOff.Credits;
					}
					return _Credits_W;
				}
			}

			public WhereParameter ExtraCredits
		    {
				get
		        {
					if(_ExtraCredits_W == null)
	        	    {
						_ExtraCredits_W = TearOff.ExtraCredits;
					}
					return _ExtraCredits_W;
				}
			}

			public WhereParameter Multiplier
		    {
				get
		        {
					if(_Multiplier_W == null)
	        	    {
						_Multiplier_W = TearOff.Multiplier;
					}
					return _Multiplier_W;
				}
			}

			public WhereParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public WhereParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			private WhereParameter _CreditPackageID_W = null;
			private WhereParameter _CreditPackageName_W = null;
			private WhereParameter _Credits_W = null;
			private WhereParameter _ExtraCredits_W = null;
			private WhereParameter _Multiplier_W = null;
			private WhereParameter _ModifyDate_W = null;
			private WhereParameter _UpdatedBy_W = null;

			public void WhereClauseReset()
			{
				_CreditPackageID_W = null;
				_CreditPackageName_W = null;
				_Credits_W = null;
				_ExtraCredits_W = null;
				_Multiplier_W = null;
				_ModifyDate_W = null;
				_UpdatedBy_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter CreditPackageID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreditPackageID, Parameters.CreditPackageID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreditPackageName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreditPackageName, Parameters.CreditPackageName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Credits
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Credits, Parameters.Credits);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ExtraCredits
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ExtraCredits, Parameters.ExtraCredits);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Multiplier
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Multiplier, Parameters.Multiplier);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifyDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UpdatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UpdatedBy, Parameters.UpdatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter CreditPackageID
		    {
				get
		        {
					if(_CreditPackageID_W == null)
	        	    {
						_CreditPackageID_W = TearOff.CreditPackageID;
					}
					return _CreditPackageID_W;
				}
			}

			public AggregateParameter CreditPackageName
		    {
				get
		        {
					if(_CreditPackageName_W == null)
	        	    {
						_CreditPackageName_W = TearOff.CreditPackageName;
					}
					return _CreditPackageName_W;
				}
			}

			public AggregateParameter Credits
		    {
				get
		        {
					if(_Credits_W == null)
	        	    {
						_Credits_W = TearOff.Credits;
					}
					return _Credits_W;
				}
			}

			public AggregateParameter ExtraCredits
		    {
				get
		        {
					if(_ExtraCredits_W == null)
	        	    {
						_ExtraCredits_W = TearOff.ExtraCredits;
					}
					return _ExtraCredits_W;
				}
			}

			public AggregateParameter Multiplier
		    {
				get
		        {
					if(_Multiplier_W == null)
	        	    {
						_Multiplier_W = TearOff.Multiplier;
					}
					return _Multiplier_W;
				}
			}

			public AggregateParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public AggregateParameter UpdatedBy
		    {
				get
		        {
					if(_UpdatedBy_W == null)
	        	    {
						_UpdatedBy_W = TearOff.UpdatedBy;
					}
					return _UpdatedBy_W;
				}
			}

			private AggregateParameter _CreditPackageID_W = null;
			private AggregateParameter _CreditPackageName_W = null;
			private AggregateParameter _Credits_W = null;
			private AggregateParameter _ExtraCredits_W = null;
			private AggregateParameter _Multiplier_W = null;
			private AggregateParameter _ModifyDate_W = null;
			private AggregateParameter _UpdatedBy_W = null;

			public void AggregateClauseReset()
			{
				_CreditPackageID_W = null;
				_CreditPackageName_W = null;
				_Credits_W = null;
				_ExtraCredits_W = null;
				_Multiplier_W = null;
				_ModifyDate_W = null;
				_UpdatedBy_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CreditPackagesInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.CreditPackageID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CreditPackagesUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_CreditPackagesDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.CreditPackageID);
			p.SourceColumn = ColumnNames.CreditPackageID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.CreditPackageID);
			p.SourceColumn = ColumnNames.CreditPackageID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreditPackageName);
			p.SourceColumn = ColumnNames.CreditPackageName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Credits);
			p.SourceColumn = ColumnNames.Credits;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ExtraCredits);
			p.SourceColumn = ColumnNames.ExtraCredits;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Multiplier);
			p.SourceColumn = ColumnNames.Multiplier;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifyDate);
			p.SourceColumn = ColumnNames.ModifyDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UpdatedBy);
			p.SourceColumn = ColumnNames.UpdatedBy;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
