
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _UserEducation : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _UserEducation()
		{
			this.QuerySource = "UserEducation";
			this.MappingName = "UserEducation";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserEducationLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int UserEducationID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.UserEducationID, UserEducationID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserEducationLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter UserEducationID
			{
				get
				{
					return new SqlParameter("@UserEducationID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter EducationTypeCode
			{
				get
				{
					return new SqlParameter("@EducationTypeCode", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter SchoolID
			{
				get
				{
					return new SqlParameter("@SchoolID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter EducationStatusID
			{
				get
				{
					return new SqlParameter("@EducationStatusID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter StartDate
			{
				get
				{
					return new SqlParameter("@StartDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter EndDate
			{
				get
				{
					return new SqlParameter("@EndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter OtherSchool
			{
				get
				{
					return new SqlParameter("@OtherSchool", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter DepartmentID
			{
				get
				{
					return new SqlParameter("@DepartmentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OtherDepartment
			{
				get
				{
					return new SqlParameter("@OtherDepartment", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter CountryID
			{
				get
				{
					return new SqlParameter("@CountryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CityID
			{
				get
				{
					return new SqlParameter("@CityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OtherCity
			{
				get
				{
					return new SqlParameter("@OtherCity", SqlDbType.NVarChar, 24);
				}
			}
			
			public static SqlParameter Degree
			{
				get
				{
					return new SqlParameter("@Degree", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter IsDeleted
			{
				get
				{
					return new SqlParameter("@IsDeleted", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string UserEducationID = "UserEducationID";
            public const string UserID = "UserID";
            public const string EducationTypeCode = "EducationTypeCode";
            public const string SchoolID = "SchoolID";
            public const string EducationStatusID = "EducationStatusID";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";
            public const string OtherSchool = "OtherSchool";
            public const string DepartmentID = "DepartmentID";
            public const string OtherDepartment = "OtherDepartment";
            public const string CountryID = "CountryID";
            public const string CityID = "CityID";
            public const string OtherCity = "OtherCity";
            public const string Degree = "Degree";
            public const string IsDeleted = "IsDeleted";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserEducationID] = _UserEducation.PropertyNames.UserEducationID;
					ht[UserID] = _UserEducation.PropertyNames.UserID;
					ht[EducationTypeCode] = _UserEducation.PropertyNames.EducationTypeCode;
					ht[SchoolID] = _UserEducation.PropertyNames.SchoolID;
					ht[EducationStatusID] = _UserEducation.PropertyNames.EducationStatusID;
					ht[StartDate] = _UserEducation.PropertyNames.StartDate;
					ht[EndDate] = _UserEducation.PropertyNames.EndDate;
					ht[OtherSchool] = _UserEducation.PropertyNames.OtherSchool;
					ht[DepartmentID] = _UserEducation.PropertyNames.DepartmentID;
					ht[OtherDepartment] = _UserEducation.PropertyNames.OtherDepartment;
					ht[CountryID] = _UserEducation.PropertyNames.CountryID;
					ht[CityID] = _UserEducation.PropertyNames.CityID;
					ht[OtherCity] = _UserEducation.PropertyNames.OtherCity;
					ht[Degree] = _UserEducation.PropertyNames.Degree;
					ht[IsDeleted] = _UserEducation.PropertyNames.IsDeleted;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string UserEducationID = "UserEducationID";
            public const string UserID = "UserID";
            public const string EducationTypeCode = "EducationTypeCode";
            public const string SchoolID = "SchoolID";
            public const string EducationStatusID = "EducationStatusID";
            public const string StartDate = "StartDate";
            public const string EndDate = "EndDate";
            public const string OtherSchool = "OtherSchool";
            public const string DepartmentID = "DepartmentID";
            public const string OtherDepartment = "OtherDepartment";
            public const string CountryID = "CountryID";
            public const string CityID = "CityID";
            public const string OtherCity = "OtherCity";
            public const string Degree = "Degree";
            public const string IsDeleted = "IsDeleted";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserEducationID] = _UserEducation.ColumnNames.UserEducationID;
					ht[UserID] = _UserEducation.ColumnNames.UserID;
					ht[EducationTypeCode] = _UserEducation.ColumnNames.EducationTypeCode;
					ht[SchoolID] = _UserEducation.ColumnNames.SchoolID;
					ht[EducationStatusID] = _UserEducation.ColumnNames.EducationStatusID;
					ht[StartDate] = _UserEducation.ColumnNames.StartDate;
					ht[EndDate] = _UserEducation.ColumnNames.EndDate;
					ht[OtherSchool] = _UserEducation.ColumnNames.OtherSchool;
					ht[DepartmentID] = _UserEducation.ColumnNames.DepartmentID;
					ht[OtherDepartment] = _UserEducation.ColumnNames.OtherDepartment;
					ht[CountryID] = _UserEducation.ColumnNames.CountryID;
					ht[CityID] = _UserEducation.ColumnNames.CityID;
					ht[OtherCity] = _UserEducation.ColumnNames.OtherCity;
					ht[Degree] = _UserEducation.ColumnNames.Degree;
					ht[IsDeleted] = _UserEducation.ColumnNames.IsDeleted;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string UserEducationID = "s_UserEducationID";
            public const string UserID = "s_UserID";
            public const string EducationTypeCode = "s_EducationTypeCode";
            public const string SchoolID = "s_SchoolID";
            public const string EducationStatusID = "s_EducationStatusID";
            public const string StartDate = "s_StartDate";
            public const string EndDate = "s_EndDate";
            public const string OtherSchool = "s_OtherSchool";
            public const string DepartmentID = "s_DepartmentID";
            public const string OtherDepartment = "s_OtherDepartment";
            public const string CountryID = "s_CountryID";
            public const string CityID = "s_CityID";
            public const string OtherCity = "s_OtherCity";
            public const string Degree = "s_Degree";
            public const string IsDeleted = "s_IsDeleted";

		}
		#endregion		
		
		#region Properties
	
		public virtual int UserEducationID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserEducationID);
			}
			set
	        {
				base.Setint(ColumnNames.UserEducationID, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual int EducationTypeCode
	    {
			get
	        {
				return base.Getint(ColumnNames.EducationTypeCode);
			}
			set
	        {
				base.Setint(ColumnNames.EducationTypeCode, value);
			}
		}

		public virtual int SchoolID
	    {
			get
	        {
				return base.Getint(ColumnNames.SchoolID);
			}
			set
	        {
				base.Setint(ColumnNames.SchoolID, value);
			}
		}

		public virtual int EducationStatusID
	    {
			get
	        {
				return base.Getint(ColumnNames.EducationStatusID);
			}
			set
	        {
				base.Setint(ColumnNames.EducationStatusID, value);
			}
		}

		public virtual DateTime StartDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.StartDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.StartDate, value);
			}
		}

		public virtual DateTime EndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.EndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.EndDate, value);
			}
		}

		public virtual string OtherSchool
	    {
			get
	        {
				return base.Getstring(ColumnNames.OtherSchool);
			}
			set
	        {
				base.Setstring(ColumnNames.OtherSchool, value);
			}
		}

		public virtual int DepartmentID
	    {
			get
	        {
				return base.Getint(ColumnNames.DepartmentID);
			}
			set
	        {
				base.Setint(ColumnNames.DepartmentID, value);
			}
		}

		public virtual string OtherDepartment
	    {
			get
	        {
				return base.Getstring(ColumnNames.OtherDepartment);
			}
			set
	        {
				base.Setstring(ColumnNames.OtherDepartment, value);
			}
		}

		public virtual int CountryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryID, value);
			}
		}

		public virtual int CityID
	    {
			get
	        {
				return base.Getint(ColumnNames.CityID);
			}
			set
	        {
				base.Setint(ColumnNames.CityID, value);
			}
		}

		public virtual string OtherCity
	    {
			get
	        {
				return base.Getstring(ColumnNames.OtherCity);
			}
			set
	        {
				base.Setstring(ColumnNames.OtherCity, value);
			}
		}

		public virtual double Degree
	    {
			get
	        {
				return base.Getdouble(ColumnNames.Degree);
			}
			set
	        {
				base.Setdouble(ColumnNames.Degree, value);
			}
		}

		public virtual bool IsDeleted
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsDeleted);
			}
			set
	        {
				base.Setbool(ColumnNames.IsDeleted, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_UserEducationID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserEducationID) ? string.Empty : base.GetintAsString(ColumnNames.UserEducationID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserEducationID);
				else
					this.UserEducationID = base.SetintAsString(ColumnNames.UserEducationID, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_EducationTypeCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EducationTypeCode) ? string.Empty : base.GetintAsString(ColumnNames.EducationTypeCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EducationTypeCode);
				else
					this.EducationTypeCode = base.SetintAsString(ColumnNames.EducationTypeCode, value);
			}
		}

		public virtual string s_SchoolID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SchoolID) ? string.Empty : base.GetintAsString(ColumnNames.SchoolID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SchoolID);
				else
					this.SchoolID = base.SetintAsString(ColumnNames.SchoolID, value);
			}
		}

		public virtual string s_EducationStatusID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EducationStatusID) ? string.Empty : base.GetintAsString(ColumnNames.EducationStatusID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EducationStatusID);
				else
					this.EducationStatusID = base.SetintAsString(ColumnNames.EducationStatusID, value);
			}
		}

		public virtual string s_StartDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.StartDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.StartDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.StartDate);
				else
					this.StartDate = base.SetDateTimeAsString(ColumnNames.StartDate, value);
			}
		}

		public virtual string s_EndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EndDate);
				else
					this.EndDate = base.SetDateTimeAsString(ColumnNames.EndDate, value);
			}
		}

		public virtual string s_OtherSchool
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OtherSchool) ? string.Empty : base.GetstringAsString(ColumnNames.OtherSchool);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OtherSchool);
				else
					this.OtherSchool = base.SetstringAsString(ColumnNames.OtherSchool, value);
			}
		}

		public virtual string s_DepartmentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DepartmentID) ? string.Empty : base.GetintAsString(ColumnNames.DepartmentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DepartmentID);
				else
					this.DepartmentID = base.SetintAsString(ColumnNames.DepartmentID, value);
			}
		}

		public virtual string s_OtherDepartment
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OtherDepartment) ? string.Empty : base.GetstringAsString(ColumnNames.OtherDepartment);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OtherDepartment);
				else
					this.OtherDepartment = base.SetstringAsString(ColumnNames.OtherDepartment, value);
			}
		}

		public virtual string s_CountryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryID) ? string.Empty : base.GetintAsString(ColumnNames.CountryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryID);
				else
					this.CountryID = base.SetintAsString(ColumnNames.CountryID, value);
			}
		}

		public virtual string s_CityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CityID) ? string.Empty : base.GetintAsString(ColumnNames.CityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CityID);
				else
					this.CityID = base.SetintAsString(ColumnNames.CityID, value);
			}
		}

		public virtual string s_OtherCity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.OtherCity) ? string.Empty : base.GetstringAsString(ColumnNames.OtherCity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OtherCity);
				else
					this.OtherCity = base.SetstringAsString(ColumnNames.OtherCity, value);
			}
		}

		public virtual string s_Degree
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Degree) ? string.Empty : base.GetdoubleAsString(ColumnNames.Degree);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Degree);
				else
					this.Degree = base.SetdoubleAsString(ColumnNames.Degree, value);
			}
		}

		public virtual string s_IsDeleted
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsDeleted) ? string.Empty : base.GetboolAsString(ColumnNames.IsDeleted);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsDeleted);
				else
					this.IsDeleted = base.SetboolAsString(ColumnNames.IsDeleted, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter UserEducationID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserEducationID, Parameters.UserEducationID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EducationTypeCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EducationTypeCode, Parameters.EducationTypeCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SchoolID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SchoolID, Parameters.SchoolID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EducationStatusID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EducationStatusID, Parameters.EducationStatusID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter StartDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OtherSchool
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OtherSchool, Parameters.OtherSchool);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DepartmentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DepartmentID, Parameters.DepartmentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OtherDepartment
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OtherDepartment, Parameters.OtherDepartment);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CountryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CityID, Parameters.CityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter OtherCity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.OtherCity, Parameters.OtherCity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Degree
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Degree, Parameters.Degree);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsDeleted
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter UserEducationID
		    {
				get
		        {
					if(_UserEducationID_W == null)
	        	    {
						_UserEducationID_W = TearOff.UserEducationID;
					}
					return _UserEducationID_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter EducationTypeCode
		    {
				get
		        {
					if(_EducationTypeCode_W == null)
	        	    {
						_EducationTypeCode_W = TearOff.EducationTypeCode;
					}
					return _EducationTypeCode_W;
				}
			}

			public WhereParameter SchoolID
		    {
				get
		        {
					if(_SchoolID_W == null)
	        	    {
						_SchoolID_W = TearOff.SchoolID;
					}
					return _SchoolID_W;
				}
			}

			public WhereParameter EducationStatusID
		    {
				get
		        {
					if(_EducationStatusID_W == null)
	        	    {
						_EducationStatusID_W = TearOff.EducationStatusID;
					}
					return _EducationStatusID_W;
				}
			}

			public WhereParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public WhereParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public WhereParameter OtherSchool
		    {
				get
		        {
					if(_OtherSchool_W == null)
	        	    {
						_OtherSchool_W = TearOff.OtherSchool;
					}
					return _OtherSchool_W;
				}
			}

			public WhereParameter DepartmentID
		    {
				get
		        {
					if(_DepartmentID_W == null)
	        	    {
						_DepartmentID_W = TearOff.DepartmentID;
					}
					return _DepartmentID_W;
				}
			}

			public WhereParameter OtherDepartment
		    {
				get
		        {
					if(_OtherDepartment_W == null)
	        	    {
						_OtherDepartment_W = TearOff.OtherDepartment;
					}
					return _OtherDepartment_W;
				}
			}

			public WhereParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public WhereParameter CityID
		    {
				get
		        {
					if(_CityID_W == null)
	        	    {
						_CityID_W = TearOff.CityID;
					}
					return _CityID_W;
				}
			}

			public WhereParameter OtherCity
		    {
				get
		        {
					if(_OtherCity_W == null)
	        	    {
						_OtherCity_W = TearOff.OtherCity;
					}
					return _OtherCity_W;
				}
			}

			public WhereParameter Degree
		    {
				get
		        {
					if(_Degree_W == null)
	        	    {
						_Degree_W = TearOff.Degree;
					}
					return _Degree_W;
				}
			}

			public WhereParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			private WhereParameter _UserEducationID_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _EducationTypeCode_W = null;
			private WhereParameter _SchoolID_W = null;
			private WhereParameter _EducationStatusID_W = null;
			private WhereParameter _StartDate_W = null;
			private WhereParameter _EndDate_W = null;
			private WhereParameter _OtherSchool_W = null;
			private WhereParameter _DepartmentID_W = null;
			private WhereParameter _OtherDepartment_W = null;
			private WhereParameter _CountryID_W = null;
			private WhereParameter _CityID_W = null;
			private WhereParameter _OtherCity_W = null;
			private WhereParameter _Degree_W = null;
			private WhereParameter _IsDeleted_W = null;

			public void WhereClauseReset()
			{
				_UserEducationID_W = null;
				_UserID_W = null;
				_EducationTypeCode_W = null;
				_SchoolID_W = null;
				_EducationStatusID_W = null;
				_StartDate_W = null;
				_EndDate_W = null;
				_OtherSchool_W = null;
				_DepartmentID_W = null;
				_OtherDepartment_W = null;
				_CountryID_W = null;
				_CityID_W = null;
				_OtherCity_W = null;
				_Degree_W = null;
				_IsDeleted_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter UserEducationID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserEducationID, Parameters.UserEducationID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EducationTypeCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EducationTypeCode, Parameters.EducationTypeCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SchoolID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SchoolID, Parameters.SchoolID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EducationStatusID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EducationStatusID, Parameters.EducationStatusID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter StartDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.StartDate, Parameters.StartDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OtherSchool
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OtherSchool, Parameters.OtherSchool);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DepartmentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepartmentID, Parameters.DepartmentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OtherDepartment
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OtherDepartment, Parameters.OtherDepartment);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CountryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CityID, Parameters.CityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter OtherCity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.OtherCity, Parameters.OtherCity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Degree
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Degree, Parameters.Degree);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsDeleted
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDeleted, Parameters.IsDeleted);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter UserEducationID
		    {
				get
		        {
					if(_UserEducationID_W == null)
	        	    {
						_UserEducationID_W = TearOff.UserEducationID;
					}
					return _UserEducationID_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter EducationTypeCode
		    {
				get
		        {
					if(_EducationTypeCode_W == null)
	        	    {
						_EducationTypeCode_W = TearOff.EducationTypeCode;
					}
					return _EducationTypeCode_W;
				}
			}

			public AggregateParameter SchoolID
		    {
				get
		        {
					if(_SchoolID_W == null)
	        	    {
						_SchoolID_W = TearOff.SchoolID;
					}
					return _SchoolID_W;
				}
			}

			public AggregateParameter EducationStatusID
		    {
				get
		        {
					if(_EducationStatusID_W == null)
	        	    {
						_EducationStatusID_W = TearOff.EducationStatusID;
					}
					return _EducationStatusID_W;
				}
			}

			public AggregateParameter StartDate
		    {
				get
		        {
					if(_StartDate_W == null)
	        	    {
						_StartDate_W = TearOff.StartDate;
					}
					return _StartDate_W;
				}
			}

			public AggregateParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public AggregateParameter OtherSchool
		    {
				get
		        {
					if(_OtherSchool_W == null)
	        	    {
						_OtherSchool_W = TearOff.OtherSchool;
					}
					return _OtherSchool_W;
				}
			}

			public AggregateParameter DepartmentID
		    {
				get
		        {
					if(_DepartmentID_W == null)
	        	    {
						_DepartmentID_W = TearOff.DepartmentID;
					}
					return _DepartmentID_W;
				}
			}

			public AggregateParameter OtherDepartment
		    {
				get
		        {
					if(_OtherDepartment_W == null)
	        	    {
						_OtherDepartment_W = TearOff.OtherDepartment;
					}
					return _OtherDepartment_W;
				}
			}

			public AggregateParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public AggregateParameter CityID
		    {
				get
		        {
					if(_CityID_W == null)
	        	    {
						_CityID_W = TearOff.CityID;
					}
					return _CityID_W;
				}
			}

			public AggregateParameter OtherCity
		    {
				get
		        {
					if(_OtherCity_W == null)
	        	    {
						_OtherCity_W = TearOff.OtherCity;
					}
					return _OtherCity_W;
				}
			}

			public AggregateParameter Degree
		    {
				get
		        {
					if(_Degree_W == null)
	        	    {
						_Degree_W = TearOff.Degree;
					}
					return _Degree_W;
				}
			}

			public AggregateParameter IsDeleted
		    {
				get
		        {
					if(_IsDeleted_W == null)
	        	    {
						_IsDeleted_W = TearOff.IsDeleted;
					}
					return _IsDeleted_W;
				}
			}

			private AggregateParameter _UserEducationID_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _EducationTypeCode_W = null;
			private AggregateParameter _SchoolID_W = null;
			private AggregateParameter _EducationStatusID_W = null;
			private AggregateParameter _StartDate_W = null;
			private AggregateParameter _EndDate_W = null;
			private AggregateParameter _OtherSchool_W = null;
			private AggregateParameter _DepartmentID_W = null;
			private AggregateParameter _OtherDepartment_W = null;
			private AggregateParameter _CountryID_W = null;
			private AggregateParameter _CityID_W = null;
			private AggregateParameter _OtherCity_W = null;
			private AggregateParameter _Degree_W = null;
			private AggregateParameter _IsDeleted_W = null;

			public void AggregateClauseReset()
			{
				_UserEducationID_W = null;
				_UserID_W = null;
				_EducationTypeCode_W = null;
				_SchoolID_W = null;
				_EducationStatusID_W = null;
				_StartDate_W = null;
				_EndDate_W = null;
				_OtherSchool_W = null;
				_DepartmentID_W = null;
				_OtherDepartment_W = null;
				_CountryID_W = null;
				_CityID_W = null;
				_OtherCity_W = null;
				_Degree_W = null;
				_IsDeleted_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserEducationInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.UserEducationID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserEducationUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserEducationDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.UserEducationID);
			p.SourceColumn = ColumnNames.UserEducationID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.UserEducationID);
			p.SourceColumn = ColumnNames.UserEducationID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EducationTypeCode);
			p.SourceColumn = ColumnNames.EducationTypeCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SchoolID);
			p.SourceColumn = ColumnNames.SchoolID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EducationStatusID);
			p.SourceColumn = ColumnNames.EducationStatusID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.StartDate);
			p.SourceColumn = ColumnNames.StartDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EndDate);
			p.SourceColumn = ColumnNames.EndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OtherSchool);
			p.SourceColumn = ColumnNames.OtherSchool;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DepartmentID);
			p.SourceColumn = ColumnNames.DepartmentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OtherDepartment);
			p.SourceColumn = ColumnNames.OtherDepartment;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CountryID);
			p.SourceColumn = ColumnNames.CountryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CityID);
			p.SourceColumn = ColumnNames.CityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.OtherCity);
			p.SourceColumn = ColumnNames.OtherCity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Degree);
			p.SourceColumn = ColumnNames.Degree;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsDeleted);
			p.SourceColumn = ColumnNames.IsDeleted;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
