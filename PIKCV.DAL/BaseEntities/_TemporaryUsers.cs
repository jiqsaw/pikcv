
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _TemporaryUsers : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _TemporaryUsers()
		{
			this.QuerySource = "TemporaryUsers";
			this.MappingName = "TemporaryUsers";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TemporaryUsersLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int TemporaryUserID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.TemporaryUserID, TemporaryUserID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TemporaryUsersLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TemporaryUserID
			{
				get
				{
					return new SqlParameter("@TemporaryUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FolderID
			{
				get
				{
					return new SqlParameter("@FolderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserCode
			{
				get
				{
					return new SqlParameter("@UserCode", SqlDbType.NChar, 12);
				}
			}
			
			public static SqlParameter Password
			{
				get
				{
					return new SqlParameter("@Password", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter CreateDate
			{
				get
				{
					return new SqlParameter("@CreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter EndDate
			{
				get
				{
					return new SqlParameter("@EndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Notes
			{
				get
				{
					return new SqlParameter("@Notes", SqlDbType.NVarChar, 1024);
				}
			}
			
			public static SqlParameter Email
			{
				get
				{
					return new SqlParameter("@Email", SqlDbType.NVarChar, 128);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TemporaryUserID = "TemporaryUserID";
            public const string FolderID = "FolderID";
            public const string UserCode = "UserCode";
            public const string Password = "Password";
            public const string CreateDate = "CreateDate";
            public const string EndDate = "EndDate";
            public const string Notes = "Notes";
            public const string Email = "Email";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TemporaryUserID] = _TemporaryUsers.PropertyNames.TemporaryUserID;
					ht[FolderID] = _TemporaryUsers.PropertyNames.FolderID;
					ht[UserCode] = _TemporaryUsers.PropertyNames.UserCode;
					ht[Password] = _TemporaryUsers.PropertyNames.Password;
					ht[CreateDate] = _TemporaryUsers.PropertyNames.CreateDate;
					ht[EndDate] = _TemporaryUsers.PropertyNames.EndDate;
					ht[Notes] = _TemporaryUsers.PropertyNames.Notes;
					ht[Email] = _TemporaryUsers.PropertyNames.Email;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TemporaryUserID = "TemporaryUserID";
            public const string FolderID = "FolderID";
            public const string UserCode = "UserCode";
            public const string Password = "Password";
            public const string CreateDate = "CreateDate";
            public const string EndDate = "EndDate";
            public const string Notes = "Notes";
            public const string Email = "Email";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TemporaryUserID] = _TemporaryUsers.ColumnNames.TemporaryUserID;
					ht[FolderID] = _TemporaryUsers.ColumnNames.FolderID;
					ht[UserCode] = _TemporaryUsers.ColumnNames.UserCode;
					ht[Password] = _TemporaryUsers.ColumnNames.Password;
					ht[CreateDate] = _TemporaryUsers.ColumnNames.CreateDate;
					ht[EndDate] = _TemporaryUsers.ColumnNames.EndDate;
					ht[Notes] = _TemporaryUsers.ColumnNames.Notes;
					ht[Email] = _TemporaryUsers.ColumnNames.Email;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TemporaryUserID = "s_TemporaryUserID";
            public const string FolderID = "s_FolderID";
            public const string UserCode = "s_UserCode";
            public const string Password = "s_Password";
            public const string CreateDate = "s_CreateDate";
            public const string EndDate = "s_EndDate";
            public const string Notes = "s_Notes";
            public const string Email = "s_Email";

		}
		#endregion		
		
		#region Properties
	
		public virtual int TemporaryUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.TemporaryUserID);
			}
			set
	        {
				base.Setint(ColumnNames.TemporaryUserID, value);
			}
		}

		public virtual int FolderID
	    {
			get
	        {
				return base.Getint(ColumnNames.FolderID);
			}
			set
	        {
				base.Setint(ColumnNames.FolderID, value);
			}
		}

		public virtual string UserCode
	    {
			get
	        {
				return base.Getstring(ColumnNames.UserCode);
			}
			set
	        {
				base.Setstring(ColumnNames.UserCode, value);
			}
		}

		public virtual string Password
	    {
			get
	        {
				return base.Getstring(ColumnNames.Password);
			}
			set
	        {
				base.Setstring(ColumnNames.Password, value);
			}
		}

		public virtual DateTime CreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreateDate, value);
			}
		}

		public virtual DateTime EndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.EndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.EndDate, value);
			}
		}

		public virtual string Notes
	    {
			get
	        {
				return base.Getstring(ColumnNames.Notes);
			}
			set
	        {
				base.Setstring(ColumnNames.Notes, value);
			}
		}

		public virtual string Email
	    {
			get
	        {
				return base.Getstring(ColumnNames.Email);
			}
			set
	        {
				base.Setstring(ColumnNames.Email, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TemporaryUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TemporaryUserID) ? string.Empty : base.GetintAsString(ColumnNames.TemporaryUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TemporaryUserID);
				else
					this.TemporaryUserID = base.SetintAsString(ColumnNames.TemporaryUserID, value);
			}
		}

		public virtual string s_FolderID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FolderID) ? string.Empty : base.GetintAsString(ColumnNames.FolderID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FolderID);
				else
					this.FolderID = base.SetintAsString(ColumnNames.FolderID, value);
			}
		}

		public virtual string s_UserCode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserCode) ? string.Empty : base.GetstringAsString(ColumnNames.UserCode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserCode);
				else
					this.UserCode = base.SetstringAsString(ColumnNames.UserCode, value);
			}
		}

		public virtual string s_Password
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Password) ? string.Empty : base.GetstringAsString(ColumnNames.Password);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Password);
				else
					this.Password = base.SetstringAsString(ColumnNames.Password, value);
			}
		}

		public virtual string s_CreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreateDate);
				else
					this.CreateDate = base.SetDateTimeAsString(ColumnNames.CreateDate, value);
			}
		}

		public virtual string s_EndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EndDate);
				else
					this.EndDate = base.SetDateTimeAsString(ColumnNames.EndDate, value);
			}
		}

		public virtual string s_Notes
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Notes) ? string.Empty : base.GetstringAsString(ColumnNames.Notes);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Notes);
				else
					this.Notes = base.SetstringAsString(ColumnNames.Notes, value);
			}
		}

		public virtual string s_Email
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Email) ? string.Empty : base.GetstringAsString(ColumnNames.Email);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Email);
				else
					this.Email = base.SetstringAsString(ColumnNames.Email, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TemporaryUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TemporaryUserID, Parameters.TemporaryUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FolderID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FolderID, Parameters.FolderID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserCode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserCode, Parameters.UserCode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Password
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Notes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Email
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TemporaryUserID
		    {
				get
		        {
					if(_TemporaryUserID_W == null)
	        	    {
						_TemporaryUserID_W = TearOff.TemporaryUserID;
					}
					return _TemporaryUserID_W;
				}
			}

			public WhereParameter FolderID
		    {
				get
		        {
					if(_FolderID_W == null)
	        	    {
						_FolderID_W = TearOff.FolderID;
					}
					return _FolderID_W;
				}
			}

			public WhereParameter UserCode
		    {
				get
		        {
					if(_UserCode_W == null)
	        	    {
						_UserCode_W = TearOff.UserCode;
					}
					return _UserCode_W;
				}
			}

			public WhereParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public WhereParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public WhereParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public WhereParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public WhereParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			private WhereParameter _TemporaryUserID_W = null;
			private WhereParameter _FolderID_W = null;
			private WhereParameter _UserCode_W = null;
			private WhereParameter _Password_W = null;
			private WhereParameter _CreateDate_W = null;
			private WhereParameter _EndDate_W = null;
			private WhereParameter _Notes_W = null;
			private WhereParameter _Email_W = null;

			public void WhereClauseReset()
			{
				_TemporaryUserID_W = null;
				_FolderID_W = null;
				_UserCode_W = null;
				_Password_W = null;
				_CreateDate_W = null;
				_EndDate_W = null;
				_Notes_W = null;
				_Email_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TemporaryUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TemporaryUserID, Parameters.TemporaryUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FolderID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FolderID, Parameters.FolderID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserCode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserCode, Parameters.UserCode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Password
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Notes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Notes, Parameters.Notes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Email
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Email, Parameters.Email);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TemporaryUserID
		    {
				get
		        {
					if(_TemporaryUserID_W == null)
	        	    {
						_TemporaryUserID_W = TearOff.TemporaryUserID;
					}
					return _TemporaryUserID_W;
				}
			}

			public AggregateParameter FolderID
		    {
				get
		        {
					if(_FolderID_W == null)
	        	    {
						_FolderID_W = TearOff.FolderID;
					}
					return _FolderID_W;
				}
			}

			public AggregateParameter UserCode
		    {
				get
		        {
					if(_UserCode_W == null)
	        	    {
						_UserCode_W = TearOff.UserCode;
					}
					return _UserCode_W;
				}
			}

			public AggregateParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public AggregateParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public AggregateParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public AggregateParameter Notes
		    {
				get
		        {
					if(_Notes_W == null)
	        	    {
						_Notes_W = TearOff.Notes;
					}
					return _Notes_W;
				}
			}

			public AggregateParameter Email
		    {
				get
		        {
					if(_Email_W == null)
	        	    {
						_Email_W = TearOff.Email;
					}
					return _Email_W;
				}
			}

			private AggregateParameter _TemporaryUserID_W = null;
			private AggregateParameter _FolderID_W = null;
			private AggregateParameter _UserCode_W = null;
			private AggregateParameter _Password_W = null;
			private AggregateParameter _CreateDate_W = null;
			private AggregateParameter _EndDate_W = null;
			private AggregateParameter _Notes_W = null;
			private AggregateParameter _Email_W = null;

			public void AggregateClauseReset()
			{
				_TemporaryUserID_W = null;
				_FolderID_W = null;
				_UserCode_W = null;
				_Password_W = null;
				_CreateDate_W = null;
				_EndDate_W = null;
				_Notes_W = null;
				_Email_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TemporaryUsersInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.TemporaryUserID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TemporaryUsersUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TemporaryUsersDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.TemporaryUserID);
			p.SourceColumn = ColumnNames.TemporaryUserID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.TemporaryUserID);
			p.SourceColumn = ColumnNames.TemporaryUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FolderID);
			p.SourceColumn = ColumnNames.FolderID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserCode);
			p.SourceColumn = ColumnNames.UserCode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Password);
			p.SourceColumn = ColumnNames.Password;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreateDate);
			p.SourceColumn = ColumnNames.CreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EndDate);
			p.SourceColumn = ColumnNames.EndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Notes);
			p.SourceColumn = ColumnNames.Notes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Email);
			p.SourceColumn = ColumnNames.Email;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
