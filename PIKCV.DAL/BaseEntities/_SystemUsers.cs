
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _SystemUsers : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _SystemUsers()
		{
			this.QuerySource = "SystemUsers";
			this.MappingName = "SystemUsers";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SystemUsersLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int SystemUserID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.SystemUserID, SystemUserID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_SystemUsersLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter SystemUserID
			{
				get
				{
					return new SqlParameter("@SystemUserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter FirstName
			{
				get
				{
					return new SqlParameter("@FirstName", SqlDbType.NVarChar, 64);
				}
			}
			
			public static SqlParameter LastName
			{
				get
				{
					return new SqlParameter("@LastName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter EMail
			{
				get
				{
					return new SqlParameter("@EMail", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter Password
			{
				get
				{
					return new SqlParameter("@Password", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter PhoneNumber
			{
				get
				{
					return new SqlParameter("@PhoneNumber", SqlDbType.NVarChar, 32);
				}
			}
			
			public static SqlParameter SystemUserType
			{
				get
				{
					return new SqlParameter("@SystemUserType", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CreateDate
			{
				get
				{
					return new SqlParameter("@CreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifyDate
			{
				get
				{
					return new SqlParameter("@ModifyDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IsActive
			{
				get
				{
					return new SqlParameter("@IsActive", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string SystemUserID = "SystemUserID";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string EMail = "EMail";
            public const string Password = "Password";
            public const string PhoneNumber = "PhoneNumber";
            public const string SystemUserType = "SystemUserType";
            public const string CreateDate = "CreateDate";
            public const string ModifyDate = "ModifyDate";
            public const string IsActive = "isActive";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SystemUserID] = _SystemUsers.PropertyNames.SystemUserID;
					ht[FirstName] = _SystemUsers.PropertyNames.FirstName;
					ht[LastName] = _SystemUsers.PropertyNames.LastName;
					ht[EMail] = _SystemUsers.PropertyNames.EMail;
					ht[Password] = _SystemUsers.PropertyNames.Password;
					ht[PhoneNumber] = _SystemUsers.PropertyNames.PhoneNumber;
					ht[SystemUserType] = _SystemUsers.PropertyNames.SystemUserType;
					ht[CreateDate] = _SystemUsers.PropertyNames.CreateDate;
					ht[ModifyDate] = _SystemUsers.PropertyNames.ModifyDate;
					ht[IsActive] = _SystemUsers.PropertyNames.IsActive;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string SystemUserID = "SystemUserID";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string EMail = "EMail";
            public const string Password = "Password";
            public const string PhoneNumber = "PhoneNumber";
            public const string SystemUserType = "SystemUserType";
            public const string CreateDate = "CreateDate";
            public const string ModifyDate = "ModifyDate";
            public const string IsActive = "IsActive";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[SystemUserID] = _SystemUsers.ColumnNames.SystemUserID;
					ht[FirstName] = _SystemUsers.ColumnNames.FirstName;
					ht[LastName] = _SystemUsers.ColumnNames.LastName;
					ht[EMail] = _SystemUsers.ColumnNames.EMail;
					ht[Password] = _SystemUsers.ColumnNames.Password;
					ht[PhoneNumber] = _SystemUsers.ColumnNames.PhoneNumber;
					ht[SystemUserType] = _SystemUsers.ColumnNames.SystemUserType;
					ht[CreateDate] = _SystemUsers.ColumnNames.CreateDate;
					ht[ModifyDate] = _SystemUsers.ColumnNames.ModifyDate;
					ht[IsActive] = _SystemUsers.ColumnNames.IsActive;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string SystemUserID = "s_SystemUserID";
            public const string FirstName = "s_FirstName";
            public const string LastName = "s_LastName";
            public const string EMail = "s_EMail";
            public const string Password = "s_Password";
            public const string PhoneNumber = "s_PhoneNumber";
            public const string SystemUserType = "s_SystemUserType";
            public const string CreateDate = "s_CreateDate";
            public const string ModifyDate = "s_ModifyDate";
            public const string IsActive = "s_IsActive";

		}
		#endregion		
		
		#region Properties
	
		public virtual int SystemUserID
	    {
			get
	        {
				return base.Getint(ColumnNames.SystemUserID);
			}
			set
	        {
				base.Setint(ColumnNames.SystemUserID, value);
			}
		}

		public virtual string FirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual string LastName
	    {
			get
	        {
				return base.Getstring(ColumnNames.LastName);
			}
			set
	        {
				base.Setstring(ColumnNames.LastName, value);
			}
		}

		public virtual string EMail
	    {
			get
	        {
				return base.Getstring(ColumnNames.EMail);
			}
			set
	        {
				base.Setstring(ColumnNames.EMail, value);
			}
		}

		public virtual string Password
	    {
			get
	        {
				return base.Getstring(ColumnNames.Password);
			}
			set
	        {
				base.Setstring(ColumnNames.Password, value);
			}
		}

		public virtual string PhoneNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.PhoneNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.PhoneNumber, value);
			}
		}

		public virtual int SystemUserType
	    {
			get
	        {
				return base.Getint(ColumnNames.SystemUserType);
			}
			set
	        {
				base.Setint(ColumnNames.SystemUserType, value);
			}
		}

		public virtual DateTime CreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreateDate, value);
			}
		}

		public virtual DateTime ModifyDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifyDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifyDate, value);
			}
		}

		public virtual bool IsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.IsActive, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_SystemUserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SystemUserID) ? string.Empty : base.GetintAsString(ColumnNames.SystemUserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SystemUserID);
				else
					this.SystemUserID = base.SetintAsString(ColumnNames.SystemUserID, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_LastName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastName) ? string.Empty : base.GetstringAsString(ColumnNames.LastName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastName);
				else
					this.LastName = base.SetstringAsString(ColumnNames.LastName, value);
			}
		}

		public virtual string s_EMail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EMail) ? string.Empty : base.GetstringAsString(ColumnNames.EMail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EMail);
				else
					this.EMail = base.SetstringAsString(ColumnNames.EMail, value);
			}
		}

		public virtual string s_Password
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Password) ? string.Empty : base.GetstringAsString(ColumnNames.Password);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Password);
				else
					this.Password = base.SetstringAsString(ColumnNames.Password, value);
			}
		}

		public virtual string s_PhoneNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PhoneNumber) ? string.Empty : base.GetstringAsString(ColumnNames.PhoneNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PhoneNumber);
				else
					this.PhoneNumber = base.SetstringAsString(ColumnNames.PhoneNumber, value);
			}
		}

		public virtual string s_SystemUserType
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SystemUserType) ? string.Empty : base.GetintAsString(ColumnNames.SystemUserType);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SystemUserType);
				else
					this.SystemUserType = base.SetintAsString(ColumnNames.SystemUserType, value);
			}
		}

		public virtual string s_CreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreateDate);
				else
					this.CreateDate = base.SetDateTimeAsString(ColumnNames.CreateDate, value);
			}
		}

		public virtual string s_ModifyDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifyDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifyDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifyDate);
				else
					this.ModifyDate = base.SetDateTimeAsString(ColumnNames.ModifyDate, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetboolAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetboolAsString(ColumnNames.IsActive, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter SystemUserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SystemUserID, Parameters.SystemUserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EMail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EMail, Parameters.EMail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Password
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PhoneNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PhoneNumber, Parameters.PhoneNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SystemUserType
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SystemUserType, Parameters.SystemUserType);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifyDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter SystemUserID
		    {
				get
		        {
					if(_SystemUserID_W == null)
	        	    {
						_SystemUserID_W = TearOff.SystemUserID;
					}
					return _SystemUserID_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public WhereParameter EMail
		    {
				get
		        {
					if(_EMail_W == null)
	        	    {
						_EMail_W = TearOff.EMail;
					}
					return _EMail_W;
				}
			}

			public WhereParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public WhereParameter PhoneNumber
		    {
				get
		        {
					if(_PhoneNumber_W == null)
	        	    {
						_PhoneNumber_W = TearOff.PhoneNumber;
					}
					return _PhoneNumber_W;
				}
			}

			public WhereParameter SystemUserType
		    {
				get
		        {
					if(_SystemUserType_W == null)
	        	    {
						_SystemUserType_W = TearOff.SystemUserType;
					}
					return _SystemUserType_W;
				}
			}

			public WhereParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public WhereParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			private WhereParameter _SystemUserID_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _LastName_W = null;
			private WhereParameter _EMail_W = null;
			private WhereParameter _Password_W = null;
			private WhereParameter _PhoneNumber_W = null;
			private WhereParameter _SystemUserType_W = null;
			private WhereParameter _CreateDate_W = null;
			private WhereParameter _ModifyDate_W = null;
			private WhereParameter _IsActive_W = null;

			public void WhereClauseReset()
			{
				_SystemUserID_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_EMail_W = null;
				_Password_W = null;
				_PhoneNumber_W = null;
				_SystemUserType_W = null;
				_CreateDate_W = null;
				_ModifyDate_W = null;
				_IsActive_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter SystemUserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SystemUserID, Parameters.SystemUserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EMail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EMail, Parameters.EMail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Password
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PhoneNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PhoneNumber, Parameters.PhoneNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SystemUserType
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SystemUserType, Parameters.SystemUserType);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifyDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifyDate, Parameters.ModifyDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter SystemUserID
		    {
				get
		        {
					if(_SystemUserID_W == null)
	        	    {
						_SystemUserID_W = TearOff.SystemUserID;
					}
					return _SystemUserID_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public AggregateParameter EMail
		    {
				get
		        {
					if(_EMail_W == null)
	        	    {
						_EMail_W = TearOff.EMail;
					}
					return _EMail_W;
				}
			}

			public AggregateParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public AggregateParameter PhoneNumber
		    {
				get
		        {
					if(_PhoneNumber_W == null)
	        	    {
						_PhoneNumber_W = TearOff.PhoneNumber;
					}
					return _PhoneNumber_W;
				}
			}

			public AggregateParameter SystemUserType
		    {
				get
		        {
					if(_SystemUserType_W == null)
	        	    {
						_SystemUserType_W = TearOff.SystemUserType;
					}
					return _SystemUserType_W;
				}
			}

			public AggregateParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public AggregateParameter ModifyDate
		    {
				get
		        {
					if(_ModifyDate_W == null)
	        	    {
						_ModifyDate_W = TearOff.ModifyDate;
					}
					return _ModifyDate_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			private AggregateParameter _SystemUserID_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _LastName_W = null;
			private AggregateParameter _EMail_W = null;
			private AggregateParameter _Password_W = null;
			private AggregateParameter _PhoneNumber_W = null;
			private AggregateParameter _SystemUserType_W = null;
			private AggregateParameter _CreateDate_W = null;
			private AggregateParameter _ModifyDate_W = null;
			private AggregateParameter _IsActive_W = null;

			public void AggregateClauseReset()
			{
				_SystemUserID_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_EMail_W = null;
				_Password_W = null;
				_PhoneNumber_W = null;
				_SystemUserType_W = null;
				_CreateDate_W = null;
				_ModifyDate_W = null;
				_IsActive_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SystemUsersInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.SystemUserID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SystemUsersUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_SystemUsersDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.SystemUserID);
			p.SourceColumn = ColumnNames.SystemUserID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.SystemUserID);
			p.SourceColumn = ColumnNames.SystemUserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastName);
			p.SourceColumn = ColumnNames.LastName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EMail);
			p.SourceColumn = ColumnNames.EMail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Password);
			p.SourceColumn = ColumnNames.Password;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PhoneNumber);
			p.SourceColumn = ColumnNames.PhoneNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.SystemUserType);
			p.SourceColumn = ColumnNames.SystemUserType;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreateDate);
			p.SourceColumn = ColumnNames.CreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifyDate);
			p.SourceColumn = ColumnNames.ModifyDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsActive);
			p.SourceColumn = ColumnNames.IsActive;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
