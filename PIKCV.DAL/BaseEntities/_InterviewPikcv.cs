
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.0)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using PIKCV.DAO;

namespace PIKCV.DAL
{
	public abstract class _InterviewPikcv : SqlClientEntity
	{
		private string m_SchemaStoredProcedure = "Pikcv].[";
		public _InterviewPikcv()
		{
			this.QuerySource = "InterviewPikcv";
			this.MappingName = "InterviewPikcv";

		this.SchemaStoredProcedure = m_SchemaStoredProcedure;
		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InterviewPikcvLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int InterviewPikcvID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.InterviewPikcvID, InterviewPikcvID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_InterviewPikcvLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter InterviewPikcvID
			{
				get
				{
					return new SqlParameter("@InterviewPikcvID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter InterviewResult
			{
				get
				{
					return new SqlParameter("@InterviewResult", SqlDbType.NVarChar, 128);
				}
			}
			
			public static SqlParameter WorkLeaveReason
			{
				get
				{
					return new SqlParameter("@WorkLeaveReason", SqlDbType.NVarChar, 1024);
				}
			}
			
			public static SqlParameter TakingWage
			{
				get
				{
					return new SqlParameter("@TakingWage", SqlDbType.NVarChar, 32);
				}
			}
			
			public static SqlParameter RequestedWage
			{
				get
				{
					return new SqlParameter("@RequestedWage", SqlDbType.NVarChar, 32);
				}
			}
			
			public static SqlParameter InterviewDate
			{
				get
				{
					return new SqlParameter("@InterviewDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CreateDate
			{
				get
				{
					return new SqlParameter("@CreateDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string InterviewPikcvID = "InterviewPikcvID";
            public const string UserID = "UserID";
            public const string InterviewResult = "InterviewResult";
            public const string WorkLeaveReason = "WorkLeaveReason";
            public const string TakingWage = "TakingWage";
            public const string RequestedWage = "RequestedWage";
            public const string InterviewDate = "InterviewDate";
            public const string CreateDate = "CreateDate";
            public const string CreatedBy = "CreatedBy";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InterviewPikcvID] = _InterviewPikcv.PropertyNames.InterviewPikcvID;
					ht[UserID] = _InterviewPikcv.PropertyNames.UserID;
					ht[InterviewResult] = _InterviewPikcv.PropertyNames.InterviewResult;
					ht[WorkLeaveReason] = _InterviewPikcv.PropertyNames.WorkLeaveReason;
					ht[TakingWage] = _InterviewPikcv.PropertyNames.TakingWage;
					ht[RequestedWage] = _InterviewPikcv.PropertyNames.RequestedWage;
					ht[InterviewDate] = _InterviewPikcv.PropertyNames.InterviewDate;
					ht[CreateDate] = _InterviewPikcv.PropertyNames.CreateDate;
					ht[CreatedBy] = _InterviewPikcv.PropertyNames.CreatedBy;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string InterviewPikcvID = "InterviewPikcvID";
            public const string UserID = "UserID";
            public const string InterviewResult = "InterviewResult";
            public const string WorkLeaveReason = "WorkLeaveReason";
            public const string TakingWage = "TakingWage";
            public const string RequestedWage = "RequestedWage";
            public const string InterviewDate = "InterviewDate";
            public const string CreateDate = "CreateDate";
            public const string CreatedBy = "CreatedBy";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[InterviewPikcvID] = _InterviewPikcv.ColumnNames.InterviewPikcvID;
					ht[UserID] = _InterviewPikcv.ColumnNames.UserID;
					ht[InterviewResult] = _InterviewPikcv.ColumnNames.InterviewResult;
					ht[WorkLeaveReason] = _InterviewPikcv.ColumnNames.WorkLeaveReason;
					ht[TakingWage] = _InterviewPikcv.ColumnNames.TakingWage;
					ht[RequestedWage] = _InterviewPikcv.ColumnNames.RequestedWage;
					ht[InterviewDate] = _InterviewPikcv.ColumnNames.InterviewDate;
					ht[CreateDate] = _InterviewPikcv.ColumnNames.CreateDate;
					ht[CreatedBy] = _InterviewPikcv.ColumnNames.CreatedBy;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string InterviewPikcvID = "s_InterviewPikcvID";
            public const string UserID = "s_UserID";
            public const string InterviewResult = "s_InterviewResult";
            public const string WorkLeaveReason = "s_WorkLeaveReason";
            public const string TakingWage = "s_TakingWage";
            public const string RequestedWage = "s_RequestedWage";
            public const string InterviewDate = "s_InterviewDate";
            public const string CreateDate = "s_CreateDate";
            public const string CreatedBy = "s_CreatedBy";

		}
		#endregion		
		
		#region Properties
	
		public virtual int InterviewPikcvID
	    {
			get
	        {
				return base.Getint(ColumnNames.InterviewPikcvID);
			}
			set
	        {
				base.Setint(ColumnNames.InterviewPikcvID, value);
			}
		}

		public virtual int UserID
	    {
			get
	        {
				return base.Getint(ColumnNames.UserID);
			}
			set
	        {
				base.Setint(ColumnNames.UserID, value);
			}
		}

		public virtual string InterviewResult
	    {
			get
	        {
				return base.Getstring(ColumnNames.InterviewResult);
			}
			set
	        {
				base.Setstring(ColumnNames.InterviewResult, value);
			}
		}

		public virtual string WorkLeaveReason
	    {
			get
	        {
				return base.Getstring(ColumnNames.WorkLeaveReason);
			}
			set
	        {
				base.Setstring(ColumnNames.WorkLeaveReason, value);
			}
		}

		public virtual string TakingWage
	    {
			get
	        {
				return base.Getstring(ColumnNames.TakingWage);
			}
			set
	        {
				base.Setstring(ColumnNames.TakingWage, value);
			}
		}

		public virtual string RequestedWage
	    {
			get
	        {
				return base.Getstring(ColumnNames.RequestedWage);
			}
			set
	        {
				base.Setstring(ColumnNames.RequestedWage, value);
			}
		}

		public virtual DateTime InterviewDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.InterviewDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.InterviewDate, value);
			}
		}

		public virtual DateTime CreateDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreateDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreateDate, value);
			}
		}

		public virtual int CreatedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.CreatedBy);
			}
			set
	        {
				base.Setint(ColumnNames.CreatedBy, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_InterviewPikcvID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewPikcvID) ? string.Empty : base.GetintAsString(ColumnNames.InterviewPikcvID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewPikcvID);
				else
					this.InterviewPikcvID = base.SetintAsString(ColumnNames.InterviewPikcvID, value);
			}
		}

		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetintAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetintAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_InterviewResult
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewResult) ? string.Empty : base.GetstringAsString(ColumnNames.InterviewResult);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewResult);
				else
					this.InterviewResult = base.SetstringAsString(ColumnNames.InterviewResult, value);
			}
		}

		public virtual string s_WorkLeaveReason
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WorkLeaveReason) ? string.Empty : base.GetstringAsString(ColumnNames.WorkLeaveReason);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WorkLeaveReason);
				else
					this.WorkLeaveReason = base.SetstringAsString(ColumnNames.WorkLeaveReason, value);
			}
		}

		public virtual string s_TakingWage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TakingWage) ? string.Empty : base.GetstringAsString(ColumnNames.TakingWage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TakingWage);
				else
					this.TakingWage = base.SetstringAsString(ColumnNames.TakingWage, value);
			}
		}

		public virtual string s_RequestedWage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RequestedWage) ? string.Empty : base.GetstringAsString(ColumnNames.RequestedWage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequestedWage);
				else
					this.RequestedWage = base.SetstringAsString(ColumnNames.RequestedWage, value);
			}
		}

		public virtual string s_InterviewDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.InterviewDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.InterviewDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.InterviewDate);
				else
					this.InterviewDate = base.SetDateTimeAsString(ColumnNames.InterviewDate, value);
			}
		}

		public virtual string s_CreateDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreateDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreateDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreateDate);
				else
					this.CreateDate = base.SetDateTimeAsString(ColumnNames.CreateDate, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetintAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetintAsString(ColumnNames.CreatedBy, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter InterviewPikcvID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewPikcvID, Parameters.InterviewPikcvID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewResult
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewResult, Parameters.InterviewResult);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WorkLeaveReason
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WorkLeaveReason, Parameters.WorkLeaveReason);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TakingWage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TakingWage, Parameters.TakingWage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RequestedWage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RequestedWage, Parameters.RequestedWage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter InterviewDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.InterviewDate, Parameters.InterviewDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreateDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter InterviewPikcvID
		    {
				get
		        {
					if(_InterviewPikcvID_W == null)
	        	    {
						_InterviewPikcvID_W = TearOff.InterviewPikcvID;
					}
					return _InterviewPikcvID_W;
				}
			}

			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter InterviewResult
		    {
				get
		        {
					if(_InterviewResult_W == null)
	        	    {
						_InterviewResult_W = TearOff.InterviewResult;
					}
					return _InterviewResult_W;
				}
			}

			public WhereParameter WorkLeaveReason
		    {
				get
		        {
					if(_WorkLeaveReason_W == null)
	        	    {
						_WorkLeaveReason_W = TearOff.WorkLeaveReason;
					}
					return _WorkLeaveReason_W;
				}
			}

			public WhereParameter TakingWage
		    {
				get
		        {
					if(_TakingWage_W == null)
	        	    {
						_TakingWage_W = TearOff.TakingWage;
					}
					return _TakingWage_W;
				}
			}

			public WhereParameter RequestedWage
		    {
				get
		        {
					if(_RequestedWage_W == null)
	        	    {
						_RequestedWage_W = TearOff.RequestedWage;
					}
					return _RequestedWage_W;
				}
			}

			public WhereParameter InterviewDate
		    {
				get
		        {
					if(_InterviewDate_W == null)
	        	    {
						_InterviewDate_W = TearOff.InterviewDate;
					}
					return _InterviewDate_W;
				}
			}

			public WhereParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			private WhereParameter _InterviewPikcvID_W = null;
			private WhereParameter _UserID_W = null;
			private WhereParameter _InterviewResult_W = null;
			private WhereParameter _WorkLeaveReason_W = null;
			private WhereParameter _TakingWage_W = null;
			private WhereParameter _RequestedWage_W = null;
			private WhereParameter _InterviewDate_W = null;
			private WhereParameter _CreateDate_W = null;
			private WhereParameter _CreatedBy_W = null;

			public void WhereClauseReset()
			{
				_InterviewPikcvID_W = null;
				_UserID_W = null;
				_InterviewResult_W = null;
				_WorkLeaveReason_W = null;
				_TakingWage_W = null;
				_RequestedWage_W = null;
				_InterviewDate_W = null;
				_CreateDate_W = null;
				_CreatedBy_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter InterviewPikcvID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewPikcvID, Parameters.InterviewPikcvID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewResult
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewResult, Parameters.InterviewResult);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WorkLeaveReason
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WorkLeaveReason, Parameters.WorkLeaveReason);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TakingWage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TakingWage, Parameters.TakingWage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RequestedWage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RequestedWage, Parameters.RequestedWage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter InterviewDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.InterviewDate, Parameters.InterviewDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreateDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreateDate, Parameters.CreateDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter InterviewPikcvID
		    {
				get
		        {
					if(_InterviewPikcvID_W == null)
	        	    {
						_InterviewPikcvID_W = TearOff.InterviewPikcvID;
					}
					return _InterviewPikcvID_W;
				}
			}

			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter InterviewResult
		    {
				get
		        {
					if(_InterviewResult_W == null)
	        	    {
						_InterviewResult_W = TearOff.InterviewResult;
					}
					return _InterviewResult_W;
				}
			}

			public AggregateParameter WorkLeaveReason
		    {
				get
		        {
					if(_WorkLeaveReason_W == null)
	        	    {
						_WorkLeaveReason_W = TearOff.WorkLeaveReason;
					}
					return _WorkLeaveReason_W;
				}
			}

			public AggregateParameter TakingWage
		    {
				get
		        {
					if(_TakingWage_W == null)
	        	    {
						_TakingWage_W = TearOff.TakingWage;
					}
					return _TakingWage_W;
				}
			}

			public AggregateParameter RequestedWage
		    {
				get
		        {
					if(_RequestedWage_W == null)
	        	    {
						_RequestedWage_W = TearOff.RequestedWage;
					}
					return _RequestedWage_W;
				}
			}

			public AggregateParameter InterviewDate
		    {
				get
		        {
					if(_InterviewDate_W == null)
	        	    {
						_InterviewDate_W = TearOff.InterviewDate;
					}
					return _InterviewDate_W;
				}
			}

			public AggregateParameter CreateDate
		    {
				get
		        {
					if(_CreateDate_W == null)
	        	    {
						_CreateDate_W = TearOff.CreateDate;
					}
					return _CreateDate_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			private AggregateParameter _InterviewPikcvID_W = null;
			private AggregateParameter _UserID_W = null;
			private AggregateParameter _InterviewResult_W = null;
			private AggregateParameter _WorkLeaveReason_W = null;
			private AggregateParameter _TakingWage_W = null;
			private AggregateParameter _RequestedWage_W = null;
			private AggregateParameter _InterviewDate_W = null;
			private AggregateParameter _CreateDate_W = null;
			private AggregateParameter _CreatedBy_W = null;

			public void AggregateClauseReset()
			{
				_InterviewPikcvID_W = null;
				_UserID_W = null;
				_InterviewResult_W = null;
				_WorkLeaveReason_W = null;
				_TakingWage_W = null;
				_RequestedWage_W = null;
				_InterviewDate_W = null;
				_CreateDate_W = null;
				_CreatedBy_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewPikcvInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.InterviewPikcvID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewPikcvUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_InterviewPikcvDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.InterviewPikcvID);
			p.SourceColumn = ColumnNames.InterviewPikcvID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.InterviewPikcvID);
			p.SourceColumn = ColumnNames.InterviewPikcvID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewResult);
			p.SourceColumn = ColumnNames.InterviewResult;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WorkLeaveReason);
			p.SourceColumn = ColumnNames.WorkLeaveReason;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TakingWage);
			p.SourceColumn = ColumnNames.TakingWage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RequestedWage);
			p.SourceColumn = ColumnNames.RequestedWage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.InterviewDate);
			p.SourceColumn = ColumnNames.InterviewDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreateDate);
			p.SourceColumn = ColumnNames.CreateDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
